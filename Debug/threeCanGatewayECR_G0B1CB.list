
threeCanGatewayECR_G0B1CB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007730  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  080077ec  080077ec  000177ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b88  08007b88  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007b88  08007b88  00017b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b90  08007b90  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b90  08007b90  00017b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b94  08007b94  00017b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  20000084  08007c1c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  08007c1c  00020608  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140fb  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a63  00000000  00000000  000341a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00036c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  00037be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d8af  00000000  00000000  00038aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126d5  00000000  00000000  00056357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba0e3  00000000  00000000  00068a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00122b0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c64  00000000  00000000  00122b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000084 	.word	0x20000084
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080077d4 	.word	0x080077d4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000088 	.word	0x20000088
 8000100:	080077d4 	.word	0x080077d4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 f8ba 	bl	80005ec <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 f8b5 	bl	80005ec <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	469b      	mov	fp, r3
 800048a:	d433      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048c:	465a      	mov	r2, fp
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83a      	bhi.n	8000516 <__udivmoddi4+0xc2>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e078      	b.n	8000598 <__udivmoddi4+0x144>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e075      	b.n	800059e <__udivmoddi4+0x14a>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e028      	b.n	800051e <__udivmoddi4+0xca>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	2320      	movs	r3, #32
 80004f8:	1a9b      	subs	r3, r3, r2
 80004fa:	4652      	mov	r2, sl
 80004fc:	40da      	lsrs	r2, r3
 80004fe:	4641      	mov	r1, r8
 8000500:	0013      	movs	r3, r2
 8000502:	464a      	mov	r2, r9
 8000504:	408a      	lsls	r2, r1
 8000506:	0017      	movs	r7, r2
 8000508:	4642      	mov	r2, r8
 800050a:	431f      	orrs	r7, r3
 800050c:	4653      	mov	r3, sl
 800050e:	4093      	lsls	r3, r2
 8000510:	001e      	movs	r6, r3
 8000512:	42af      	cmp	r7, r5
 8000514:	d9c4      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000516:	2200      	movs	r2, #0
 8000518:	2300      	movs	r3, #0
 800051a:	9200      	str	r2, [sp, #0]
 800051c:	9301      	str	r3, [sp, #4]
 800051e:	4643      	mov	r3, r8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0d9      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000524:	07fb      	lsls	r3, r7, #31
 8000526:	0872      	lsrs	r2, r6, #1
 8000528:	431a      	orrs	r2, r3
 800052a:	4646      	mov	r6, r8
 800052c:	087b      	lsrs	r3, r7, #1
 800052e:	e00e      	b.n	800054e <__udivmoddi4+0xfa>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d101      	bne.n	8000538 <__udivmoddi4+0xe4>
 8000534:	42a2      	cmp	r2, r4
 8000536:	d80c      	bhi.n	8000552 <__udivmoddi4+0xfe>
 8000538:	1aa4      	subs	r4, r4, r2
 800053a:	419d      	sbcs	r5, r3
 800053c:	2001      	movs	r0, #1
 800053e:	1924      	adds	r4, r4, r4
 8000540:	416d      	adcs	r5, r5
 8000542:	2100      	movs	r1, #0
 8000544:	3e01      	subs	r6, #1
 8000546:	1824      	adds	r4, r4, r0
 8000548:	414d      	adcs	r5, r1
 800054a:	2e00      	cmp	r6, #0
 800054c:	d006      	beq.n	800055c <__udivmoddi4+0x108>
 800054e:	42ab      	cmp	r3, r5
 8000550:	d9ee      	bls.n	8000530 <__udivmoddi4+0xdc>
 8000552:	3e01      	subs	r6, #1
 8000554:	1924      	adds	r4, r4, r4
 8000556:	416d      	adcs	r5, r5
 8000558:	2e00      	cmp	r6, #0
 800055a:	d1f8      	bne.n	800054e <__udivmoddi4+0xfa>
 800055c:	9800      	ldr	r0, [sp, #0]
 800055e:	9901      	ldr	r1, [sp, #4]
 8000560:	465b      	mov	r3, fp
 8000562:	1900      	adds	r0, r0, r4
 8000564:	4169      	adcs	r1, r5
 8000566:	2b00      	cmp	r3, #0
 8000568:	db24      	blt.n	80005b4 <__udivmoddi4+0x160>
 800056a:	002b      	movs	r3, r5
 800056c:	465a      	mov	r2, fp
 800056e:	4644      	mov	r4, r8
 8000570:	40d3      	lsrs	r3, r2
 8000572:	002a      	movs	r2, r5
 8000574:	40e2      	lsrs	r2, r4
 8000576:	001c      	movs	r4, r3
 8000578:	465b      	mov	r3, fp
 800057a:	0015      	movs	r5, r2
 800057c:	2b00      	cmp	r3, #0
 800057e:	db2a      	blt.n	80005d6 <__udivmoddi4+0x182>
 8000580:	0026      	movs	r6, r4
 8000582:	409e      	lsls	r6, r3
 8000584:	0033      	movs	r3, r6
 8000586:	0026      	movs	r6, r4
 8000588:	4647      	mov	r7, r8
 800058a:	40be      	lsls	r6, r7
 800058c:	0032      	movs	r2, r6
 800058e:	1a80      	subs	r0, r0, r2
 8000590:	4199      	sbcs	r1, r3
 8000592:	9000      	str	r0, [sp, #0]
 8000594:	9101      	str	r1, [sp, #4]
 8000596:	e79f      	b.n	80004d8 <__udivmoddi4+0x84>
 8000598:	42a3      	cmp	r3, r4
 800059a:	d8bc      	bhi.n	8000516 <__udivmoddi4+0xc2>
 800059c:	e783      	b.n	80004a6 <__udivmoddi4+0x52>
 800059e:	4642      	mov	r2, r8
 80005a0:	2320      	movs	r3, #32
 80005a2:	2100      	movs	r1, #0
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	2200      	movs	r2, #0
 80005a8:	9100      	str	r1, [sp, #0]
 80005aa:	9201      	str	r2, [sp, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	40da      	lsrs	r2, r3
 80005b0:	9201      	str	r2, [sp, #4]
 80005b2:	e786      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	2320      	movs	r3, #32
 80005b8:	1a9b      	subs	r3, r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	4646      	mov	r6, r8
 80005be:	409a      	lsls	r2, r3
 80005c0:	0023      	movs	r3, r4
 80005c2:	40f3      	lsrs	r3, r6
 80005c4:	4644      	mov	r4, r8
 80005c6:	4313      	orrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	dad4      	bge.n	8000580 <__udivmoddi4+0x12c>
 80005d6:	4642      	mov	r2, r8
 80005d8:	002f      	movs	r7, r5
 80005da:	2320      	movs	r3, #32
 80005dc:	0026      	movs	r6, r4
 80005de:	4097      	lsls	r7, r2
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	40de      	lsrs	r6, r3
 80005e4:	003b      	movs	r3, r7
 80005e6:	4333      	orrs	r3, r6
 80005e8:	e7cd      	b.n	8000586 <__udivmoddi4+0x132>
 80005ea:	46c0      	nop			; (mov r8, r8)

080005ec <__clzdi2>:
 80005ec:	b510      	push	{r4, lr}
 80005ee:	2900      	cmp	r1, #0
 80005f0:	d103      	bne.n	80005fa <__clzdi2+0xe>
 80005f2:	f000 f807 	bl	8000604 <__clzsi2>
 80005f6:	3020      	adds	r0, #32
 80005f8:	e002      	b.n	8000600 <__clzdi2+0x14>
 80005fa:	0008      	movs	r0, r1
 80005fc:	f000 f802 	bl	8000604 <__clzsi2>
 8000600:	bd10      	pop	{r4, pc}
 8000602:	46c0      	nop			; (mov r8, r8)

08000604 <__clzsi2>:
 8000604:	211c      	movs	r1, #28
 8000606:	2301      	movs	r3, #1
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	4298      	cmp	r0, r3
 800060c:	d301      	bcc.n	8000612 <__clzsi2+0xe>
 800060e:	0c00      	lsrs	r0, r0, #16
 8000610:	3910      	subs	r1, #16
 8000612:	0a1b      	lsrs	r3, r3, #8
 8000614:	4298      	cmp	r0, r3
 8000616:	d301      	bcc.n	800061c <__clzsi2+0x18>
 8000618:	0a00      	lsrs	r0, r0, #8
 800061a:	3908      	subs	r1, #8
 800061c:	091b      	lsrs	r3, r3, #4
 800061e:	4298      	cmp	r0, r3
 8000620:	d301      	bcc.n	8000626 <__clzsi2+0x22>
 8000622:	0900      	lsrs	r0, r0, #4
 8000624:	3904      	subs	r1, #4
 8000626:	a202      	add	r2, pc, #8	; (adr r2, 8000630 <__clzsi2+0x2c>)
 8000628:	5c10      	ldrb	r0, [r2, r0]
 800062a:	1840      	adds	r0, r0, r1
 800062c:	4770      	bx	lr
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	02020304 	.word	0x02020304
 8000634:	01010101 	.word	0x01010101
	...

08000640 <Init_CanA>:
/*****************************************************************************/



void Init_CanA()
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	txHeader_A.Identifier = 0x7FF;
 8000644:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <Init_CanA+0x80>)
 8000646:	4a1f      	ldr	r2, [pc, #124]	; (80006c4 <Init_CanA+0x84>)
 8000648:	601a      	str	r2, [r3, #0]
	txHeader_A.IdType = FDCAN_STANDARD_ID;
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <Init_CanA+0x80>)
 800064c:	2200      	movs	r2, #0
 800064e:	605a      	str	r2, [r3, #4]
	txHeader_A.TxFrameType = FDCAN_DATA_FRAME;
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <Init_CanA+0x80>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
	txHeader_A.DataLength = FDCAN_DLC_BYTES_8;
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <Init_CanA+0x80>)
 8000658:	2280      	movs	r2, #128	; 0x80
 800065a:	0312      	lsls	r2, r2, #12
 800065c:	60da      	str	r2, [r3, #12]
	txHeader_A.ErrorStateIndicator = FDCAN_ESI_PASSIVE;     //...
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <Init_CanA+0x80>)
 8000660:	2280      	movs	r2, #128	; 0x80
 8000662:	0612      	lsls	r2, r2, #24
 8000664:	611a      	str	r2, [r3, #16]
	txHeader_A.BitRateSwitch = FDCAN_BRS_OFF;               //...
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <Init_CanA+0x80>)
 8000668:	2200      	movs	r2, #0
 800066a:	615a      	str	r2, [r3, #20]
	txHeader_A.FDFormat = FDCAN_CLASSIC_CAN;                //...
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <Init_CanA+0x80>)
 800066e:	2200      	movs	r2, #0
 8000670:	619a      	str	r2, [r3, #24]
	txHeader_A.TxEventFifoControl = FDCAN_NO_TX_EVENTS;     //...
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <Init_CanA+0x80>)
 8000674:	2200      	movs	r2, #0
 8000676:	61da      	str	r2, [r3, #28]
	txHeader_A.MessageMarker = 0;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <Init_CanA+0x80>)
 800067a:	2200      	movs	r2, #0
 800067c:	621a      	str	r2, [r3, #32]


	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <Init_CanA+0x88>)
 8000680:	0018      	movs	r0, r3
 8000682:	f002 ff67 	bl	8003554 <HAL_FDCAN_Start>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d005      	beq.n	8000696 <Init_CanA+0x56>
	{
		dbgPrint("ERROR: hfdcan1, HAL_FDCAN_Start\n");
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <Init_CanA+0x8c>)
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fb07 	bl	8000ca0 <dbgPrint>
		Error_Handler();
 8000692:	f001 f811 	bl	80016b8 <Error_Handler>
	}

    // Enable interrupt, FIFO0,  FDCAN1, new data
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <Init_CanA+0x88>)
 8000698:	2200      	movs	r2, #0
 800069a:	2101      	movs	r1, #1
 800069c:	0018      	movs	r0, r3
 800069e:	f003 f8de 	bl	800385e <HAL_FDCAN_ActivateNotification>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d005      	beq.n	80006b2 <Init_CanA+0x72>
    {
      dbgPrint("ERROR: hfdcan1, HAL_FDCAN_ActivateNotification\n");
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <Init_CanA+0x90>)
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 faf9 	bl	8000ca0 <dbgPrint>
      Error_Handler();
 80006ae:	f001 f803 	bl	80016b8 <Error_Handler>
    }

    debugPrint("Init_CanA OK\n");
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <Init_CanA+0x94>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 faf3 	bl	8000ca0 <dbgPrint>
}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200004ec 	.word	0x200004ec
 80006c4:	000007ff 	.word	0x000007ff
 80006c8:	20000328 	.word	0x20000328
 80006cc:	080077ec 	.word	0x080077ec
 80006d0:	08007810 	.word	0x08007810
 80006d4:	08007840 	.word	0x08007840

080006d8 <Init_CanB>:



void Init_CanB()
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af02      	add	r7, sp, #8
	txHeader_B.Identifier = 0x7FF;
 80006de:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <Init_CanB+0xc0>)
 80006e0:	4a2e      	ldr	r2, [pc, #184]	; (800079c <Init_CanB+0xc4>)
 80006e2:	601a      	str	r2, [r3, #0]
	txHeader_B.IdType = FDCAN_STANDARD_ID;
 80006e4:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <Init_CanB+0xc0>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
	txHeader_B.TxFrameType = FDCAN_DATA_FRAME;
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <Init_CanB+0xc0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
	txHeader_B.DataLength = FDCAN_DLC_BYTES_8;
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <Init_CanB+0xc0>)
 80006f2:	2280      	movs	r2, #128	; 0x80
 80006f4:	0312      	lsls	r2, r2, #12
 80006f6:	60da      	str	r2, [r3, #12]
	txHeader_B.ErrorStateIndicator = FDCAN_ESI_PASSIVE;     //...
 80006f8:	4b27      	ldr	r3, [pc, #156]	; (8000798 <Init_CanB+0xc0>)
 80006fa:	2280      	movs	r2, #128	; 0x80
 80006fc:	0612      	lsls	r2, r2, #24
 80006fe:	611a      	str	r2, [r3, #16]
	txHeader_B.BitRateSwitch = FDCAN_BRS_OFF;               //...
 8000700:	4b25      	ldr	r3, [pc, #148]	; (8000798 <Init_CanB+0xc0>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
	txHeader_B.FDFormat = FDCAN_CLASSIC_CAN;                //...
 8000706:	4b24      	ldr	r3, [pc, #144]	; (8000798 <Init_CanB+0xc0>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
	txHeader_B.TxEventFifoControl = FDCAN_NO_TX_EVENTS;     //...
 800070c:	4b22      	ldr	r3, [pc, #136]	; (8000798 <Init_CanB+0xc0>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
	txHeader_B.MessageMarker = 0;
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <Init_CanB+0xc0>)
 8000714:	2200      	movs	r2, #0
 8000716:	621a      	str	r2, [r3, #32]

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan2, FDCAN_ACCEPT_IN_RX_FIFO1, FDCAN_ACCEPT_IN_RX_FIFO1, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8000718:	4821      	ldr	r0, [pc, #132]	; (80007a0 <Init_CanB+0xc8>)
 800071a:	2300      	movs	r3, #0
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	2300      	movs	r3, #0
 8000720:	2201      	movs	r2, #1
 8000722:	2101      	movs	r1, #1
 8000724:	f002 fee6 	bl	80034f4 <HAL_FDCAN_ConfigGlobalFilter>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d005      	beq.n	8000738 <Init_CanB+0x60>
	{
		dbgPrint("ERROR: HAL_FDCAN_ConfigGlobalFilter\n");
 800072c:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <Init_CanB+0xcc>)
 800072e:	0018      	movs	r0, r3
 8000730:	f000 fab6 	bl	8000ca0 <dbgPrint>
		Error_Handler();
 8000734:	f000 ffc0 	bl	80016b8 <Error_Handler>
	}

	if (HAL_FDCAN_Start(&hfdcan2) != HAL_OK)
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <Init_CanB+0xc8>)
 800073a:	0018      	movs	r0, r3
 800073c:	f002 ff0a 	bl	8003554 <HAL_FDCAN_Start>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d005      	beq.n	8000750 <Init_CanB+0x78>
	{
		dbgPrint("ERROR: hfdcan2, HAL_FDCAN_Start\n");
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <Init_CanB+0xd0>)
 8000746:	0018      	movs	r0, r3
 8000748:	f000 faaa 	bl	8000ca0 <dbgPrint>
		Error_Handler();
 800074c:	f000 ffb4 	bl	80016b8 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigInterruptLines(&hfdcan2, FDCAN_IT_GROUP_RX_FIFO1, FDCAN_INTERRUPT_LINE1) != HAL_OK)
 8000750:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <Init_CanB+0xc8>)
 8000752:	2202      	movs	r2, #2
 8000754:	2102      	movs	r1, #2
 8000756:	0018      	movs	r0, r3
 8000758:	f003 f84a 	bl	80037f0 <HAL_FDCAN_ConfigInterruptLines>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d005      	beq.n	800076c <Init_CanB+0x94>
	{
		dbgPrint("ERROR: hfdcan2, HAL_FDCAN_ConfigInterruptLines\n");
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <Init_CanB+0xd4>)
 8000762:	0018      	movs	r0, r3
 8000764:	f000 fa9c 	bl	8000ca0 <dbgPrint>
		Error_Handler();
 8000768:	f000 ffa6 	bl	80016b8 <Error_Handler>
	}

    // Enable interrupt, FIFO0,  FDCAN1, new data
    if (HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0) != HAL_OK)
 800076c:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <Init_CanB+0xc8>)
 800076e:	2200      	movs	r2, #0
 8000770:	2108      	movs	r1, #8
 8000772:	0018      	movs	r0, r3
 8000774:	f003 f873 	bl	800385e <HAL_FDCAN_ActivateNotification>
 8000778:	1e03      	subs	r3, r0, #0
 800077a:	d005      	beq.n	8000788 <Init_CanB+0xb0>
    {
      dbgPrint("ERROR: hfdcan2, HAL_FDCAN_ActivateNotification\n");
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <Init_CanB+0xd8>)
 800077e:	0018      	movs	r0, r3
 8000780:	f000 fa8e 	bl	8000ca0 <dbgPrint>
      Error_Handler();
 8000784:	f000 ff98 	bl	80016b8 <Error_Handler>
    }

    debugPrint("Init_CanB OK\n");
 8000788:	4b0a      	ldr	r3, [pc, #40]	; (80007b4 <Init_CanB+0xdc>)
 800078a:	0018      	movs	r0, r3
 800078c:	f000 fa88 	bl	8000ca0 <dbgPrint>

}
 8000790:	46c0      	nop			; (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	20000538 	.word	0x20000538
 800079c:	000007ff 	.word	0x000007ff
 80007a0:	2000038c 	.word	0x2000038c
 80007a4:	08007850 	.word	0x08007850
 80007a8:	08007878 	.word	0x08007878
 80007ac:	0800789c 	.word	0x0800789c
 80007b0:	080078cc 	.word	0x080078cc
 80007b4:	080078fc 	.word	0x080078fc

080007b8 <Init_CanC>:



void Init_CanC(MCP_BITTIME_SETUP mcp_speed)
{
 80007b8:	b5b0      	push	{r4, r5, r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	0002      	movs	r2, r0
 80007c0:	1dfb      	adds	r3, r7, #7
 80007c2:	701a      	strb	r2, [r3, #0]
	/****CanC***/
	// declaring  hardware related pointer func.
	cfgCanC.ChipSelectFp = &ChipSelectFpC;
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <Init_CanC+0x6c>)
 80007c6:	4a18      	ldr	r2, [pc, #96]	; (8000828 <Init_CanC+0x70>)
 80007c8:	615a      	str	r2, [r3, #20]
	cfgCanC.ChipUnSelectFp = &ChipUnSelectFpC;
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <Init_CanC+0x6c>)
 80007cc:	4a17      	ldr	r2, [pc, #92]	; (800082c <Init_CanC+0x74>)
 80007ce:	619a      	str	r2, [r3, #24]
	cfgCanC.SPIReadFp = &SPIReadFpC;
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <Init_CanC+0x6c>)
 80007d2:	4a17      	ldr	r2, [pc, #92]	; (8000830 <Init_CanC+0x78>)
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
	cfgCanC.SPIReadWriteFp = &SPIReadWriteFpC;
 80007d6:	4b13      	ldr	r3, [pc, #76]	; (8000824 <Init_CanC+0x6c>)
 80007d8:	4a16      	ldr	r2, [pc, #88]	; (8000834 <Init_CanC+0x7c>)
 80007da:	61da      	str	r2, [r3, #28]
	cfgCanC.SPIWriteFp = &SPIWriteFpC;
 80007dc:	4b11      	ldr	r3, [pc, #68]	; (8000824 <Init_CanC+0x6c>)
 80007de:	4a16      	ldr	r2, [pc, #88]	; (8000838 <Init_CanC+0x80>)
 80007e0:	621a      	str	r2, [r3, #32]

	// init
	ChipUnSelectFpC();
 80007e2:	f002 f8cd 	bl	8002980 <ChipUnSelectFpC>

	uint8_t result = begin(&cfgCanC, mcp_speed, MCP_8MHz);
 80007e6:	1dfb      	adds	r3, r7, #7
 80007e8:	7819      	ldrb	r1, [r3, #0]
 80007ea:	250f      	movs	r5, #15
 80007ec:	197c      	adds	r4, r7, r5
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <Init_CanC+0x6c>)
 80007f0:	2203      	movs	r2, #3
 80007f2:	0018      	movs	r0, r3
 80007f4:	f001 ff1e 	bl	8002634 <begin>
 80007f8:	0003      	movs	r3, r0
 80007fa:	7023      	strb	r3, [r4, #0]
	//can the CAN run
	if (result == CAN_OK) {
 80007fc:	197b      	adds	r3, r7, r5
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d104      	bne.n	800080e <Init_CanC+0x56>
		debugPrint("Init_CanC OK\n");
 8000804:	4b0d      	ldr	r3, [pc, #52]	; (800083c <Init_CanC+0x84>)
 8000806:	0018      	movs	r0, r3
 8000808:	f000 fa4a 	bl	8000ca0 <dbgPrint>
	else
	{
		Error_Handler();
		debugPrint("CAN_C_FAIL\n");
	}
}
 800080c:	e005      	b.n	800081a <Init_CanC+0x62>
		Error_Handler();
 800080e:	f000 ff53 	bl	80016b8 <Error_Handler>
		debugPrint("CAN_C_FAIL\n");
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <Init_CanC+0x88>)
 8000814:	0018      	movs	r0, r3
 8000816:	f000 fa43 	bl	8000ca0 <dbgPrint>
}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	b004      	add	sp, #16
 8000820:	bdb0      	pop	{r4, r5, r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	200000a0 	.word	0x200000a0
 8000828:	0800299d 	.word	0x0800299d
 800082c:	08002981 	.word	0x08002981
 8000830:	08002a01 	.word	0x08002a01
 8000834:	080029b9 	.word	0x080029b9
 8000838:	080029dd 	.word	0x080029dd
 800083c:	0800790c 	.word	0x0800790c
 8000840:	0800791c 	.word	0x0800791c

08000844 <Init_Basic_App>:


void Init_Basic_App()
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	// for MCP2515
	Init_CanA();
 8000848:	f7ff fefa 	bl	8000640 <Init_CanA>
	Init_CanB();
 800084c:	f7ff ff44 	bl	80006d8 <Init_CanB>
	Init_CanC(canC_Values.can_speed);
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <Init_Basic_App+0x34>)
 8000852:	785b      	ldrb	r3, [r3, #1]
 8000854:	0018      	movs	r0, r3
 8000856:	f7ff ffaf 	bl	80007b8 <Init_CanC>

	// for RingBuffer
	canMsgRingBufferInit(&routeOne.Route_Ring_Buf, routeOne.Can_Msg_Queue, MAX_BUFFER_DEPTH);
 800085a:	4908      	ldr	r1, [pc, #32]	; (800087c <Init_Basic_App+0x38>)
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <Init_Basic_App+0x3c>)
 800085e:	220a      	movs	r2, #10
 8000860:	0018      	movs	r0, r3
 8000862:	f000 f95a 	bl	8000b1a <canMsgRingBufferInit>
	canMsgRingBufferInit(&routeTwo.Route_Ring_Buf, routeTwo.Can_Msg_Queue, MAX_BUFFER_DEPTH);
 8000866:	4907      	ldr	r1, [pc, #28]	; (8000884 <Init_Basic_App+0x40>)
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <Init_Basic_App+0x44>)
 800086a:	220a      	movs	r2, #10
 800086c:	0018      	movs	r0, r3
 800086e:	f000 f954 	bl	8000b1a <canMsgRingBufferInit>
}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000000 	.word	0x20000000
 800087c:	200000d4 	.word	0x200000d4
 8000880:	200000cc 	.word	0x200000cc
 8000884:	20000204 	.word	0x20000204
 8000888:	200001fc 	.word	0x200001fc

0800088c <Compare_Is_Incoming_Message_Different_From_Previous_Message>:
//  Returns     : true: gelen mesaj son gönderilen mesajdan farklıdır
//				  false: gelen mesaj  gönderilen son mesaj ile aynıdır
//  Function    :
/*--------------------------------------------------------*/
_Bool Compare_Is_Incoming_Message_Different_From_Previous_Message(torkCanMsg newMsg, torkCanMsg oldMsg)
{
 800088c:	b084      	sub	sp, #16
 800088e:	b5b0      	push	{r4, r5, r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	2518      	movs	r5, #24
 8000896:	197c      	adds	r4, r7, r5
 8000898:	6020      	str	r0, [r4, #0]
 800089a:	6061      	str	r1, [r4, #4]
 800089c:	60a2      	str	r2, [r4, #8]
 800089e:	60e3      	str	r3, [r4, #12]
	_Bool areIdsDifferent = false;
 80008a0:	1dfb      	adds	r3, r7, #7
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
	_Bool areExtsDifferent = false;
 80008a6:	1dbb      	adds	r3, r7, #6
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]
	_Bool areRtrsDifferent = false;
 80008ac:	1d7b      	adds	r3, r7, #5
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
	_Bool areLensDifferent = false;
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2200      	movs	r2, #0
 80008b6:	701a      	strb	r2, [r3, #0]
	_Bool areData1Different = false;
 80008b8:	1cfb      	adds	r3, r7, #3
 80008ba:	2200      	movs	r2, #0
 80008bc:	701a      	strb	r2, [r3, #0]
	_Bool areData2Different = false;
 80008be:	1cbb      	adds	r3, r7, #2
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
	_Bool areData3Different = false;
 80008c4:	1c7b      	adds	r3, r7, #1
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
	_Bool areData4Different = false;
 80008ca:	003b      	movs	r3, r7
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]


	if((newMsg.Identifier != oldMsg.Identifier))
 80008d0:	197b      	adds	r3, r7, r5
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	2318      	movs	r3, #24
 80008d6:	195b      	adds	r3, r3, r5
 80008d8:	19db      	adds	r3, r3, r7
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d002      	beq.n	80008e6 <Compare_Is_Incoming_Message_Different_From_Previous_Message+0x5a>
	{
		areIdsDifferent = true;
 80008e0:	1dfb      	adds	r3, r7, #7
 80008e2:	2201      	movs	r2, #1
 80008e4:	701a      	strb	r2, [r3, #0]
	}

	if((newMsg.IdType != oldMsg.IdType))
 80008e6:	2118      	movs	r1, #24
 80008e8:	187b      	adds	r3, r7, r1
 80008ea:	685a      	ldr	r2, [r3, #4]
 80008ec:	2318      	movs	r3, #24
 80008ee:	185b      	adds	r3, r3, r1
 80008f0:	19db      	adds	r3, r3, r7
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d002      	beq.n	80008fe <Compare_Is_Incoming_Message_Different_From_Previous_Message+0x72>
	{
		areExtsDifferent = true;
 80008f8:	1dbb      	adds	r3, r7, #6
 80008fa:	2201      	movs	r2, #1
 80008fc:	701a      	strb	r2, [r3, #0]
	}

	if((newMsg.FrameType != oldMsg.FrameType))
 80008fe:	2118      	movs	r1, #24
 8000900:	187b      	adds	r3, r7, r1
 8000902:	689a      	ldr	r2, [r3, #8]
 8000904:	2318      	movs	r3, #24
 8000906:	185b      	adds	r3, r3, r1
 8000908:	19db      	adds	r3, r3, r7
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	429a      	cmp	r2, r3
 800090e:	d002      	beq.n	8000916 <Compare_Is_Incoming_Message_Different_From_Previous_Message+0x8a>
	{
		areRtrsDifferent = true;
 8000910:	1d7b      	adds	r3, r7, #5
 8000912:	2201      	movs	r2, #1
 8000914:	701a      	strb	r2, [r3, #0]
	}

	if((newMsg.DataLength != oldMsg.DataLength))
 8000916:	2118      	movs	r1, #24
 8000918:	187b      	adds	r3, r7, r1
 800091a:	68da      	ldr	r2, [r3, #12]
 800091c:	2318      	movs	r3, #24
 800091e:	185b      	adds	r3, r3, r1
 8000920:	19db      	adds	r3, r3, r7
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	429a      	cmp	r2, r3
 8000926:	d002      	beq.n	800092e <Compare_Is_Incoming_Message_Different_From_Previous_Message+0xa2>
	{
		areLensDifferent = true;
 8000928:	1d3b      	adds	r3, r7, #4
 800092a:	2201      	movs	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]
	}


	if(newMsg.Payload[CAN_MSG_DATA_SENDER_ADDR_INDEX] != oldMsg.Payload[CAN_MSG_DATA_SENDER_ADDR_INDEX])
 800092e:	2118      	movs	r1, #24
 8000930:	187b      	adds	r3, r7, r1
 8000932:	7c1a      	ldrb	r2, [r3, #16]
 8000934:	2318      	movs	r3, #24
 8000936:	185b      	adds	r3, r3, r1
 8000938:	19db      	adds	r3, r3, r7
 800093a:	7c1b      	ldrb	r3, [r3, #16]
 800093c:	429a      	cmp	r2, r3
 800093e:	d002      	beq.n	8000946 <Compare_Is_Incoming_Message_Different_From_Previous_Message+0xba>
	{
		areData1Different = true;
 8000940:	1cfb      	adds	r3, r7, #3
 8000942:	2201      	movs	r2, #1
 8000944:	701a      	strb	r2, [r3, #0]
	}

	if(newMsg.Payload[CAN_MSG_DATA_TIMESTAMP_INDEX] != oldMsg.Payload[CAN_MSG_DATA_TIMESTAMP_INDEX])
 8000946:	2118      	movs	r1, #24
 8000948:	187b      	adds	r3, r7, r1
 800094a:	7c9a      	ldrb	r2, [r3, #18]
 800094c:	2318      	movs	r3, #24
 800094e:	185b      	adds	r3, r3, r1
 8000950:	19db      	adds	r3, r3, r7
 8000952:	7c9b      	ldrb	r3, [r3, #18]
 8000954:	429a      	cmp	r2, r3
 8000956:	d002      	beq.n	800095e <Compare_Is_Incoming_Message_Different_From_Previous_Message+0xd2>
	{

		areData2Different = true;
 8000958:	1cbb      	adds	r3, r7, #2
 800095a:	2201      	movs	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
	}

	if(newMsg.Payload[CAN_MSG_DATA_PAYLOAD_0_INDEX] != oldMsg.Payload[CAN_MSG_DATA_PAYLOAD_0_INDEX])
 800095e:	2118      	movs	r1, #24
 8000960:	187b      	adds	r3, r7, r1
 8000962:	7cda      	ldrb	r2, [r3, #19]
 8000964:	2318      	movs	r3, #24
 8000966:	185b      	adds	r3, r3, r1
 8000968:	19db      	adds	r3, r3, r7
 800096a:	7cdb      	ldrb	r3, [r3, #19]
 800096c:	429a      	cmp	r2, r3
 800096e:	d002      	beq.n	8000976 <Compare_Is_Incoming_Message_Different_From_Previous_Message+0xea>
	{
		areData3Different = true;
 8000970:	1c7b      	adds	r3, r7, #1
 8000972:	2201      	movs	r2, #1
 8000974:	701a      	strb	r2, [r3, #0]
	}

	if(newMsg.Payload[CAN_MSG_DATA_PAYLOAD_1_INDEX] != oldMsg.Payload[CAN_MSG_DATA_PAYLOAD_1_INDEX])
 8000976:	2118      	movs	r1, #24
 8000978:	187b      	adds	r3, r7, r1
 800097a:	7d1a      	ldrb	r2, [r3, #20]
 800097c:	2318      	movs	r3, #24
 800097e:	185b      	adds	r3, r3, r1
 8000980:	19db      	adds	r3, r3, r7
 8000982:	7d1b      	ldrb	r3, [r3, #20]
 8000984:	429a      	cmp	r2, r3
 8000986:	d002      	beq.n	800098e <Compare_Is_Incoming_Message_Different_From_Previous_Message+0x102>
	{
		areData4Different = true;
 8000988:	003b      	movs	r3, r7
 800098a:	2201      	movs	r2, #1
 800098c:	701a      	strb	r2, [r3, #0]
	}


	if(areIdsDifferent || areExtsDifferent || areRtrsDifferent || areLensDifferent || areData1Different || areData2Different || areData3Different || areData4Different)
 800098e:	1dfb      	adds	r3, r7, #7
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d11b      	bne.n	80009ce <Compare_Is_Incoming_Message_Different_From_Previous_Message+0x142>
 8000996:	1dbb      	adds	r3, r7, #6
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d117      	bne.n	80009ce <Compare_Is_Incoming_Message_Different_From_Previous_Message+0x142>
 800099e:	1d7b      	adds	r3, r7, #5
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d113      	bne.n	80009ce <Compare_Is_Incoming_Message_Different_From_Previous_Message+0x142>
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d10f      	bne.n	80009ce <Compare_Is_Incoming_Message_Different_From_Previous_Message+0x142>
 80009ae:	1cfb      	adds	r3, r7, #3
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d10b      	bne.n	80009ce <Compare_Is_Incoming_Message_Different_From_Previous_Message+0x142>
 80009b6:	1cbb      	adds	r3, r7, #2
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d107      	bne.n	80009ce <Compare_Is_Incoming_Message_Different_From_Previous_Message+0x142>
 80009be:	1c7b      	adds	r3, r7, #1
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d103      	bne.n	80009ce <Compare_Is_Incoming_Message_Different_From_Previous_Message+0x142>
 80009c6:	003b      	movs	r3, r7
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <Compare_Is_Incoming_Message_Different_From_Previous_Message+0x146>
	{
		return true;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e000      	b.n	80009d4 <Compare_Is_Incoming_Message_Different_From_Previous_Message+0x148>
	}
	else
	{
		return false;
 80009d2:	2300      	movs	r3, #0
	}
}
 80009d4:	0018      	movs	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b002      	add	sp, #8
 80009da:	bcb0      	pop	{r4, r5, r7}
 80009dc:	bc08      	pop	{r3}
 80009de:	b004      	add	sp, #16
 80009e0:	4718      	bx	r3
	...

080009e4 <Convert_Can_Length_For_StmLib>:



uint32_t Convert_Can_Length_For_StmLib(uint8_t canLength)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	0002      	movs	r2, r0
 80009ec:	1dfb      	adds	r3, r7, #7
 80009ee:	701a      	strb	r2, [r3, #0]
	switch (canLength)
 80009f0:	1dfb      	adds	r3, r7, #7
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b08      	cmp	r3, #8
 80009f6:	d81e      	bhi.n	8000a36 <Convert_Can_Length_For_StmLib+0x52>
 80009f8:	009a      	lsls	r2, r3, #2
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <Convert_Can_Length_For_StmLib+0x5c>)
 80009fc:	18d3      	adds	r3, r2, r3
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	469f      	mov	pc, r3
	{
		case 0:
			return FDCAN_DLC_BYTES_0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	e018      	b.n	8000a38 <Convert_Can_Length_For_StmLib+0x54>

		case 1:
			return FDCAN_DLC_BYTES_1;
 8000a06:	2380      	movs	r3, #128	; 0x80
 8000a08:	025b      	lsls	r3, r3, #9
 8000a0a:	e015      	b.n	8000a38 <Convert_Can_Length_For_StmLib+0x54>

		case 2:
			return FDCAN_DLC_BYTES_2;
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	029b      	lsls	r3, r3, #10
 8000a10:	e012      	b.n	8000a38 <Convert_Can_Length_For_StmLib+0x54>

		case 3:
			return FDCAN_DLC_BYTES_3;
 8000a12:	23c0      	movs	r3, #192	; 0xc0
 8000a14:	029b      	lsls	r3, r3, #10
 8000a16:	e00f      	b.n	8000a38 <Convert_Can_Length_For_StmLib+0x54>

		case 4:
			return FDCAN_DLC_BYTES_4;
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	02db      	lsls	r3, r3, #11
 8000a1c:	e00c      	b.n	8000a38 <Convert_Can_Length_For_StmLib+0x54>

		case 5:
			return FDCAN_DLC_BYTES_5;
 8000a1e:	23a0      	movs	r3, #160	; 0xa0
 8000a20:	02db      	lsls	r3, r3, #11
 8000a22:	e009      	b.n	8000a38 <Convert_Can_Length_For_StmLib+0x54>

		case 6:
			return FDCAN_DLC_BYTES_6;
 8000a24:	23c0      	movs	r3, #192	; 0xc0
 8000a26:	02db      	lsls	r3, r3, #11
 8000a28:	e006      	b.n	8000a38 <Convert_Can_Length_For_StmLib+0x54>

		case 7:
			return FDCAN_DLC_BYTES_7;
 8000a2a:	23e0      	movs	r3, #224	; 0xe0
 8000a2c:	02db      	lsls	r3, r3, #11
 8000a2e:	e003      	b.n	8000a38 <Convert_Can_Length_For_StmLib+0x54>

		case 8:
			return FDCAN_DLC_BYTES_8;
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	031b      	lsls	r3, r3, #12
 8000a34:	e000      	b.n	8000a38 <Convert_Can_Length_For_StmLib+0x54>

		default:
			return FDCAN_DLC_BYTES_0;
 8000a36:	2300      	movs	r3, #0
	}
}
 8000a38:	0018      	movs	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b002      	add	sp, #8
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	080079b4 	.word	0x080079b4

08000a44 <Convert_Can_Length_For_McpLib>:


uint8_t  Convert_Can_Length_For_McpLib(uint32_t canLength)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	switch (canLength)
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	2380      	movs	r3, #128	; 0x80
 8000a50:	031b      	lsls	r3, r3, #12
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d100      	bne.n	8000a58 <Convert_Can_Length_For_McpLib+0x14>
 8000a56:	e059      	b.n	8000b0c <Convert_Can_Length_For_McpLib+0xc8>
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	031b      	lsls	r3, r3, #12
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d856      	bhi.n	8000b10 <Convert_Can_Length_For_McpLib+0xcc>
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	23e0      	movs	r3, #224	; 0xe0
 8000a66:	02db      	lsls	r3, r3, #11
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d04d      	beq.n	8000b08 <Convert_Can_Length_For_McpLib+0xc4>
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	23e0      	movs	r3, #224	; 0xe0
 8000a70:	02db      	lsls	r3, r3, #11
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d84c      	bhi.n	8000b10 <Convert_Can_Length_For_McpLib+0xcc>
 8000a76:	687a      	ldr	r2, [r7, #4]
 8000a78:	23c0      	movs	r3, #192	; 0xc0
 8000a7a:	02db      	lsls	r3, r3, #11
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d041      	beq.n	8000b04 <Convert_Can_Length_For_McpLib+0xc0>
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	23c0      	movs	r3, #192	; 0xc0
 8000a84:	02db      	lsls	r3, r3, #11
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d842      	bhi.n	8000b10 <Convert_Can_Length_For_McpLib+0xcc>
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	23a0      	movs	r3, #160	; 0xa0
 8000a8e:	02db      	lsls	r3, r3, #11
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d035      	beq.n	8000b00 <Convert_Can_Length_For_McpLib+0xbc>
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	23a0      	movs	r3, #160	; 0xa0
 8000a98:	02db      	lsls	r3, r3, #11
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d838      	bhi.n	8000b10 <Convert_Can_Length_For_McpLib+0xcc>
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	02db      	lsls	r3, r3, #11
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d029      	beq.n	8000afc <Convert_Can_Length_For_McpLib+0xb8>
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	2380      	movs	r3, #128	; 0x80
 8000aac:	02db      	lsls	r3, r3, #11
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	d82e      	bhi.n	8000b10 <Convert_Can_Length_For_McpLib+0xcc>
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	23c0      	movs	r3, #192	; 0xc0
 8000ab6:	029b      	lsls	r3, r3, #10
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d01d      	beq.n	8000af8 <Convert_Can_Length_For_McpLib+0xb4>
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	23c0      	movs	r3, #192	; 0xc0
 8000ac0:	029b      	lsls	r3, r3, #10
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d824      	bhi.n	8000b10 <Convert_Can_Length_For_McpLib+0xcc>
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	2380      	movs	r3, #128	; 0x80
 8000aca:	029b      	lsls	r3, r3, #10
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d011      	beq.n	8000af4 <Convert_Can_Length_For_McpLib+0xb0>
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	2380      	movs	r3, #128	; 0x80
 8000ad4:	029b      	lsls	r3, r3, #10
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d81a      	bhi.n	8000b10 <Convert_Can_Length_For_McpLib+0xcc>
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d005      	beq.n	8000aec <Convert_Can_Length_For_McpLib+0xa8>
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	2380      	movs	r3, #128	; 0x80
 8000ae4:	025b      	lsls	r3, r3, #9
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d002      	beq.n	8000af0 <Convert_Can_Length_For_McpLib+0xac>
 8000aea:	e011      	b.n	8000b10 <Convert_Can_Length_For_McpLib+0xcc>
	{
	case FDCAN_DLC_BYTES_0:
		return 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	e010      	b.n	8000b12 <Convert_Can_Length_For_McpLib+0xce>

	case FDCAN_DLC_BYTES_1:
		return 1;
 8000af0:	2301      	movs	r3, #1
 8000af2:	e00e      	b.n	8000b12 <Convert_Can_Length_For_McpLib+0xce>

	case FDCAN_DLC_BYTES_2:
		return 2;
 8000af4:	2302      	movs	r3, #2
 8000af6:	e00c      	b.n	8000b12 <Convert_Can_Length_For_McpLib+0xce>

	case FDCAN_DLC_BYTES_3:
		return 3;
 8000af8:	2303      	movs	r3, #3
 8000afa:	e00a      	b.n	8000b12 <Convert_Can_Length_For_McpLib+0xce>

	case FDCAN_DLC_BYTES_4:
		return 4;
 8000afc:	2304      	movs	r3, #4
 8000afe:	e008      	b.n	8000b12 <Convert_Can_Length_For_McpLib+0xce>

	case FDCAN_DLC_BYTES_5:
		return 5;
 8000b00:	2305      	movs	r3, #5
 8000b02:	e006      	b.n	8000b12 <Convert_Can_Length_For_McpLib+0xce>

	case FDCAN_DLC_BYTES_6:
		return 6;
 8000b04:	2306      	movs	r3, #6
 8000b06:	e004      	b.n	8000b12 <Convert_Can_Length_For_McpLib+0xce>

	case FDCAN_DLC_BYTES_7:
		return 7;
 8000b08:	2307      	movs	r3, #7
 8000b0a:	e002      	b.n	8000b12 <Convert_Can_Length_For_McpLib+0xce>

	case FDCAN_DLC_BYTES_8:
		return 8;
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	e000      	b.n	8000b12 <Convert_Can_Length_For_McpLib+0xce>

	default:
		return 0;
 8000b10:	2300      	movs	r3, #0
	}
}
 8000b12:	0018      	movs	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b002      	add	sp, #8
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <canMsgRingBufferInit>:
/*  Returns     :                                         */
/*  Scope       :                                         */
/*  Function    :                                         */
/*--------------------------------------------------------*/
void canMsgRingBufferInit(torkCanMsgRingBuf_t *rngBuf,torkCanMsg* msg,uint8_t len)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b084      	sub	sp, #16
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	701a      	strb	r2, [r3, #0]
   rngBuf->head   = 0;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	711a      	strb	r2, [r3, #4]
   rngBuf->tail   = 0;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	2200      	movs	r2, #0
 8000b32:	715a      	strb	r2, [r3, #5]
   rngBuf->maxLen = len;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	1dfa      	adds	r2, r7, #7
 8000b38:	7812      	ldrb	r2, [r2, #0]
 8000b3a:	719a      	strb	r2, [r3, #6]
   rngBuf->pMsg   = msg;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	601a      	str	r2, [r3, #0]
}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b004      	add	sp, #16
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <canMsgRingBufferPush>:
/*  Returns     :                                         */
/*  Scope       :                                         */
/*  Function    :                                         */
/*--------------------------------------------------------*/
int8_t canMsgRingBufferPush(torkCanMsgRingBuf_t *rngBuf,torkCanMsg  rxedMsg)
{
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	2004      	movs	r0, #4
 8000b56:	2418      	movs	r4, #24
 8000b58:	1900      	adds	r0, r0, r4
 8000b5a:	2408      	movs	r4, #8
 8000b5c:	46a4      	mov	ip, r4
 8000b5e:	44bc      	add	ip, r7
 8000b60:	4460      	add	r0, ip
 8000b62:	6001      	str	r1, [r0, #0]
 8000b64:	6042      	str	r2, [r0, #4]
 8000b66:	6083      	str	r3, [r0, #8]
  uint8_t next = rngBuf->head + 1;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	791a      	ldrb	r2, [r3, #4]
 8000b6c:	210f      	movs	r1, #15
 8000b6e:	187b      	adds	r3, r7, r1
 8000b70:	3201      	adds	r2, #1
 8000b72:	701a      	strb	r2, [r3, #0]

  if( next >= rngBuf->maxLen )
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	799b      	ldrb	r3, [r3, #6]
 8000b78:	187a      	adds	r2, r7, r1
 8000b7a:	7812      	ldrb	r2, [r2, #0]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d302      	bcc.n	8000b86 <canMsgRingBufferPush+0x3c>
  {
      next = 0;
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
  }

  if(next == rngBuf->tail) // check if circular buffer is full
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	795b      	ldrb	r3, [r3, #5]
 8000b8a:	220f      	movs	r2, #15
 8000b8c:	18ba      	adds	r2, r7, r2
 8000b8e:	7812      	ldrb	r2, [r2, #0]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d102      	bne.n	8000b9a <canMsgRingBufferPush+0x50>
  {
      return -1;       // and return with an error.
 8000b94:	2301      	movs	r3, #1
 8000b96:	425b      	negs	r3, r3
 8000b98:	e01a      	b.n	8000bd0 <canMsgRingBufferPush+0x86>
  }

  rngBuf->pMsg[rngBuf->head] = rxedMsg; // Load data and then move
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	791b      	ldrb	r3, [r3, #4]
 8000ba2:	0019      	movs	r1, r3
 8000ba4:	000b      	movs	r3, r1
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	185b      	adds	r3, r3, r1
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	18d1      	adds	r1, r2, r3
 8000bae:	2304      	movs	r3, #4
 8000bb0:	2218      	movs	r2, #24
 8000bb2:	189b      	adds	r3, r3, r2
 8000bb4:	2208      	movs	r2, #8
 8000bb6:	18ba      	adds	r2, r7, r2
 8000bb8:	189a      	adds	r2, r3, r2
 8000bba:	000b      	movs	r3, r1
 8000bbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000bbe:	c313      	stmia	r3!, {r0, r1, r4}
 8000bc0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000bc2:	c313      	stmia	r3!, {r0, r1, r4}
  rngBuf->head = next;            // head to next data offset.
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	220f      	movs	r2, #15
 8000bc8:	18ba      	adds	r2, r7, r2
 8000bca:	7812      	ldrb	r2, [r2, #0]
 8000bcc:	711a      	strb	r2, [r3, #4]
  return 0;  // return success to indicate successful push.
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b005      	add	sp, #20
 8000bd6:	bc90      	pop	{r4, r7}
 8000bd8:	bc08      	pop	{r3}
 8000bda:	b004      	add	sp, #16
 8000bdc:	4718      	bx	r3

08000bde <canMsgRingBufferPop>:
/*  Returns     :                                         */
/*  Scope       :                                         */
/*  Function    :                                         */
/*--------------------------------------------------------*/
int8_t canMsgRingBufferPop(torkCanMsgRingBuf_t *rngBuf,torkCanMsg*  pMsg)
{
 8000bde:	b590      	push	{r4, r7, lr}
 8000be0:	b085      	sub	sp, #20
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	6039      	str	r1, [r7, #0]
   uint8_t next;
    // if the head isn't ahead of the tail, we don't have any characters
    if(rngBuf->head == rngBuf->tail) // check if circular buffer is empty
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	791a      	ldrb	r2, [r3, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	795b      	ldrb	r3, [r3, #5]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d102      	bne.n	8000bfa <canMsgRingBufferPop+0x1c>
    {
        return -1;          // and return with an error
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	425b      	negs	r3, r3
 8000bf8:	e023      	b.n	8000c42 <canMsgRingBufferPop+0x64>
    }
    // next is where tail will point to after this read.
    next = rngBuf->tail + 1;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	795a      	ldrb	r2, [r3, #5]
 8000bfe:	210f      	movs	r1, #15
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	3201      	adds	r2, #1
 8000c04:	701a      	strb	r2, [r3, #0]

    if( next >= rngBuf->maxLen )
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	799b      	ldrb	r3, [r3, #6]
 8000c0a:	187a      	adds	r2, r7, r1
 8000c0c:	7812      	ldrb	r2, [r2, #0]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d302      	bcc.n	8000c18 <canMsgRingBufferPop+0x3a>
    {
        next = 0;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
    }

    *pMsg = rngBuf->pMsg[rngBuf->tail]; // Read data and then move
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	795b      	ldrb	r3, [r3, #5]
 8000c20:	0019      	movs	r1, r3
 8000c22:	000b      	movs	r3, r1
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	185b      	adds	r3, r3, r1
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	18d2      	adds	r2, r2, r3
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c30:	c313      	stmia	r3!, {r0, r1, r4}
 8000c32:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c34:	c313      	stmia	r3!, {r0, r1, r4}

    rngBuf->tail = next;             // tail to next data offset.
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	220f      	movs	r2, #15
 8000c3a:	18ba      	adds	r2, r7, r2
 8000c3c:	7812      	ldrb	r2, [r2, #0]
 8000c3e:	715a      	strb	r2, [r3, #5]

    return 0;  // return success to indicate successful push.
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	0018      	movs	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b005      	add	sp, #20
 8000c48:	bd90      	pop	{r4, r7, pc}
	...

08000c4c <dbgPrintf>:
#include "stdarg.h"

extern UART_HandleTypeDef huart1;

void dbgPrintf(char *fmt, ...)
{
 8000c4c:	b40f      	push	{r0, r1, r2, r3}
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b0c2      	sub	sp, #264	; 0x108
 8000c52:	af00      	add	r7, sp, #0
  char dbgBuf[256];
  va_list args;
  va_start(args, fmt);
 8000c54:	238a      	movs	r3, #138	; 0x8a
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	603b      	str	r3, [r7, #0]
  int rc = vsnprintf(dbgBuf, sizeof(dbgBuf), fmt, args);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	2288      	movs	r2, #136	; 0x88
 8000c60:	0052      	lsls	r2, r2, #1
 8000c62:	18ba      	adds	r2, r7, r2
 8000c64:	6812      	ldr	r2, [r2, #0]
 8000c66:	2180      	movs	r1, #128	; 0x80
 8000c68:	0049      	lsls	r1, r1, #1
 8000c6a:	1d38      	adds	r0, r7, #4
 8000c6c:	f006 f95c 	bl	8006f28 <vsniprintf>
 8000c70:	0003      	movs	r3, r0
 8000c72:	1d7a      	adds	r2, r7, #5
 8000c74:	32ff      	adds	r2, #255	; 0xff
 8000c76:	6013      	str	r3, [r2, #0]
  va_end(args);

  HAL_UART_Transmit(&huart1, dbgBuf, strlen(dbgBuf), 10);
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f7ff fa42 	bl	8000104 <strlen>
 8000c80:	0003      	movs	r3, r0
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	1d39      	adds	r1, r7, #4
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <dbgPrintf+0x50>)
 8000c88:	230a      	movs	r3, #10
 8000c8a:	f005 fa19 	bl	80060c0 <HAL_UART_Transmit>
}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b042      	add	sp, #264	; 0x108
 8000c94:	bc80      	pop	{r7}
 8000c96:	bc08      	pop	{r3}
 8000c98:	b004      	add	sp, #16
 8000c9a:	4718      	bx	r3
 8000c9c:	20000454 	.word	0x20000454

08000ca0 <dbgPrint>:

void dbgPrint(char *str)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, str, strlen(str), 10);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	0018      	movs	r0, r3
 8000cac:	f7ff fa2a 	bl	8000104 <strlen>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <dbgPrint+0x28>)
 8000cb8:	230a      	movs	r3, #10
 8000cba:	f005 fa01 	bl	80060c0 <HAL_UART_Transmit>
}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b002      	add	sp, #8
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	46c0      	nop			; (mov r8, r8)
 8000cc8:	20000454 	.word	0x20000454

08000ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cce:	b08b      	sub	sp, #44	; 0x2c
 8000cd0:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd2:	f002 f921 	bl	8002f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd6:	f000 f997 	bl	8001008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cda:	f000 fb09 	bl	80012f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000cde:	f000 fab9 	bl	8001254 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000ce2:	f000 fa79 	bl	80011d8 <MX_SPI1_Init>
  MX_FDCAN1_Init();
 8000ce6:	f000 f9e7 	bl	80010b8 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000cea:	f000 fa2d 	bl	8001148 <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */

  Init_Basic_App();
 8000cee:	f7ff fda9 	bl	8000844 <Init_Basic_App>

  tempCanMsg_B.FrameType           = FDCAN_DATA_FRAME;
 8000cf2:	4baf      	ldr	r3, [pc, #700]	; (8000fb0 <main+0x2e4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
		/**********************************************************************************/

		/**********************************************************************************/
		/*CAN C PORTUNA VERI GELDI MI                                                     */
		/**********************************************************************************/
		if (isCAN_C_RXed == 1)
 8000cf8:	4bae      	ldr	r3, [pc, #696]	; (8000fb4 <main+0x2e8>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d15a      	bne.n	8000db8 <main+0xec>
		{
			isCAN_C_RXed = 0;
 8000d02:	4bac      	ldr	r3, [pc, #688]	; (8000fb4 <main+0x2e8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_CAN_C_RX_GPIO_Port , LED_CAN_C_RX_Pin, GPIO_PIN_SET);
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	0219      	lsls	r1, r3, #8
 8000d0c:	23a0      	movs	r3, #160	; 0xa0
 8000d0e:	05db      	lsls	r3, r3, #23
 8000d10:	2201      	movs	r2, #1
 8000d12:	0018      	movs	r0, r3
 8000d14:	f003 fa7d 	bl	8004212 <HAL_GPIO_WritePin>

			while (CAN_MSGAVAIL == checkReceive(&cfgCanC))
 8000d18:	e047      	b.n	8000daa <main+0xde>
			{
				uint8_t length;
				result = readMsgBuf(&cfgCanC, &length, tempCanMsg_C.Payload);
 8000d1a:	4aa7      	ldr	r2, [pc, #668]	; (8000fb8 <main+0x2ec>)
 8000d1c:	1db9      	adds	r1, r7, #6
 8000d1e:	4ba7      	ldr	r3, [pc, #668]	; (8000fbc <main+0x2f0>)
 8000d20:	0018      	movs	r0, r3
 8000d22:	f001 fdb6 	bl	8002892 <readMsgBuf>
 8000d26:	0003      	movs	r3, r0
 8000d28:	001a      	movs	r2, r3
 8000d2a:	4ba5      	ldr	r3, [pc, #660]	; (8000fc0 <main+0x2f4>)
 8000d2c:	701a      	strb	r2, [r3, #0]
				if (result == CAN_OK)
 8000d2e:	4ba4      	ldr	r3, [pc, #656]	; (8000fc0 <main+0x2f4>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d135      	bne.n	8000da2 <main+0xd6>
				{
					tempCanMsg_C.DataLength    = Convert_Can_Length_For_StmLib(length);
 8000d36:	1dbb      	adds	r3, r7, #6
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f7ff fe52 	bl	80009e4 <Convert_Can_Length_For_StmLib>
 8000d40:	0002      	movs	r2, r0
 8000d42:	4ba0      	ldr	r3, [pc, #640]	; (8000fc4 <main+0x2f8>)
 8000d44:	60da      	str	r2, [r3, #12]
					tempCanMsg_C.Identifier    = cfgCanC.can_id;
 8000d46:	4b9d      	ldr	r3, [pc, #628]	; (8000fbc <main+0x2f0>)
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	4b9e      	ldr	r3, [pc, #632]	; (8000fc4 <main+0x2f8>)
 8000d4c:	601a      	str	r2, [r3, #0]
					cfgCanC.rtr    ?  (tempCanMsg_C.FrameType = FDCAN_REMOTE_FRAME) : (tempCanMsg_C.FrameType = FDCAN_DATA_FRAME);
 8000d4e:	4b9b      	ldr	r3, [pc, #620]	; (8000fbc <main+0x2f0>)
 8000d50:	7a1b      	ldrb	r3, [r3, #8]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d004      	beq.n	8000d60 <main+0x94>
 8000d56:	4b9b      	ldr	r3, [pc, #620]	; (8000fc4 <main+0x2f8>)
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	0592      	lsls	r2, r2, #22
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	e002      	b.n	8000d66 <main+0x9a>
 8000d60:	4b98      	ldr	r3, [pc, #608]	; (8000fc4 <main+0x2f8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
					cfgCanC.ext_flg ? (tempCanMsg_C.IdType = FDCAN_EXTENDED_ID)     : (tempCanMsg_C.IdType = FDCAN_STANDARD_ID);
 8000d66:	4b95      	ldr	r3, [pc, #596]	; (8000fbc <main+0x2f0>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d004      	beq.n	8000d78 <main+0xac>
 8000d6e:	4b95      	ldr	r3, [pc, #596]	; (8000fc4 <main+0x2f8>)
 8000d70:	2280      	movs	r2, #128	; 0x80
 8000d72:	05d2      	lsls	r2, r2, #23
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	e002      	b.n	8000d7e <main+0xb2>
 8000d78:	4b92      	ldr	r3, [pc, #584]	; (8000fc4 <main+0x2f8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	605a      	str	r2, [r3, #4]

					debugPrint("RX, ->canC  ->route1\n");
 8000d7e:	4b92      	ldr	r3, [pc, #584]	; (8000fc8 <main+0x2fc>)
 8000d80:	0018      	movs	r0, r3
 8000d82:	f7ff ff8d 	bl	8000ca0 <dbgPrint>
					canMsgRingBufferPush(&routeOne.Route_Ring_Buf, tempCanMsg_C);
 8000d86:	4b8f      	ldr	r3, [pc, #572]	; (8000fc4 <main+0x2f8>)
 8000d88:	4890      	ldr	r0, [pc, #576]	; (8000fcc <main+0x300>)
 8000d8a:	466a      	mov	r2, sp
 8000d8c:	0011      	movs	r1, r2
 8000d8e:	001a      	movs	r2, r3
 8000d90:	320c      	adds	r2, #12
 8000d92:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000d94:	c170      	stmia	r1!, {r4, r5, r6}
 8000d96:	6819      	ldr	r1, [r3, #0]
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	f7ff fed5 	bl	8000b4a <canMsgRingBufferPush>
 8000da0:	e003      	b.n	8000daa <main+0xde>

				}
				else
				{
					debugPrintf(failMsg);
 8000da2:	4b8b      	ldr	r3, [pc, #556]	; (8000fd0 <main+0x304>)
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff ff51 	bl	8000c4c <dbgPrintf>
			while (CAN_MSGAVAIL == checkReceive(&cfgCanC))
 8000daa:	4b84      	ldr	r3, [pc, #528]	; (8000fbc <main+0x2f0>)
 8000dac:	0018      	movs	r0, r3
 8000dae:	f001 fdce 	bl	800294e <checkReceive>
 8000db2:	0003      	movs	r3, r0
 8000db4:	2b03      	cmp	r3, #3
 8000db6:	d0b0      	beq.n	8000d1a <main+0x4e>

		/*****************************************************************************************************************************************/
		/*                                                       STAGE 2 DATA ISLEM    BASLA                                                     */
		/*****************************************************************************************************************************************/

		result_One = canMsgRingBufferPop(&routeOne.Route_Ring_Buf, &tempCanMsgTx);
 8000db8:	4a86      	ldr	r2, [pc, #536]	; (8000fd4 <main+0x308>)
 8000dba:	4b84      	ldr	r3, [pc, #528]	; (8000fcc <main+0x300>)
 8000dbc:	0011      	movs	r1, r2
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f7ff ff0d 	bl	8000bde <canMsgRingBufferPop>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	4b83      	ldr	r3, [pc, #524]	; (8000fd8 <main+0x30c>)
 8000dca:	701a      	strb	r2, [r3, #0]

		while (result_One == CAN_OK)
 8000dcc:	e06b      	b.n	8000ea6 <main+0x1da>
		{
			_Bool compResult = Compare_Is_Incoming_Message_Different_From_Previous_Message(tempCanMsgTx, routeOne.Last_Sent_Message);
 8000dce:	1dfc      	adds	r4, r7, #7
 8000dd0:	4b80      	ldr	r3, [pc, #512]	; (8000fd4 <main+0x308>)
 8000dd2:	4882      	ldr	r0, [pc, #520]	; (8000fdc <main+0x310>)
 8000dd4:	228c      	movs	r2, #140	; 0x8c
 8000dd6:	0052      	lsls	r2, r2, #1
 8000dd8:	2108      	movs	r1, #8
 8000dda:	4469      	add	r1, sp
 8000ddc:	1882      	adds	r2, r0, r2
 8000dde:	ca61      	ldmia	r2!, {r0, r5, r6}
 8000de0:	c161      	stmia	r1!, {r0, r5, r6}
 8000de2:	ca61      	ldmia	r2!, {r0, r5, r6}
 8000de4:	c161      	stmia	r1!, {r0, r5, r6}
 8000de6:	466a      	mov	r2, sp
 8000de8:	0011      	movs	r1, r2
 8000dea:	001a      	movs	r2, r3
 8000dec:	3210      	adds	r2, #16
 8000dee:	ca21      	ldmia	r2!, {r0, r5}
 8000df0:	c121      	stmia	r1!, {r0, r5}
 8000df2:	6818      	ldr	r0, [r3, #0]
 8000df4:	6859      	ldr	r1, [r3, #4]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	f7ff fd47 	bl	800088c <Compare_Is_Incoming_Message_Different_From_Previous_Message>
 8000dfe:	0003      	movs	r3, r0
 8000e00:	7023      	strb	r3, [r4, #0]
			routeOne.Last_Sent_Message = tempCanMsgTx;
 8000e02:	4a76      	ldr	r2, [pc, #472]	; (8000fdc <main+0x310>)
 8000e04:	238c      	movs	r3, #140	; 0x8c
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	4972      	ldr	r1, [pc, #456]	; (8000fd4 <main+0x308>)
 8000e0a:	18d3      	adds	r3, r2, r3
 8000e0c:	000a      	movs	r2, r1
 8000e0e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000e10:	c313      	stmia	r3!, {r0, r1, r4}
 8000e12:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000e14:	c313      	stmia	r3!, {r0, r1, r4}

//			_Bool compResult = Compare_Is_Incoming_Message_Different_From_Previous_Two_Message(canMsgTx, routeOne.Penultimate_Sent_Message, routeOne.Last_Sent_Message);
//			routeOne.Penultimate_Sent_Message = routeOne.Last_Sent_Message;
//			routeOne.Last_Sent_Message = canMsgTx;

			if (compResult)
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d02a      	beq.n	8000e74 <main+0x1a8>
			{
				debugPrint("TX, route1-> canB->\n");
 8000e1e:	4b70      	ldr	r3, [pc, #448]	; (8000fe0 <main+0x314>)
 8000e20:	0018      	movs	r0, r3
 8000e22:	f7ff ff3d 	bl	8000ca0 <dbgPrint>


				txHeader_B.TxFrameType  = tempCanMsgTx.FrameType;
 8000e26:	4b6b      	ldr	r3, [pc, #428]	; (8000fd4 <main+0x308>)
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	4b6e      	ldr	r3, [pc, #440]	; (8000fe4 <main+0x318>)
 8000e2c:	609a      	str	r2, [r3, #8]
				txHeader_B.DataLength   = tempCanMsgTx.DataLength;
 8000e2e:	4b69      	ldr	r3, [pc, #420]	; (8000fd4 <main+0x308>)
 8000e30:	68da      	ldr	r2, [r3, #12]
 8000e32:	4b6c      	ldr	r3, [pc, #432]	; (8000fe4 <main+0x318>)
 8000e34:	60da      	str	r2, [r3, #12]


				if(tempCanMsgTx.IdType == FDCAN_STANDARD_ID)
 8000e36:	4b67      	ldr	r3, [pc, #412]	; (8000fd4 <main+0x308>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10c      	bne.n	8000e58 <main+0x18c>
				{
					txHeader_B.IdType     = FDCAN_EXTENDED_ID;
 8000e3e:	4b69      	ldr	r3, [pc, #420]	; (8000fe4 <main+0x318>)
 8000e40:	2280      	movs	r2, #128	; 0x80
 8000e42:	05d2      	lsls	r2, r2, #23
 8000e44:	605a      	str	r2, [r3, #4]
					txHeader_B.Identifier = ((tempCanMsgTx.Identifier << 18) + tempCanMsgTx.Payload[0]);          // Shift the 11-bit identifier to the left by 18 bits to make it a 29-bit identifier
 8000e46:	4b63      	ldr	r3, [pc, #396]	; (8000fd4 <main+0x308>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	049b      	lsls	r3, r3, #18
 8000e4c:	4a61      	ldr	r2, [pc, #388]	; (8000fd4 <main+0x308>)
 8000e4e:	7c12      	ldrb	r2, [r2, #16]
 8000e50:	189a      	adds	r2, r3, r2
 8000e52:	4b64      	ldr	r3, [pc, #400]	; (8000fe4 <main+0x318>)
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	e007      	b.n	8000e68 <main+0x19c>
				}
				else
				{
					txHeader_B.IdType     = FDCAN_EXTENDED_ID;
 8000e58:	4b62      	ldr	r3, [pc, #392]	; (8000fe4 <main+0x318>)
 8000e5a:	2280      	movs	r2, #128	; 0x80
 8000e5c:	05d2      	lsls	r2, r2, #23
 8000e5e:	605a      	str	r2, [r3, #4]
					txHeader_B.Identifier = tempCanMsgTx.Identifier;
 8000e60:	4b5c      	ldr	r3, [pc, #368]	; (8000fd4 <main+0x308>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b5f      	ldr	r3, [pc, #380]	; (8000fe4 <main+0x318>)
 8000e66:	601a      	str	r2, [r3, #0]
				}

				HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &txHeader_B, tempCanMsgTx.Payload);  //canB den gönder
 8000e68:	4a5f      	ldr	r2, [pc, #380]	; (8000fe8 <main+0x31c>)
 8000e6a:	495e      	ldr	r1, [pc, #376]	; (8000fe4 <main+0x318>)
 8000e6c:	4b5f      	ldr	r3, [pc, #380]	; (8000fec <main+0x320>)
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f002 fb96 	bl	80035a0 <HAL_FDCAN_AddMessageToTxFifoQ>

			}

			result_One = canMsgRingBufferPop(&routeOne.Route_Ring_Buf, &tempCanMsgTx);
 8000e74:	4a57      	ldr	r2, [pc, #348]	; (8000fd4 <main+0x308>)
 8000e76:	4b55      	ldr	r3, [pc, #340]	; (8000fcc <main+0x300>)
 8000e78:	0011      	movs	r1, r2
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f7ff feaf 	bl	8000bde <canMsgRingBufferPop>
 8000e80:	0003      	movs	r3, r0
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	4b54      	ldr	r3, [pc, #336]	; (8000fd8 <main+0x30c>)
 8000e86:	701a      	strb	r2, [r3, #0]
			//ledler
//			HAL_GPIO_WritePin(LED_CAN_B_TX_GPIO_Port, LED_CAN_B_TX_Pin, GPIO_PIN_SET);//... tx leder? nasıl söncek?
			HAL_GPIO_WritePin(LED_CAN_A_RX_GPIO_Port, LED_CAN_A_RX_Pin, GPIO_PIN_SET);
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	019b      	lsls	r3, r3, #6
 8000e8c:	4858      	ldr	r0, [pc, #352]	; (8000ff0 <main+0x324>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	0019      	movs	r1, r3
 8000e92:	f003 f9be 	bl	8004212 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_CAN_C_RX_GPIO_Port, LED_CAN_C_RX_Pin, GPIO_PIN_SET);
 8000e96:	2380      	movs	r3, #128	; 0x80
 8000e98:	0219      	lsls	r1, r3, #8
 8000e9a:	23a0      	movs	r3, #160	; 0xa0
 8000e9c:	05db      	lsls	r3, r3, #23
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f003 f9b6 	bl	8004212 <HAL_GPIO_WritePin>
		while (result_One == CAN_OK)
 8000ea6:	4b4c      	ldr	r3, [pc, #304]	; (8000fd8 <main+0x30c>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d08f      	beq.n	8000dce <main+0x102>


		/*****************************************************************************************************************************************/
				/*ROUTE 2 RINGBUFF VE PORT YONLENDIRME*/
		/*****************************************************************************************************************************************/
				result_Two = canMsgRingBufferPop(&routeTwo.Route_Ring_Buf, &tempCanMsgTx);
 8000eae:	4a49      	ldr	r2, [pc, #292]	; (8000fd4 <main+0x308>)
 8000eb0:	4b50      	ldr	r3, [pc, #320]	; (8000ff4 <main+0x328>)
 8000eb2:	0011      	movs	r1, r2
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f7ff fe92 	bl	8000bde <canMsgRingBufferPop>
 8000eba:	0003      	movs	r3, r0
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b4e      	ldr	r3, [pc, #312]	; (8000ff8 <main+0x32c>)
 8000ec0:	701a      	strb	r2, [r3, #0]

				while (result_Two == CAN_OK)
 8000ec2:	e06c      	b.n	8000f9e <main+0x2d2>
				{
					debugPrint("TX, route2-> canA & canC->\n");
 8000ec4:	4b4d      	ldr	r3, [pc, #308]	; (8000ffc <main+0x330>)
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f7ff feea 	bl	8000ca0 <dbgPrint>

						//CanA icin
					if(tempCanMsgTx.IdType == FDCAN_EXTENDED_ID)
 8000ecc:	4b41      	ldr	r3, [pc, #260]	; (8000fd4 <main+0x308>)
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	05db      	lsls	r3, r3, #23
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d108      	bne.n	8000eea <main+0x21e>
					{
						txHeader_A.IdType = FDCAN_STANDARD_ID;
 8000ed8:	4b49      	ldr	r3, [pc, #292]	; (8001000 <main+0x334>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	605a      	str	r2, [r3, #4]
						txHeader_A.Identifier = tempCanMsgTx.Identifier >> 18;  //? başka bir şey
 8000ede:	4b3d      	ldr	r3, [pc, #244]	; (8000fd4 <main+0x308>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	0c9a      	lsrs	r2, r3, #18
 8000ee4:	4b46      	ldr	r3, [pc, #280]	; (8001000 <main+0x334>)
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	e006      	b.n	8000ef8 <main+0x22c>
					}
					else
					{
						txHeader_A.IdType = FDCAN_STANDARD_ID;
 8000eea:	4b45      	ldr	r3, [pc, #276]	; (8001000 <main+0x334>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	605a      	str	r2, [r3, #4]
						txHeader_A.Identifier  = tempCanMsgTx.Identifier;
 8000ef0:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <main+0x308>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b42      	ldr	r3, [pc, #264]	; (8001000 <main+0x334>)
 8000ef6:	601a      	str	r2, [r3, #0]
					}

					//txHeader_A.TxFrameType = tempCanMsgTx.FrameType;    //gerek yok canA init de atandı zaten, mainScp remote frame de sapıttığı icin hep data frame gönderilir
					txHeader_A.DataLength  = tempCanMsgTx.DataLength;
 8000ef8:	4b36      	ldr	r3, [pc, #216]	; (8000fd4 <main+0x308>)
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	4b40      	ldr	r3, [pc, #256]	; (8001000 <main+0x334>)
 8000efe:	60da      	str	r2, [r3, #12]

					HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader_A, tempCanMsgTx.Payload);  //canB den gönder
 8000f00:	4a39      	ldr	r2, [pc, #228]	; (8000fe8 <main+0x31c>)
 8000f02:	493f      	ldr	r1, [pc, #252]	; (8001000 <main+0x334>)
 8000f04:	4b3f      	ldr	r3, [pc, #252]	; (8001004 <main+0x338>)
 8000f06:	0018      	movs	r0, r3
 8000f08:	f002 fb4a 	bl	80035a0 <HAL_FDCAN_AddMessageToTxFifoQ>


						//Canc icin
					if(tempCanMsgTx.IdType == FDCAN_EXTENDED_ID)
 8000f0c:	4b31      	ldr	r3, [pc, #196]	; (8000fd4 <main+0x308>)
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	05db      	lsls	r3, r3, #23
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d108      	bne.n	8000f2a <main+0x25e>
					{
						tempCanMsgTx.IdType = 0;
 8000f18:	4b2e      	ldr	r3, [pc, #184]	; (8000fd4 <main+0x308>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	605a      	str	r2, [r3, #4]
						tempCanMsgTx.Identifier = tempCanMsgTx.Identifier >> 18;  //? başka bir şey
 8000f1e:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <main+0x308>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	0c9a      	lsrs	r2, r3, #18
 8000f24:	4b2b      	ldr	r3, [pc, #172]	; (8000fd4 <main+0x308>)
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	e002      	b.n	8000f30 <main+0x264>
					}
					else
					{
						tempCanMsgTx.IdType = 0;
 8000f2a:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <main+0x308>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	605a      	str	r2, [r3, #4]
					}

					//tempCanMsgTx.FrameType   = 0;   //gerek yok canB rx callback de atandı zaten, mainScp remote frame de sapıttığı icin hep data frame gönderilir

					sendMsgBuffer(&cfgCanC, tempCanMsgTx.Identifier, (uint8_t)tempCanMsgTx.IdType, (uint8_t)tempCanMsgTx.FrameType, Convert_Can_Length_For_McpLib(tempCanMsgTx.DataLength), tempCanMsgTx.Payload);
 8000f30:	4b28      	ldr	r3, [pc, #160]	; (8000fd4 <main+0x308>)
 8000f32:	681c      	ldr	r4, [r3, #0]
 8000f34:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <main+0x308>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	b2dd      	uxtb	r5, r3
 8000f3a:	4b26      	ldr	r3, [pc, #152]	; (8000fd4 <main+0x308>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	b2de      	uxtb	r6, r3
 8000f40:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <main+0x308>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	0018      	movs	r0, r3
 8000f46:	f7ff fd7d 	bl	8000a44 <Convert_Can_Length_For_McpLib>
 8000f4a:	0003      	movs	r3, r0
 8000f4c:	001a      	movs	r2, r3
 8000f4e:	481b      	ldr	r0, [pc, #108]	; (8000fbc <main+0x2f0>)
 8000f50:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <main+0x31c>)
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	9200      	str	r2, [sp, #0]
 8000f56:	0033      	movs	r3, r6
 8000f58:	002a      	movs	r2, r5
 8000f5a:	0021      	movs	r1, r4
 8000f5c:	f001 fb86 	bl	800266c <sendMsgBuffer>

				   // memset(tempCanMsgTx.Payload, 0, MAX_CAN_MSG_DATA_COUNT);  //payload sıfırla
					result_Two = canMsgRingBufferPop(&routeTwo.Route_Ring_Buf, &tempCanMsgTx);
 8000f60:	4a1c      	ldr	r2, [pc, #112]	; (8000fd4 <main+0x308>)
 8000f62:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <main+0x328>)
 8000f64:	0011      	movs	r1, r2
 8000f66:	0018      	movs	r0, r3
 8000f68:	f7ff fe39 	bl	8000bde <canMsgRingBufferPop>
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <main+0x32c>)
 8000f72:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(LED_CAN_B_RX_GPIO_Port, LED_CAN_B_RX_Pin, GPIO_PIN_RESET);
 8000f74:	23a0      	movs	r3, #160	; 0xa0
 8000f76:	05db      	lsls	r3, r3, #23
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2180      	movs	r1, #128	; 0x80
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f003 f948 	bl	8004212 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_CAN_A_TX_GPIO_Port, LED_CAN_A_TX_Pin, GPIO_PIN_SET);   //... söndürmeyi düşün
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	481a      	ldr	r0, [pc, #104]	; (8000ff0 <main+0x324>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	0019      	movs	r1, r3
 8000f8c:	f003 f941 	bl	8004212 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_CAN_A_TX_GPIO_Port, LED_CAN_A_TX_Pin, GPIO_PIN_SET);  //...
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	021b      	lsls	r3, r3, #8
 8000f94:	4816      	ldr	r0, [pc, #88]	; (8000ff0 <main+0x324>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	0019      	movs	r1, r3
 8000f9a:	f003 f93a 	bl	8004212 <HAL_GPIO_WritePin>
				while (result_Two == CAN_OK)
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <main+0x32c>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d08e      	beq.n	8000ec4 <main+0x1f8>
    /* USER CODE BEGIN 3 */
	  /*****************************************************************************************************************************************/
		  	  	  	  	  	  	  	  	  	  	  /*BUTON CHECK VE BLINK*/
	  /*****************************************************************************************************************************************/

		  isPressedBtn();
 8000fa6:	f000 faab 	bl	8001500 <isPressedBtn>
		  heartBeat();
 8000faa:	f000 fa89 	bl	80014c0 <heartBeat>
		if (isCAN_C_RXed == 1)
 8000fae:	e6a3      	b.n	8000cf8 <main+0x2c>
 8000fb0:	2000059c 	.word	0x2000059c
 8000fb4:	200005e7 	.word	0x200005e7
 8000fb8:	200005c4 	.word	0x200005c4
 8000fbc:	200000a0 	.word	0x200000a0
 8000fc0:	200005e4 	.word	0x200005e4
 8000fc4:	200005b4 	.word	0x200005b4
 8000fc8:	08007928 	.word	0x08007928
 8000fcc:	200000cc 	.word	0x200000cc
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	200005cc 	.word	0x200005cc
 8000fd8:	200005e5 	.word	0x200005e5
 8000fdc:	200000c8 	.word	0x200000c8
 8000fe0:	08007940 	.word	0x08007940
 8000fe4:	20000538 	.word	0x20000538
 8000fe8:	200005dc 	.word	0x200005dc
 8000fec:	2000038c 	.word	0x2000038c
 8000ff0:	50000800 	.word	0x50000800
 8000ff4:	200001fc 	.word	0x200001fc
 8000ff8:	200005e6 	.word	0x200005e6
 8000ffc:	08007958 	.word	0x08007958
 8001000:	200004ec 	.word	0x200004ec
 8001004:	20000328 	.word	0x20000328

08001008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b095      	sub	sp, #84	; 0x54
 800100c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100e:	2414      	movs	r4, #20
 8001010:	193b      	adds	r3, r7, r4
 8001012:	0018      	movs	r0, r3
 8001014:	233c      	movs	r3, #60	; 0x3c
 8001016:	001a      	movs	r2, r3
 8001018:	2100      	movs	r1, #0
 800101a:	f005 ff51 	bl	8006ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	0018      	movs	r0, r3
 8001022:	2310      	movs	r3, #16
 8001024:	001a      	movs	r2, r3
 8001026:	2100      	movs	r1, #0
 8001028:	f005 ff4a 	bl	8006ec0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	0018      	movs	r0, r3
 8001032:	f003 f95b 	bl	80042ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001036:	193b      	adds	r3, r7, r4
 8001038:	2201      	movs	r2, #1
 800103a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800103c:	193b      	adds	r3, r7, r4
 800103e:	2280      	movs	r2, #128	; 0x80
 8001040:	0252      	lsls	r2, r2, #9
 8001042:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001044:	0021      	movs	r1, r4
 8001046:	187b      	adds	r3, r7, r1
 8001048:	2202      	movs	r2, #2
 800104a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800104c:	187b      	adds	r3, r7, r1
 800104e:	2203      	movs	r2, #3
 8001050:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001052:	187b      	adds	r3, r7, r1
 8001054:	2200      	movs	r2, #0
 8001056:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001058:	187b      	adds	r3, r7, r1
 800105a:	2210      	movs	r2, #16
 800105c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800105e:	187b      	adds	r3, r7, r1
 8001060:	2280      	movs	r2, #128	; 0x80
 8001062:	0292      	lsls	r2, r2, #10
 8001064:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 8001066:	187b      	adds	r3, r7, r1
 8001068:	22e0      	movs	r2, #224	; 0xe0
 800106a:	0512      	lsls	r2, r2, #20
 800106c:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800106e:	187b      	adds	r3, r7, r1
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	0592      	lsls	r2, r2, #22
 8001074:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001076:	187b      	adds	r3, r7, r1
 8001078:	0018      	movs	r0, r3
 800107a:	f003 f983 	bl	8004384 <HAL_RCC_OscConfig>
 800107e:	1e03      	subs	r3, r0, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001082:	f000 fb19 	bl	80016b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2207      	movs	r2, #7
 800108a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108c:	1d3b      	adds	r3, r7, #4
 800108e:	2202      	movs	r2, #2
 8001090:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2102      	movs	r1, #2
 80010a2:	0018      	movs	r0, r3
 80010a4:	f003 fcce 	bl	8004a44 <HAL_RCC_ClockConfig>
 80010a8:	1e03      	subs	r3, r0, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80010ac:	f000 fb04 	bl	80016b8 <Error_Handler>
  }
}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b015      	add	sp, #84	; 0x54
 80010b6:	bd90      	pop	{r4, r7, pc}

080010b8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80010bc:	4b20      	ldr	r3, [pc, #128]	; (8001140 <MX_FDCAN1_Init+0x88>)
 80010be:	4a21      	ldr	r2, [pc, #132]	; (8001144 <MX_FDCAN1_Init+0x8c>)
 80010c0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80010c2:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <MX_FDCAN1_Init+0x88>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80010c8:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <MX_FDCAN1_Init+0x88>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <MX_FDCAN1_Init+0x88>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_FDCAN1_Init+0x88>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80010da:	4b19      	ldr	r3, [pc, #100]	; (8001140 <MX_FDCAN1_Init+0x88>)
 80010dc:	2200      	movs	r2, #0
 80010de:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <MX_FDCAN1_Init+0x88>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80010e6:	4b16      	ldr	r3, [pc, #88]	; (8001140 <MX_FDCAN1_Init+0x88>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 4;
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_FDCAN1_Init+0x88>)
 80010ee:	2204      	movs	r2, #4
 80010f0:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 27;
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <MX_FDCAN1_Init+0x88>)
 80010f4:	221b      	movs	r2, #27
 80010f6:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_FDCAN1_Init+0x88>)
 80010fa:	2204      	movs	r2, #4
 80010fc:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <MX_FDCAN1_Init+0x88>)
 8001100:	2201      	movs	r2, #1
 8001102:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8001104:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_FDCAN1_Init+0x88>)
 8001106:	2204      	movs	r2, #4
 8001108:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 27;
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <MX_FDCAN1_Init+0x88>)
 800110c:	221b      	movs	r2, #27
 800110e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <MX_FDCAN1_Init+0x88>)
 8001112:	2204      	movs	r2, #4
 8001114:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <MX_FDCAN1_Init+0x88>)
 8001118:	2200      	movs	r2, #0
 800111a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <MX_FDCAN1_Init+0x88>)
 800111e:	2200      	movs	r2, #0
 8001120:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <MX_FDCAN1_Init+0x88>)
 8001124:	2200      	movs	r2, #0
 8001126:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <MX_FDCAN1_Init+0x88>)
 800112a:	0018      	movs	r0, r3
 800112c:	f002 f87c 	bl	8003228 <HAL_FDCAN_Init>
 8001130:	1e03      	subs	r3, r0, #0
 8001132:	d001      	beq.n	8001138 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001134:	f000 fac0 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	20000328 	.word	0x20000328
 8001144:	40006400 	.word	0x40006400

08001148 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <MX_FDCAN2_Init+0x88>)
 800114e:	4a21      	ldr	r2, [pc, #132]	; (80011d4 <MX_FDCAN2_Init+0x8c>)
 8001150:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <MX_FDCAN2_Init+0x88>)
 8001154:	2200      	movs	r2, #0
 8001156:	605a      	str	r2, [r3, #4]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <MX_FDCAN2_Init+0x88>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <MX_FDCAN2_Init+0x88>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <MX_FDCAN2_Init+0x88>)
 8001166:	2200      	movs	r2, #0
 8001168:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <MX_FDCAN2_Init+0x88>)
 800116c:	2200      	movs	r2, #0
 800116e:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <MX_FDCAN2_Init+0x88>)
 8001172:	2200      	movs	r2, #0
 8001174:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <MX_FDCAN2_Init+0x88>)
 8001178:	2201      	movs	r2, #1
 800117a:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 4;
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <MX_FDCAN2_Init+0x88>)
 800117e:	2204      	movs	r2, #4
 8001180:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 27;
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <MX_FDCAN2_Init+0x88>)
 8001184:	221b      	movs	r2, #27
 8001186:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 4;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_FDCAN2_Init+0x88>)
 800118a:	2204      	movs	r2, #4
 800118c:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <MX_FDCAN2_Init+0x88>)
 8001190:	2201      	movs	r2, #1
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 4;
 8001194:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_FDCAN2_Init+0x88>)
 8001196:	2204      	movs	r2, #4
 8001198:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 27;
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <MX_FDCAN2_Init+0x88>)
 800119c:	221b      	movs	r2, #27
 800119e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <MX_FDCAN2_Init+0x88>)
 80011a2:	2202      	movs	r2, #2
 80011a4:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.StdFiltersNbr = 0;
 80011a6:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <MX_FDCAN2_Init+0x88>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.ExtFiltersNbr = 0;
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <MX_FDCAN2_Init+0x88>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80011b2:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <MX_FDCAN2_Init+0x88>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <MX_FDCAN2_Init+0x88>)
 80011ba:	0018      	movs	r0, r3
 80011bc:	f002 f834 	bl	8003228 <HAL_FDCAN_Init>
 80011c0:	1e03      	subs	r3, r0, #0
 80011c2:	d001      	beq.n	80011c8 <MX_FDCAN2_Init+0x80>
  {
    Error_Handler();
 80011c4:	f000 fa78 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80011c8:	46c0      	nop			; (mov r8, r8)
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	2000038c 	.word	0x2000038c
 80011d4:	40006800 	.word	0x40006800

080011d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <MX_SPI1_Init+0x74>)
 80011de:	4a1c      	ldr	r2, [pc, #112]	; (8001250 <MX_SPI1_Init+0x78>)
 80011e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011e2:	4b1a      	ldr	r3, [pc, #104]	; (800124c <MX_SPI1_Init+0x74>)
 80011e4:	2282      	movs	r2, #130	; 0x82
 80011e6:	0052      	lsls	r2, r2, #1
 80011e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <MX_SPI1_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <MX_SPI1_Init+0x74>)
 80011f2:	22e0      	movs	r2, #224	; 0xe0
 80011f4:	00d2      	lsls	r2, r2, #3
 80011f6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f8:	4b14      	ldr	r3, [pc, #80]	; (800124c <MX_SPI1_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011fe:	4b13      	ldr	r3, [pc, #76]	; (800124c <MX_SPI1_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_SPI1_Init+0x74>)
 8001206:	2280      	movs	r2, #128	; 0x80
 8001208:	0092      	lsls	r2, r2, #2
 800120a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <MX_SPI1_Init+0x74>)
 800120e:	2210      	movs	r2, #16
 8001210:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_SPI1_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_SPI1_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800121e:	4b0b      	ldr	r3, [pc, #44]	; (800124c <MX_SPI1_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_SPI1_Init+0x74>)
 8001226:	2207      	movs	r2, #7
 8001228:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800122a:	4b08      	ldr	r3, [pc, #32]	; (800124c <MX_SPI1_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <MX_SPI1_Init+0x74>)
 8001232:	2208      	movs	r2, #8
 8001234:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001236:	4b05      	ldr	r3, [pc, #20]	; (800124c <MX_SPI1_Init+0x74>)
 8001238:	0018      	movs	r0, r3
 800123a:	f003 ffe9 	bl	8005210 <HAL_SPI_Init>
 800123e:	1e03      	subs	r3, r0, #0
 8001240:	d001      	beq.n	8001246 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001242:	f000 fa39 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200003f0 	.word	0x200003f0
 8001250:	40013000 	.word	0x40013000

08001254 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001258:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <MX_USART1_UART_Init+0x94>)
 800125a:	4a24      	ldr	r2, [pc, #144]	; (80012ec <MX_USART1_UART_Init+0x98>)
 800125c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800125e:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <MX_USART1_UART_Init+0x94>)
 8001260:	22e1      	movs	r2, #225	; 0xe1
 8001262:	0252      	lsls	r2, r2, #9
 8001264:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001266:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <MX_USART1_UART_Init+0x94>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_USART1_UART_Init+0x94>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <MX_USART1_UART_Init+0x94>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_USART1_UART_Init+0x94>)
 800127a:	220c      	movs	r2, #12
 800127c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_USART1_UART_Init+0x94>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_USART1_UART_Init+0x94>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <MX_USART1_UART_Init+0x94>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <MX_USART1_UART_Init+0x94>)
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_USART1_UART_Init+0x94>)
 8001298:	2200      	movs	r2, #0
 800129a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <MX_USART1_UART_Init+0x94>)
 800129e:	0018      	movs	r0, r3
 80012a0:	f004 feb8 	bl	8006014 <HAL_UART_Init>
 80012a4:	1e03      	subs	r3, r0, #0
 80012a6:	d001      	beq.n	80012ac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80012a8:	f000 fa06 	bl	80016b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ac:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <MX_USART1_UART_Init+0x94>)
 80012ae:	2100      	movs	r1, #0
 80012b0:	0018      	movs	r0, r3
 80012b2:	f005 fcfb 	bl	8006cac <HAL_UARTEx_SetTxFifoThreshold>
 80012b6:	1e03      	subs	r3, r0, #0
 80012b8:	d001      	beq.n	80012be <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012ba:	f000 f9fd 	bl	80016b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <MX_USART1_UART_Init+0x94>)
 80012c0:	2100      	movs	r1, #0
 80012c2:	0018      	movs	r0, r3
 80012c4:	f005 fd32 	bl	8006d2c <HAL_UARTEx_SetRxFifoThreshold>
 80012c8:	1e03      	subs	r3, r0, #0
 80012ca:	d001      	beq.n	80012d0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012cc:	f000 f9f4 	bl	80016b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <MX_USART1_UART_Init+0x94>)
 80012d2:	0018      	movs	r0, r3
 80012d4:	f005 fcb0 	bl	8006c38 <HAL_UARTEx_DisableFifoMode>
 80012d8:	1e03      	subs	r3, r0, #0
 80012da:	d001      	beq.n	80012e0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012dc:	f000 f9ec 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012e0:	46c0      	nop			; (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	20000454 	.word	0x20000454
 80012ec:	40013800 	.word	0x40013800

080012f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b08b      	sub	sp, #44	; 0x2c
 80012f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f6:	2414      	movs	r4, #20
 80012f8:	193b      	adds	r3, r7, r4
 80012fa:	0018      	movs	r0, r3
 80012fc:	2314      	movs	r3, #20
 80012fe:	001a      	movs	r2, r3
 8001300:	2100      	movs	r1, #0
 8001302:	f005 fddd 	bl	8006ec0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001306:	4b68      	ldr	r3, [pc, #416]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 8001308:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800130a:	4b67      	ldr	r3, [pc, #412]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 800130c:	2104      	movs	r1, #4
 800130e:	430a      	orrs	r2, r1
 8001310:	635a      	str	r2, [r3, #52]	; 0x34
 8001312:	4b65      	ldr	r3, [pc, #404]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 8001314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001316:	2204      	movs	r2, #4
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800131e:	4b62      	ldr	r3, [pc, #392]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 8001320:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001322:	4b61      	ldr	r3, [pc, #388]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 8001324:	2120      	movs	r1, #32
 8001326:	430a      	orrs	r2, r1
 8001328:	635a      	str	r2, [r3, #52]	; 0x34
 800132a:	4b5f      	ldr	r3, [pc, #380]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 800132c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800132e:	2220      	movs	r2, #32
 8001330:	4013      	ands	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	4b5c      	ldr	r3, [pc, #368]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 8001338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800133a:	4b5b      	ldr	r3, [pc, #364]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 800133c:	2101      	movs	r1, #1
 800133e:	430a      	orrs	r2, r1
 8001340:	635a      	str	r2, [r3, #52]	; 0x34
 8001342:	4b59      	ldr	r3, [pc, #356]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 8001344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001346:	2201      	movs	r2, #1
 8001348:	4013      	ands	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	4b56      	ldr	r3, [pc, #344]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 8001350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001352:	4b55      	ldr	r3, [pc, #340]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 8001354:	2102      	movs	r1, #2
 8001356:	430a      	orrs	r2, r1
 8001358:	635a      	str	r2, [r3, #52]	; 0x34
 800135a:	4b53      	ldr	r3, [pc, #332]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 800135c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800135e:	2202      	movs	r2, #2
 8001360:	4013      	ands	r3, r2
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001366:	4b50      	ldr	r3, [pc, #320]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 8001368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800136a:	4b4f      	ldr	r3, [pc, #316]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 800136c:	2108      	movs	r1, #8
 800136e:	430a      	orrs	r2, r1
 8001370:	635a      	str	r2, [r3, #52]	; 0x34
 8001372:	4b4d      	ldr	r3, [pc, #308]	; (80014a8 <MX_GPIO_Init+0x1b8>)
 8001374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001376:	2208      	movs	r2, #8
 8001378:	4013      	ands	r3, r2
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CAN_A_RX_Pin|LED_CAN_A_TX_Pin, GPIO_PIN_SET);
 800137e:	23a0      	movs	r3, #160	; 0xa0
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	484a      	ldr	r0, [pc, #296]	; (80014ac <MX_GPIO_Init+0x1bc>)
 8001384:	2201      	movs	r2, #1
 8001386:	0019      	movs	r1, r3
 8001388:	f002 ff43 	bl	8004212 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_CAN_B_TX_Pin|LED_CAN_B_RX_Pin|LED_CAN_C_RX_Pin, GPIO_PIN_SET);
 800138c:	4948      	ldr	r1, [pc, #288]	; (80014b0 <MX_GPIO_Init+0x1c0>)
 800138e:	23a0      	movs	r3, #160	; 0xa0
 8001390:	05db      	lsls	r3, r3, #23
 8001392:	2201      	movs	r2, #1
 8001394:	0018      	movs	r0, r3
 8001396:	f002 ff3c 	bl	8004212 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_CAN_C_Pin|RST_CANC_IC_Pin|LED_BLINK_Pin, GPIO_PIN_SET);
 800139a:	4946      	ldr	r1, [pc, #280]	; (80014b4 <MX_GPIO_Init+0x1c4>)
 800139c:	4b46      	ldr	r3, [pc, #280]	; (80014b8 <MX_GPIO_Init+0x1c8>)
 800139e:	2201      	movs	r2, #1
 80013a0:	0018      	movs	r0, r3
 80013a2:	f002 ff36 	bl	8004212 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_CAN_C_TX_GPIO_Port, LED_CAN_C_TX_Pin, GPIO_PIN_SET);
 80013a6:	4b45      	ldr	r3, [pc, #276]	; (80014bc <MX_GPIO_Init+0x1cc>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	2108      	movs	r1, #8
 80013ac:	0018      	movs	r0, r3
 80013ae:	f002 ff30 	bl	8004212 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_CAN_A_RX_Pin LED_CAN_A_TX_Pin */
  GPIO_InitStruct.Pin = LED_CAN_A_RX_Pin|LED_CAN_A_TX_Pin;
 80013b2:	193b      	adds	r3, r7, r4
 80013b4:	22a0      	movs	r2, #160	; 0xa0
 80013b6:	0212      	lsls	r2, r2, #8
 80013b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ba:	193b      	adds	r3, r7, r4
 80013bc:	2201      	movs	r2, #1
 80013be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	193b      	adds	r3, r7, r4
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	193b      	adds	r3, r7, r4
 80013c8:	2200      	movs	r2, #0
 80013ca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013cc:	193b      	adds	r3, r7, r4
 80013ce:	4a37      	ldr	r2, [pc, #220]	; (80014ac <MX_GPIO_Init+0x1bc>)
 80013d0:	0019      	movs	r1, r3
 80013d2:	0010      	movs	r0, r2
 80013d4:	f002 fd94 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80013d8:	0021      	movs	r1, r4
 80013da:	187b      	adds	r3, r7, r1
 80013dc:	2280      	movs	r2, #128	; 0x80
 80013de:	01d2      	lsls	r2, r2, #7
 80013e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e2:	000c      	movs	r4, r1
 80013e4:	193b      	adds	r3, r7, r4
 80013e6:	2200      	movs	r2, #0
 80013e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	193b      	adds	r3, r7, r4
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80013f0:	193b      	adds	r3, r7, r4
 80013f2:	4a2e      	ldr	r2, [pc, #184]	; (80014ac <MX_GPIO_Init+0x1bc>)
 80013f4:	0019      	movs	r1, r3
 80013f6:	0010      	movs	r0, r2
 80013f8:	f002 fd82 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_CAN_B_TX_Pin LED_CAN_B_RX_Pin LED_CAN_C_RX_Pin */
  GPIO_InitStruct.Pin = LED_CAN_B_TX_Pin|LED_CAN_B_RX_Pin|LED_CAN_C_RX_Pin;
 80013fc:	193b      	adds	r3, r7, r4
 80013fe:	4a2c      	ldr	r2, [pc, #176]	; (80014b0 <MX_GPIO_Init+0x1c0>)
 8001400:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	193b      	adds	r3, r7, r4
 8001404:	2201      	movs	r2, #1
 8001406:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	193b      	adds	r3, r7, r4
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	193b      	adds	r3, r7, r4
 8001410:	2200      	movs	r2, #0
 8001412:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	193a      	adds	r2, r7, r4
 8001416:	23a0      	movs	r3, #160	; 0xa0
 8001418:	05db      	lsls	r3, r3, #23
 800141a:	0011      	movs	r1, r2
 800141c:	0018      	movs	r0, r3
 800141e:	f002 fd6f 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_CAN_C_Pin RST_CANC_IC_Pin LED_BLINK_Pin */
  GPIO_InitStruct.Pin = CS_CAN_C_Pin|RST_CANC_IC_Pin|LED_BLINK_Pin;
 8001422:	193b      	adds	r3, r7, r4
 8001424:	4a23      	ldr	r2, [pc, #140]	; (80014b4 <MX_GPIO_Init+0x1c4>)
 8001426:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001428:	193b      	adds	r3, r7, r4
 800142a:	2201      	movs	r2, #1
 800142c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	193b      	adds	r3, r7, r4
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	193b      	adds	r3, r7, r4
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143a:	193b      	adds	r3, r7, r4
 800143c:	4a1e      	ldr	r2, [pc, #120]	; (80014b8 <MX_GPIO_Init+0x1c8>)
 800143e:	0019      	movs	r1, r3
 8001440:	0010      	movs	r0, r2
 8001442:	f002 fd5d 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_CAN_C_Pin */
  GPIO_InitStruct.Pin = INT_CAN_C_Pin;
 8001446:	193b      	adds	r3, r7, r4
 8001448:	2280      	movs	r2, #128	; 0x80
 800144a:	0052      	lsls	r2, r2, #1
 800144c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800144e:	193b      	adds	r3, r7, r4
 8001450:	2284      	movs	r2, #132	; 0x84
 8001452:	0392      	lsls	r2, r2, #14
 8001454:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	193b      	adds	r3, r7, r4
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(INT_CAN_C_GPIO_Port, &GPIO_InitStruct);
 800145c:	193a      	adds	r2, r7, r4
 800145e:	23a0      	movs	r3, #160	; 0xa0
 8001460:	05db      	lsls	r3, r3, #23
 8001462:	0011      	movs	r1, r2
 8001464:	0018      	movs	r0, r3
 8001466:	f002 fd4b 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_CAN_C_TX_Pin */
  GPIO_InitStruct.Pin = LED_CAN_C_TX_Pin;
 800146a:	0021      	movs	r1, r4
 800146c:	187b      	adds	r3, r7, r1
 800146e:	2208      	movs	r2, #8
 8001470:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	187b      	adds	r3, r7, r1
 8001474:	2201      	movs	r2, #1
 8001476:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	187b      	adds	r3, r7, r1
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	187b      	adds	r3, r7, r1
 8001480:	2200      	movs	r2, #0
 8001482:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_CAN_C_TX_GPIO_Port, &GPIO_InitStruct);
 8001484:	187b      	adds	r3, r7, r1
 8001486:	4a0d      	ldr	r2, [pc, #52]	; (80014bc <MX_GPIO_Init+0x1cc>)
 8001488:	0019      	movs	r1, r3
 800148a:	0010      	movs	r0, r2
 800148c:	f002 fd38 	bl	8003f00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	2007      	movs	r0, #7
 8001496:	f001 fe95 	bl	80031c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800149a:	2007      	movs	r0, #7
 800149c:	f001 fea7 	bl	80031ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a0:	46c0      	nop			; (mov r8, r8)
 80014a2:	46bd      	mov	sp, r7
 80014a4:	b00b      	add	sp, #44	; 0x2c
 80014a6:	bd90      	pop	{r4, r7, pc}
 80014a8:	40021000 	.word	0x40021000
 80014ac:	50000800 	.word	0x50000800
 80014b0:	000080a0 	.word	0x000080a0
 80014b4:	0000080c 	.word	0x0000080c
 80014b8:	50000400 	.word	0x50000400
 80014bc:	50000c00 	.word	0x50000c00

080014c0 <heartBeat>:
 * 				  				loop icerisinde cagrılmalıdır. "period_of_led_blink" degiskeni ile frekansı belirlenir.
 * parameters :   void
 * return     :   void
*/
void heartBeat()
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	if(HAL_GetTick() - last_time > period_of_led_blink)
 80014c4:	f001 fda4 	bl	8003010 <HAL_GetTick>
 80014c8:	0002      	movs	r2, r0
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <heartBeat+0x34>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	1ad2      	subs	r2, r2, r3
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <heartBeat+0x38>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d909      	bls.n	80014ec <heartBeat+0x2c>
	{
		last_time = HAL_GetTick();
 80014d8:	f001 fd9a 	bl	8003010 <HAL_GetTick>
 80014dc:	0002      	movs	r2, r0
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <heartBeat+0x34>)
 80014e0:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_BLINK_GPIO_Port, LED_BLINK_Pin);
 80014e2:	4b06      	ldr	r3, [pc, #24]	; (80014fc <heartBeat+0x3c>)
 80014e4:	2108      	movs	r1, #8
 80014e6:	0018      	movs	r0, r3
 80014e8:	f002 feb0 	bl	800424c <HAL_GPIO_TogglePin>
	}
}
 80014ec:	46c0      	nop			; (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	200004e8 	.word	0x200004e8
 80014f8:	20000004 	.word	0x20000004
 80014fc:	50000400 	.word	0x50000400

08001500 <isPressedBtn>:
 * parameters :  void
 *
 * return     :  void
 **/
void isPressedBtn()
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
	static int msCount = 0;

	if(!HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin))
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	01db      	lsls	r3, r3, #7
 800150a:	4a15      	ldr	r2, [pc, #84]	; (8001560 <isPressedBtn+0x60>)
 800150c:	0019      	movs	r1, r3
 800150e:	0010      	movs	r0, r2
 8001510:	f002 fe62 	bl	80041d8 <HAL_GPIO_ReadPin>
 8001514:	1e03      	subs	r3, r0, #0
 8001516:	d11c      	bne.n	8001552 <isPressedBtn+0x52>
	{
		msCount++;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <isPressedBtn+0x64>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	1c5a      	adds	r2, r3, #1
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <isPressedBtn+0x64>)
 8001520:	601a      	str	r2, [r3, #0]
		if(msCount > 1e3)
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <isPressedBtn+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	23fa      	movs	r3, #250	; 0xfa
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	429a      	cmp	r2, r3
 800152c:	dd14      	ble.n	8001558 <isPressedBtn+0x58>
		{

			//***********************************
			// do something
			//***********************************
			debugPrint("btn\n");
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <isPressedBtn+0x68>)
 8001530:	0018      	movs	r0, r3
 8001532:	f7ff fbb5 	bl	8000ca0 <dbgPrint>

			uint8_t dataBUFFFER[8] = {1, 2, 3, 4, 5, 6, 7, 8};
 8001536:	003b      	movs	r3, r7
 8001538:	4a0c      	ldr	r2, [pc, #48]	; (800156c <isPressedBtn+0x6c>)
 800153a:	ca03      	ldmia	r2!, {r0, r1}
 800153c:	c303      	stmia	r3!, {r0, r1}

			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &txHeader_B, dataBUFFFER);  //canB den gönder
 800153e:	003a      	movs	r2, r7
 8001540:	490b      	ldr	r1, [pc, #44]	; (8001570 <isPressedBtn+0x70>)
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <isPressedBtn+0x74>)
 8001544:	0018      	movs	r0, r3
 8001546:	f002 f82b 	bl	80035a0 <HAL_FDCAN_AddMessageToTxFifoQ>

			//***********************************

			msCount = -3e6;
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <isPressedBtn+0x64>)
 800154c:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <isPressedBtn+0x78>)
 800154e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		msCount = 0;
	}
}
 8001550:	e002      	b.n	8001558 <isPressedBtn+0x58>
		msCount = 0;
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <isPressedBtn+0x64>)
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
}
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	b002      	add	sp, #8
 800155e:	bd80      	pop	{r7, pc}
 8001560:	50000800 	.word	0x50000800
 8001564:	200005e8 	.word	0x200005e8
 8001568:	08007974 	.word	0x08007974
 800156c:	0800797c 	.word	0x0800797c
 8001570:	20000538 	.word	0x20000538
 8001574:	2000038c 	.word	0x2000038c
 8001578:	ffd23940 	.word	0xffd23940

0800157c <HAL_FDCAN_RxFifo0Callback>:

/**
 * CAN_A 'a gelen mesajlarda hfdcan1'ın FIFO0'ına konur  line0 kesmesi devreye girer
 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157e:	b087      	sub	sp, #28
 8001580:	af04      	add	r7, sp, #16
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	2201      	movs	r2, #1
 800158a:	4013      	ands	r3, r2
 800158c:	d02f      	beq.n	80015ee <HAL_FDCAN_RxFifo0Callback+0x72>
	{
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader_A, tempCanMsg_A.Payload) == HAL_OK)
 800158e:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 8001590:	4a1a      	ldr	r2, [pc, #104]	; (80015fc <HAL_FDCAN_RxFifo0Callback+0x80>)
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	2140      	movs	r1, #64	; 0x40
 8001596:	f002 f849 	bl	800362c <HAL_FDCAN_GetRxMessage>
 800159a:	1e03      	subs	r3, r0, #0
 800159c:	d127      	bne.n	80015ee <HAL_FDCAN_RxFifo0Callback+0x72>
		{
			//dbgPrint("canA new RxFifo0 :"); dbgDumpHex( tempCanMsg_A.Payload, 8); dbgPrint("\n");
			//dbgPrintf("RxHeader.Identifier: %x\n", rxHeader_A.Identifier);

			HAL_GPIO_WritePin(LED_CAN_A_RX_GPIO_Port, LED_CAN_A_RX_Pin, GPIO_PIN_SET);
 800159e:	2380      	movs	r3, #128	; 0x80
 80015a0:	019b      	lsls	r3, r3, #6
 80015a2:	4817      	ldr	r0, [pc, #92]	; (8001600 <HAL_FDCAN_RxFifo0Callback+0x84>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	0019      	movs	r1, r3
 80015a8:	f002 fe33 	bl	8004212 <HAL_GPIO_WritePin>

			tempCanMsg_A.Identifier          = rxHeader_A.Identifier;
 80015ac:	4b13      	ldr	r3, [pc, #76]	; (80015fc <HAL_FDCAN_RxFifo0Callback+0x80>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <HAL_FDCAN_RxFifo0Callback+0x88>)
 80015b2:	601a      	str	r2, [r3, #0]
			tempCanMsg_A.IdType              = rxHeader_A.IdType;           // mainscp'den hep std ide gelir
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_FDCAN_RxFifo0Callback+0x80>)
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <HAL_FDCAN_RxFifo0Callback+0x88>)
 80015ba:	605a      	str	r2, [r3, #4]
			tempCanMsg_A.FrameType           = rxHeader_A.RxFrameType;      // mainscp'den hep data frame gelir
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <HAL_FDCAN_RxFifo0Callback+0x80>)
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	4b10      	ldr	r3, [pc, #64]	; (8001604 <HAL_FDCAN_RxFifo0Callback+0x88>)
 80015c2:	609a      	str	r2, [r3, #8]
			tempCanMsg_A.DataLength          = rxHeader_A.DataLength;
 80015c4:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <HAL_FDCAN_RxFifo0Callback+0x80>)
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <HAL_FDCAN_RxFifo0Callback+0x88>)
 80015ca:	60da      	str	r2, [r3, #12]

			canMsgRingBufferPush(&routeOne.Route_Ring_Buf, tempCanMsg_A);
 80015cc:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <HAL_FDCAN_RxFifo0Callback+0x88>)
 80015ce:	480e      	ldr	r0, [pc, #56]	; (8001608 <HAL_FDCAN_RxFifo0Callback+0x8c>)
 80015d0:	466a      	mov	r2, sp
 80015d2:	0011      	movs	r1, r2
 80015d4:	001a      	movs	r2, r3
 80015d6:	320c      	adds	r2, #12
 80015d8:	ca70      	ldmia	r2!, {r4, r5, r6}
 80015da:	c170      	stmia	r1!, {r4, r5, r6}
 80015dc:	6819      	ldr	r1, [r3, #0]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f7ff fab2 	bl	8000b4a <canMsgRingBufferPush>

			debugPrint("RX, ->canA  ->route1\n");
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_FDCAN_RxFifo0Callback+0x90>)
 80015e8:	0018      	movs	r0, r3
 80015ea:	f7ff fb59 	bl	8000ca0 <dbgPrint>
		}
		//dbgPrint("ERROR: Fifo0Callback HAL_FDCAN_GetRxMessage\n");
		//Error_Handler();
	}
}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b003      	add	sp, #12
 80015f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	20000594 	.word	0x20000594
 80015fc:	20000510 	.word	0x20000510
 8001600:	50000800 	.word	0x50000800
 8001604:	20000584 	.word	0x20000584
 8001608:	200000cc 	.word	0x200000cc
 800160c:	08007984 	.word	0x08007984

08001610 <HAL_FDCAN_RxFifo1Callback>:

/**
 *  CAN_B 'a gelen mesajlarda hfdcan2'ın FIFO1'ına konur  line1 kesmesi devreye girer
 */
void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001612:	b087      	sub	sp, #28
 8001614:	af04      	add	r7, sp, #16
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
	if ((RxFifo1ITs & FDCAN_IT_RX_FIFO1_NEW_MESSAGE) != RESET)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2208      	movs	r2, #8
 800161e:	4013      	ands	r3, r2
 8001620:	d02b      	beq.n	800167a <HAL_FDCAN_RxFifo1Callback+0x6a>
	{
		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO1, &rxHeader_B, tempCanMsg_B.Payload) == HAL_OK)
 8001622:	4b18      	ldr	r3, [pc, #96]	; (8001684 <HAL_FDCAN_RxFifo1Callback+0x74>)
 8001624:	4a18      	ldr	r2, [pc, #96]	; (8001688 <HAL_FDCAN_RxFifo1Callback+0x78>)
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	2141      	movs	r1, #65	; 0x41
 800162a:	f001 ffff 	bl	800362c <HAL_FDCAN_GetRxMessage>
 800162e:	1e03      	subs	r3, r0, #0
 8001630:	d123      	bne.n	800167a <HAL_FDCAN_RxFifo1Callback+0x6a>
		{
			//dbgPrint("canB new RxFifo1 :"); dbgDumpHex(tempCanMsg_B.Payload, 8); dbgPrint("\n");
			//dbgPrintf("RxHeader.Identifier: %x\n", rxHeader_B.Identifier);

			HAL_GPIO_WritePin(LED_CAN_B_RX_GPIO_Port, LED_CAN_B_RX_Pin,GPIO_PIN_SET);
 8001632:	23a0      	movs	r3, #160	; 0xa0
 8001634:	05db      	lsls	r3, r3, #23
 8001636:	2201      	movs	r2, #1
 8001638:	2180      	movs	r1, #128	; 0x80
 800163a:	0018      	movs	r0, r3
 800163c:	f002 fde9 	bl	8004212 <HAL_GPIO_WritePin>

			tempCanMsg_B.Identifier          = rxHeader_B.Identifier;
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_FDCAN_RxFifo1Callback+0x78>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <HAL_FDCAN_RxFifo1Callback+0x7c>)
 8001646:	601a      	str	r2, [r3, #0]
			tempCanMsg_B.IdType              = rxHeader_B.IdType;
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <HAL_FDCAN_RxFifo1Callback+0x78>)
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <HAL_FDCAN_RxFifo1Callback+0x7c>)
 800164e:	605a      	str	r2, [r3, #4]
			//tempCanMsg_B.FrameType           = FDCAN_DATA_FRAME;   //...   mainScp kartı remote frame aldıgında sapıtıyor, whil(1) den önce ataması yapıldı
			tempCanMsg_B.DataLength          = rxHeader_B.DataLength;
 8001650:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <HAL_FDCAN_RxFifo1Callback+0x78>)
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	4b0d      	ldr	r3, [pc, #52]	; (800168c <HAL_FDCAN_RxFifo1Callback+0x7c>)
 8001656:	60da      	str	r2, [r3, #12]

			canMsgRingBufferPush(&routeTwo.Route_Ring_Buf, tempCanMsg_B);
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_FDCAN_RxFifo1Callback+0x7c>)
 800165a:	480d      	ldr	r0, [pc, #52]	; (8001690 <HAL_FDCAN_RxFifo1Callback+0x80>)
 800165c:	466a      	mov	r2, sp
 800165e:	0011      	movs	r1, r2
 8001660:	001a      	movs	r2, r3
 8001662:	320c      	adds	r2, #12
 8001664:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001666:	c170      	stmia	r1!, {r4, r5, r6}
 8001668:	6819      	ldr	r1, [r3, #0]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f7ff fa6c 	bl	8000b4a <canMsgRingBufferPush>

			debugPrint("RX, ->canB  ->route2\n");
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <HAL_FDCAN_RxFifo1Callback+0x84>)
 8001674:	0018      	movs	r0, r3
 8001676:	f7ff fb13 	bl	8000ca0 <dbgPrint>
		}
		//dbgPrint("ERROR: Fifo0Callback HAL_FDCAN_GetRxMessage\n");
		//Error_Handler();
	}
}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	46bd      	mov	sp, r7
 800167e:	b003      	add	sp, #12
 8001680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	200005ac 	.word	0x200005ac
 8001688:	2000055c 	.word	0x2000055c
 800168c:	2000059c 	.word	0x2000059c
 8001690:	200001fc 	.word	0x200001fc
 8001694:	0800799c 	.word	0x0800799c

08001698 <HAL_GPIO_EXTI_Falling_Callback>:


void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	0002      	movs	r2, r0
 80016a0:	1dbb      	adds	r3, r7, #6
 80016a2:	801a      	strh	r2, [r3, #0]
		isCAN_C_RXed = 1;
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <HAL_GPIO_EXTI_Falling_Callback+0x1c>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	46bd      	mov	sp, r7
 80016ae:	b002      	add	sp, #8
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	200005e7 	.word	0x200005e7

080016b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016bc:	b672      	cpsid	i
}
 80016be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <Error_Handler+0x8>

080016c2 <txCtrlReg>:
** Function name:           txCtrlReg
** Descriptions:            return tx ctrl reg according to tx buffer index.
**                          According to my tests this is faster and saves memory compared using vector
*********************************************************************************************************/
uint8_t txCtrlReg(uint8_t i)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	0002      	movs	r2, r0
 80016ca:	1dfb      	adds	r3, r7, #7
 80016cc:	701a      	strb	r2, [r3, #0]
    switch (i) {
 80016ce:	1dfb      	adds	r3, r7, #7
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d009      	beq.n	80016ea <txCtrlReg+0x28>
 80016d6:	dc0a      	bgt.n	80016ee <txCtrlReg+0x2c>
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d002      	beq.n	80016e2 <txCtrlReg+0x20>
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d002      	beq.n	80016e6 <txCtrlReg+0x24>
 80016e0:	e005      	b.n	80016ee <txCtrlReg+0x2c>
        case 0: return MCP_TXB0CTRL;
 80016e2:	2330      	movs	r3, #48	; 0x30
 80016e4:	e004      	b.n	80016f0 <txCtrlReg+0x2e>
        case 1: return MCP_TXB1CTRL;
 80016e6:	2340      	movs	r3, #64	; 0x40
 80016e8:	e002      	b.n	80016f0 <txCtrlReg+0x2e>
        case 2: return MCP_TXB2CTRL;
 80016ea:	2350      	movs	r3, #80	; 0x50
 80016ec:	e000      	b.n	80016f0 <txCtrlReg+0x2e>
    }
    return MCP_TXB2CTRL;
 80016ee:	2350      	movs	r3, #80	; 0x50
}
 80016f0:	0018      	movs	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	b002      	add	sp, #8
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <txSidhToRTS>:
/*********************************************************************************************************
** Function name:           txSidhToTxLoad
** Descriptions:            return tx load command according to tx buffer sidh register
*********************************************************************************************************/
uint8_t txSidhToRTS(uint8_t sidh)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	0002      	movs	r2, r0
 8001700:	1dfb      	adds	r3, r7, #7
 8001702:	701a      	strb	r2, [r3, #0]
    switch (sidh) {
 8001704:	1dfb      	adds	r3, r7, #7
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b51      	cmp	r3, #81	; 0x51
 800170a:	d009      	beq.n	8001720 <txSidhToRTS+0x28>
 800170c:	dc0a      	bgt.n	8001724 <txSidhToRTS+0x2c>
 800170e:	2b31      	cmp	r3, #49	; 0x31
 8001710:	d002      	beq.n	8001718 <txSidhToRTS+0x20>
 8001712:	2b41      	cmp	r3, #65	; 0x41
 8001714:	d002      	beq.n	800171c <txSidhToRTS+0x24>
 8001716:	e005      	b.n	8001724 <txSidhToRTS+0x2c>
        case MCP_TXB0SIDH: return MCP_RTS_TX0;
 8001718:	2381      	movs	r3, #129	; 0x81
 800171a:	e004      	b.n	8001726 <txSidhToRTS+0x2e>
        case MCP_TXB1SIDH: return MCP_RTS_TX1;
 800171c:	2382      	movs	r3, #130	; 0x82
 800171e:	e002      	b.n	8001726 <txSidhToRTS+0x2e>
        case MCP_TXB2SIDH: return MCP_RTS_TX2;
 8001720:	2384      	movs	r3, #132	; 0x84
 8001722:	e000      	b.n	8001726 <txSidhToRTS+0x2e>
    }
    return 0;
 8001724:	2300      	movs	r3, #0
}
 8001726:	0018      	movs	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	b002      	add	sp, #8
 800172c:	bd80      	pop	{r7, pc}

0800172e <txSidhToTxLoad>:
/*********************************************************************************************************
** Function name:           txSidhToTxLoad
** Descriptions:            return tx load command according to tx buffer sidh register
*********************************************************************************************************/
uint8_t txSidhToTxLoad(uint8_t sidh)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	0002      	movs	r2, r0
 8001736:	1dfb      	adds	r3, r7, #7
 8001738:	701a      	strb	r2, [r3, #0]
    switch (sidh) {
 800173a:	1dfb      	adds	r3, r7, #7
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b51      	cmp	r3, #81	; 0x51
 8001740:	d009      	beq.n	8001756 <txSidhToTxLoad+0x28>
 8001742:	dc0a      	bgt.n	800175a <txSidhToTxLoad+0x2c>
 8001744:	2b31      	cmp	r3, #49	; 0x31
 8001746:	d002      	beq.n	800174e <txSidhToTxLoad+0x20>
 8001748:	2b41      	cmp	r3, #65	; 0x41
 800174a:	d002      	beq.n	8001752 <txSidhToTxLoad+0x24>
 800174c:	e005      	b.n	800175a <txSidhToTxLoad+0x2c>
        case MCP_TXB0SIDH: return MCP_LOAD_TX0;
 800174e:	2340      	movs	r3, #64	; 0x40
 8001750:	e004      	b.n	800175c <txSidhToTxLoad+0x2e>
        case MCP_TXB1SIDH: return MCP_LOAD_TX1;
 8001752:	2342      	movs	r3, #66	; 0x42
 8001754:	e002      	b.n	800175c <txSidhToTxLoad+0x2e>
        case MCP_TXB2SIDH: return MCP_LOAD_TX2;
 8001756:	2344      	movs	r3, #68	; 0x44
 8001758:	e000      	b.n	800175c <txSidhToTxLoad+0x2e>
    }
    return 0;
 800175a:	2300      	movs	r3, #0
}
 800175c:	0018      	movs	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	b002      	add	sp, #8
 8001762:	bd80      	pop	{r7, pc}

08001764 <txIfFlag>:
/*********************************************************************************************************
** Function name:           txIfFlag
** Descriptions:            return tx interrupt flag
*********************************************************************************************************/
uint8_t txIfFlag(uint8_t i)
 {
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	0002      	movs	r2, r0
 800176c:	1dfb      	adds	r3, r7, #7
 800176e:	701a      	strb	r2, [r3, #0]
    switch (i)
 8001770:	1dfb      	adds	r3, r7, #7
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d009      	beq.n	800178c <txIfFlag+0x28>
 8001778:	dc0a      	bgt.n	8001790 <txIfFlag+0x2c>
 800177a:	2b00      	cmp	r3, #0
 800177c:	d002      	beq.n	8001784 <txIfFlag+0x20>
 800177e:	2b01      	cmp	r3, #1
 8001780:	d002      	beq.n	8001788 <txIfFlag+0x24>
 8001782:	e005      	b.n	8001790 <txIfFlag+0x2c>
	{
        case 0: return MCP_TX0IF;
 8001784:	2304      	movs	r3, #4
 8001786:	e004      	b.n	8001792 <txIfFlag+0x2e>
        case 1: return MCP_TX1IF;
 8001788:	2308      	movs	r3, #8
 800178a:	e002      	b.n	8001792 <txIfFlag+0x2e>
        case 2: return MCP_TX2IF;
 800178c:	2310      	movs	r3, #16
 800178e:	e000      	b.n	8001792 <txIfFlag+0x2e>
    }
    return 0;
 8001790:	2300      	movs	r3, #0
}
 8001792:	0018      	movs	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	b002      	add	sp, #8
 8001798:	bd80      	pop	{r7, pc}

0800179a <txStatusPendingFlag>:
/*********************************************************************************************************
** Function name:           txStatusPendingFlag
** Descriptions:            return buffer tx pending flag on status
*********************************************************************************************************/
uint8_t txStatusPendingFlag(uint8_t i)
 {
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	0002      	movs	r2, r0
 80017a2:	1dfb      	adds	r3, r7, #7
 80017a4:	701a      	strb	r2, [r3, #0]
    switch (i)
 80017a6:	1dfb      	adds	r3, r7, #7
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d009      	beq.n	80017c2 <txStatusPendingFlag+0x28>
 80017ae:	dc0a      	bgt.n	80017c6 <txStatusPendingFlag+0x2c>
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <txStatusPendingFlag+0x20>
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d002      	beq.n	80017be <txStatusPendingFlag+0x24>
 80017b8:	e005      	b.n	80017c6 <txStatusPendingFlag+0x2c>
	{
        case 0: return MCP_STAT_TX0_PENDING;
 80017ba:	2304      	movs	r3, #4
 80017bc:	e004      	b.n	80017c8 <txStatusPendingFlag+0x2e>
        case 1: return MCP_STAT_TX1_PENDING;
 80017be:	2310      	movs	r3, #16
 80017c0:	e002      	b.n	80017c8 <txStatusPendingFlag+0x2e>
        case 2: return MCP_STAT_TX2_PENDING;
 80017c2:	2340      	movs	r3, #64	; 0x40
 80017c4:	e000      	b.n	80017c8 <txStatusPendingFlag+0x2e>
    }
    return 0xff;
 80017c6:	23ff      	movs	r3, #255	; 0xff
}
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b002      	add	sp, #8
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <mcp2515_reset>:
/*********************************************************************************************************
** Function name:           mcp2515_reset
** Descriptions:            reset the device
*********************************************************************************************************/
void mcp2515_reset(CanbusConfig_t* canCfg)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
    canCfg->ChipSelectFp();
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	4798      	blx	r3
    canCfg->SPIReadWriteFp(MCP_RESET);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	20c0      	movs	r0, #192	; 0xc0
 80017e4:	4798      	blx	r3
    canCfg->ChipUnSelectFp();
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	4798      	blx	r3

    HW_DELAY(10);
 80017ec:	200a      	movs	r0, #10
 80017ee:	f001 fc19 	bl	8003024 <HAL_Delay>
}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b002      	add	sp, #8
 80017f8:	bd80      	pop	{r7, pc}

080017fa <mcp2515_readRegister>:
/*********************************************************************************************************
** Function name:           mcp2515_readRegister
** Descriptions:            read register
*********************************************************************************************************/
uint8_t mcp2515_readRegister(CanbusConfig_t* canCfg,const uint8_t address)
 {
 80017fa:	b5b0      	push	{r4, r5, r7, lr}
 80017fc:	b084      	sub	sp, #16
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	000a      	movs	r2, r1
 8001804:	1cfb      	adds	r3, r7, #3
 8001806:	701a      	strb	r2, [r3, #0]
    uint8_t ret;

    canCfg->ChipSelectFp();
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	695b      	ldr	r3, [r3, #20]
 800180c:	4798      	blx	r3
    canCfg->SPIReadWriteFp(MCP_READ);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	2003      	movs	r0, #3
 8001814:	4798      	blx	r3
    canCfg->SPIReadWriteFp(address);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	1cfa      	adds	r2, r7, #3
 800181c:	7812      	ldrb	r2, [r2, #0]
 800181e:	0010      	movs	r0, r2
 8001820:	4798      	blx	r3
    ret = canCfg->SPIReadFp();
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	250f      	movs	r5, #15
 8001828:	197c      	adds	r4, r7, r5
 800182a:	4798      	blx	r3
 800182c:	0003      	movs	r3, r0
 800182e:	7023      	strb	r3, [r4, #0]
    canCfg->ChipUnSelectFp();
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	4798      	blx	r3

    return ret;
 8001836:	197b      	adds	r3, r7, r5
 8001838:	781b      	ldrb	r3, [r3, #0]
}
 800183a:	0018      	movs	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	b004      	add	sp, #16
 8001840:	bdb0      	pop	{r4, r5, r7, pc}

08001842 <mcp2515_setRegister>:
/*********************************************************************************************************
** Function name:           mcp2515_setRegister
** Descriptions:            set register
*********************************************************************************************************/
void mcp2515_setRegister(CanbusConfig_t* canCfg,const uint8_t address, const uint8_t value)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	0008      	movs	r0, r1
 800184c:	0011      	movs	r1, r2
 800184e:	1cfb      	adds	r3, r7, #3
 8001850:	1c02      	adds	r2, r0, #0
 8001852:	701a      	strb	r2, [r3, #0]
 8001854:	1cbb      	adds	r3, r7, #2
 8001856:	1c0a      	adds	r2, r1, #0
 8001858:	701a      	strb	r2, [r3, #0]
    canCfg->ChipSelectFp();
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	4798      	blx	r3
    canCfg->SPIReadWriteFp(MCP_WRITE);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	2002      	movs	r0, #2
 8001866:	4798      	blx	r3
    canCfg->SPIReadWriteFp(address);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	69db      	ldr	r3, [r3, #28]
 800186c:	1cfa      	adds	r2, r7, #3
 800186e:	7812      	ldrb	r2, [r2, #0]
 8001870:	0010      	movs	r0, r2
 8001872:	4798      	blx	r3
    canCfg->SPIReadWriteFp(value);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	1cba      	adds	r2, r7, #2
 800187a:	7812      	ldrb	r2, [r2, #0]
 800187c:	0010      	movs	r0, r2
 800187e:	4798      	blx	r3
    canCfg->ChipUnSelectFp();
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	4798      	blx	r3
}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	46bd      	mov	sp, r7
 800188a:	b002      	add	sp, #8
 800188c:	bd80      	pop	{r7, pc}

0800188e <mcp2515_modifyRegister>:
/*********************************************************************************************************
** Function name:           mcp2515_modifyRegister
** Descriptions:            set bit of one register
*********************************************************************************************************/
void mcp2515_modifyRegister(CanbusConfig_t* canCfg,const uint8_t address, const uint8_t mask, const uint8_t data)
{
 800188e:	b590      	push	{r4, r7, lr}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	000c      	movs	r4, r1
 8001898:	0010      	movs	r0, r2
 800189a:	0019      	movs	r1, r3
 800189c:	1cfb      	adds	r3, r7, #3
 800189e:	1c22      	adds	r2, r4, #0
 80018a0:	701a      	strb	r2, [r3, #0]
 80018a2:	1cbb      	adds	r3, r7, #2
 80018a4:	1c02      	adds	r2, r0, #0
 80018a6:	701a      	strb	r2, [r3, #0]
 80018a8:	1c7b      	adds	r3, r7, #1
 80018aa:	1c0a      	adds	r2, r1, #0
 80018ac:	701a      	strb	r2, [r3, #0]
    canCfg->ChipSelectFp();
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	4798      	blx	r3
    canCfg->SPIReadWriteFp(MCP_BITMOD);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	2005      	movs	r0, #5
 80018ba:	4798      	blx	r3
    canCfg->SPIReadWriteFp(address);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	1cfa      	adds	r2, r7, #3
 80018c2:	7812      	ldrb	r2, [r2, #0]
 80018c4:	0010      	movs	r0, r2
 80018c6:	4798      	blx	r3
    canCfg->SPIReadWriteFp(mask);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	1cba      	adds	r2, r7, #2
 80018ce:	7812      	ldrb	r2, [r2, #0]
 80018d0:	0010      	movs	r0, r2
 80018d2:	4798      	blx	r3
    canCfg->SPIReadWriteFp(data);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	1c7a      	adds	r2, r7, #1
 80018da:	7812      	ldrb	r2, [r2, #0]
 80018dc:	0010      	movs	r0, r2
 80018de:	4798      	blx	r3
    canCfg->ChipUnSelectFp();
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	4798      	blx	r3
}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b003      	add	sp, #12
 80018ec:	bd90      	pop	{r4, r7, pc}

080018ee <mcp2515_readStatus>:
/*********************************************************************************************************
** Function name:           mcp2515_readStatus
** Descriptions:            read mcp2515's Status
*********************************************************************************************************/
uint8_t mcp2515_readStatus(CanbusConfig_t* canCfg)
{
 80018ee:	b5b0      	push	{r4, r5, r7, lr}
 80018f0:	b084      	sub	sp, #16
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
    uint8_t i;

    canCfg->ChipSelectFp();
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	4798      	blx	r3

    canCfg->SPIReadWriteFp(MCP_READ_STATUS);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	20a0      	movs	r0, #160	; 0xa0
 8001902:	4798      	blx	r3

    i = canCfg->SPIReadFp();
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	250f      	movs	r5, #15
 800190a:	197c      	adds	r4, r7, r5
 800190c:	4798      	blx	r3
 800190e:	0003      	movs	r3, r0
 8001910:	7023      	strb	r3, [r4, #0]

    canCfg->ChipUnSelectFp();
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	4798      	blx	r3

    return i;
 8001918:	197b      	adds	r3, r7, r5
 800191a:	781b      	ldrb	r3, [r3, #0]
}
 800191c:	0018      	movs	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	b004      	add	sp, #16
 8001922:	bdb0      	pop	{r4, r5, r7, pc}

08001924 <setMode>:
/*********************************************************************************************************
** Function name:           setMode
** Descriptions:            Sets control mode
*********************************************************************************************************/
uint8_t setMode(CanbusConfig_t* canCfg,const uint8_t opMode)
 {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	000a      	movs	r2, r1
 800192e:	1cfb      	adds	r3, r7, #3
 8001930:	701a      	strb	r2, [r3, #0]
    if (opMode != MODE_SLEEP)
 8001932:	1cfb      	adds	r3, r7, #3
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b20      	cmp	r3, #32
 8001938:	d003      	beq.n	8001942 <setMode+0x1e>
	{ // if going to sleep, the value stored in opMode is not changed so that we can return to it later
    	canCfg->mcpMode = opMode;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	1cfa      	adds	r2, r7, #3
 800193e:	7812      	ldrb	r2, [r2, #0]
 8001940:	725a      	strb	r2, [r3, #9]
    }

    return mcp2515_setCANCTRL_Mode(canCfg,opMode);
 8001942:	1cfb      	adds	r3, r7, #3
 8001944:	781a      	ldrb	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	0011      	movs	r1, r2
 800194a:	0018      	movs	r0, r3
 800194c:	f000 f818 	bl	8001980 <mcp2515_setCANCTRL_Mode>
 8001950:	0003      	movs	r3, r0
}
 8001952:	0018      	movs	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	b002      	add	sp, #8
 8001958:	bd80      	pop	{r7, pc}

0800195a <getMode>:
/*********************************************************************************************************
** Function name:           getMode
** Descriptions:            Returns current control mode
*********************************************************************************************************/
uint8_t getMode(CanbusConfig_t* canCfg)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
    return (mcp2515_readRegister(canCfg,MCP_CANSTAT) & MODE_MASK);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	210e      	movs	r1, #14
 8001966:	0018      	movs	r0, r3
 8001968:	f7ff ff47 	bl	80017fa <mcp2515_readRegister>
 800196c:	0003      	movs	r3, r0
 800196e:	001a      	movs	r2, r3
 8001970:	231f      	movs	r3, #31
 8001972:	439a      	bics	r2, r3
 8001974:	0013      	movs	r3, r2
 8001976:	b2db      	uxtb	r3, r3
}
 8001978:	0018      	movs	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	b002      	add	sp, #8
 800197e:	bd80      	pop	{r7, pc}

08001980 <mcp2515_setCANCTRL_Mode>:
/*********************************************************************************************************
** Function name:           mcp2515_setCANCTRL_Mode
** Descriptions:            set control mode
*********************************************************************************************************/
uint8_t mcp2515_setCANCTRL_Mode(CanbusConfig_t* canCfg,const uint8_t newmode)
 {
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	000a      	movs	r2, r1
 800198a:	1cfb      	adds	r3, r7, #3
 800198c:	701a      	strb	r2, [r3, #0]
    // If the chip is asleep and we want to change mode then a manual wake needs to be done
    // This is done by setting the wake up interrupt flag
    // This undocumented trick was found at https://github.com/mkleemann/can/blob/master/can_sleep_mcp2515.c


    if ((getMode(canCfg)) == MODE_SLEEP && (newmode != MODE_SLEEP))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	0018      	movs	r0, r3
 8001992:	f7ff ffe2 	bl	800195a <getMode>
 8001996:	0003      	movs	r3, r0
 8001998:	2b20      	cmp	r3, #32
 800199a:	d133      	bne.n	8001a04 <mcp2515_setCANCTRL_Mode+0x84>
 800199c:	1cfb      	adds	r3, r7, #3
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b20      	cmp	r3, #32
 80019a2:	d02f      	beq.n	8001a04 <mcp2515_setCANCTRL_Mode+0x84>
	{
        // Make sure wake interrupt is enabled
        uint8_t wakeIntEnabled = (mcp2515_readRegister(canCfg,MCP_CANINTE) & MCP_WAKIF);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	212b      	movs	r1, #43	; 0x2b
 80019a8:	0018      	movs	r0, r3
 80019aa:	f7ff ff26 	bl	80017fa <mcp2515_readRegister>
 80019ae:	0003      	movs	r3, r0
 80019b0:	0019      	movs	r1, r3
 80019b2:	200f      	movs	r0, #15
 80019b4:	183b      	adds	r3, r7, r0
 80019b6:	2240      	movs	r2, #64	; 0x40
 80019b8:	400a      	ands	r2, r1
 80019ba:	701a      	strb	r2, [r3, #0]

        if (!wakeIntEnabled)
 80019bc:	183b      	adds	r3, r7, r0
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d105      	bne.n	80019d0 <mcp2515_setCANCTRL_Mode+0x50>
		{
            mcp2515_modifyRegister(canCfg,MCP_CANINTE, MCP_WAKIF, MCP_WAKIF);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	2340      	movs	r3, #64	; 0x40
 80019c8:	2240      	movs	r2, #64	; 0x40
 80019ca:	212b      	movs	r1, #43	; 0x2b
 80019cc:	f7ff ff5f 	bl	800188e <mcp2515_modifyRegister>
        }

        // Set wake flag (this does the actual waking up)
        mcp2515_modifyRegister(canCfg,MCP_CANINTF, MCP_WAKIF, MCP_WAKIF);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	2340      	movs	r3, #64	; 0x40
 80019d4:	2240      	movs	r2, #64	; 0x40
 80019d6:	212c      	movs	r1, #44	; 0x2c
 80019d8:	f7ff ff59 	bl	800188e <mcp2515_modifyRegister>

        // If the chip is not connected to a CAN bus (or the bus has no other powered nodes) it will sometimes trigger the wake interrupt as soon
        // as it's put to sleep, but it will stay in SLEEP mode instead of automatically switching to LISTENONLY mode.
        // In this situation the mode needs to be manually set to LISTENONLY.

        if (mcp2515_requestNewMode(canCfg,MODE_LISTENONLY) != MCP2515_OK)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2160      	movs	r1, #96	; 0x60
 80019e0:	0018      	movs	r0, r3
 80019e2:	f000 f821 	bl	8001a28 <mcp2515_requestNewMode>
 80019e6:	1e03      	subs	r3, r0, #0
 80019e8:	d001      	beq.n	80019ee <mcp2515_setCANCTRL_Mode+0x6e>
		{
            return MCP2515_FAIL;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e018      	b.n	8001a20 <mcp2515_setCANCTRL_Mode+0xa0>
        }

        // Turn wake interrupt back off if it was originally off
        if (!wakeIntEnabled)
 80019ee:	230f      	movs	r3, #15
 80019f0:	18fb      	adds	r3, r7, r3
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d105      	bne.n	8001a04 <mcp2515_setCANCTRL_Mode+0x84>
		{
            mcp2515_modifyRegister(canCfg,MCP_CANINTE, MCP_WAKIF, 0);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	2300      	movs	r3, #0
 80019fc:	2240      	movs	r2, #64	; 0x40
 80019fe:	212b      	movs	r1, #43	; 0x2b
 8001a00:	f7ff ff45 	bl	800188e <mcp2515_modifyRegister>
        }
    }

    // Clear wake flag
    mcp2515_modifyRegister(canCfg,MCP_CANINTF, MCP_WAKIF, 0);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	2300      	movs	r3, #0
 8001a08:	2240      	movs	r2, #64	; 0x40
 8001a0a:	212c      	movs	r1, #44	; 0x2c
 8001a0c:	f7ff ff3f 	bl	800188e <mcp2515_modifyRegister>

    return mcp2515_requestNewMode(canCfg,newmode);
 8001a10:	1cfb      	adds	r3, r7, #3
 8001a12:	781a      	ldrb	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	0011      	movs	r1, r2
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f000 f805 	bl	8001a28 <mcp2515_requestNewMode>
 8001a1e:	0003      	movs	r3, r0
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b004      	add	sp, #16
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <mcp2515_requestNewMode>:
/*********************************************************************************************************
** Function name:           mcp2515_requestNewMode
** Descriptions:            Set control mode
*********************************************************************************************************/
uint8_t mcp2515_requestNewMode(CanbusConfig_t* canCfg,const uint8_t newmode)
{
 8001a28:	b5b0      	push	{r4, r5, r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	000a      	movs	r2, r1
 8001a32:	1cfb      	adds	r3, r7, #3
 8001a34:	701a      	strb	r2, [r3, #0]
    unsigned long startTime = GET_TICK_MS();
 8001a36:	f001 faeb 	bl	8003010 <HAL_GetTick>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	60fb      	str	r3, [r7, #12]
    // Spam new mode request and wait for the operation  to complete
    while (1)
	{
        // Request new mode
        // This is inside the loop as sometimes requesting the new mode once doesn't work (usually when attempting to sleep)
        mcp2515_modifyRegister(canCfg,MCP_CANCTRL, MODE_MASK, newmode);
 8001a3e:	1cfb      	adds	r3, r7, #3
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	22e0      	movs	r2, #224	; 0xe0
 8001a46:	210f      	movs	r1, #15
 8001a48:	f7ff ff21 	bl	800188e <mcp2515_modifyRegister>

        uint8_t statReg = mcp2515_readRegister(canCfg,MCP_CANSTAT);
 8001a4c:	250b      	movs	r5, #11
 8001a4e:	197c      	adds	r4, r7, r5
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	210e      	movs	r1, #14
 8001a54:	0018      	movs	r0, r3
 8001a56:	f7ff fed0 	bl	80017fa <mcp2515_readRegister>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	7023      	strb	r3, [r4, #0]

        if ((statReg & MODE_MASK) == newmode)
 8001a5e:	197b      	adds	r3, r7, r5
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	22e0      	movs	r2, #224	; 0xe0
 8001a64:	401a      	ands	r2, r3
 8001a66:	1cfb      	adds	r3, r7, #3
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d101      	bne.n	8001a72 <mcp2515_requestNewMode+0x4a>
		{ // We're now in the new mode
            return MCP2515_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e007      	b.n	8001a82 <mcp2515_requestNewMode+0x5a>
        }
		else if ((GET_TICK_MS() - startTime) > 200)
 8001a72:	f001 facd 	bl	8003010 <HAL_GetTick>
 8001a76:	0002      	movs	r2, r0
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2bc8      	cmp	r3, #200	; 0xc8
 8001a7e:	d9de      	bls.n	8001a3e <mcp2515_requestNewMode+0x16>
		{ // Wait no more than 200ms for the operation to complete
            return MCP2515_FAIL;
 8001a80:	2301      	movs	r3, #1
        }
    }
}
 8001a82:	0018      	movs	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	b004      	add	sp, #16
 8001a88:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001a8c <mcp2515_configRate>:
/*********************************************************************************************************
** Function name:           mcp2515_configRate
** Descriptions:            set baudrate
*********************************************************************************************************/
uint8_t mcp2515_configRate(CanbusConfig_t* canCfg,const uint8_t canSpeed, const uint8_t clock)
 {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	0008      	movs	r0, r1
 8001a96:	0011      	movs	r1, r2
 8001a98:	1cfb      	adds	r3, r7, #3
 8001a9a:	1c02      	adds	r2, r0, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
 8001a9e:	1cbb      	adds	r3, r7, #2
 8001aa0:	1c0a      	adds	r2, r1, #0
 8001aa2:	701a      	strb	r2, [r3, #0]
    uint8_t set, cfg1, cfg2, cfg3;
    set = 1;
 8001aa4:	230f      	movs	r3, #15
 8001aa6:	18fb      	adds	r3, r7, r3
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	701a      	strb	r2, [r3, #0]
    switch (clock) {
 8001aac:	1cbb      	adds	r3, r7, #2
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d100      	bne.n	8001ab6 <mcp2515_configRate+0x2a>
 8001ab4:	e1f3      	b.n	8001e9e <mcp2515_configRate+0x412>
 8001ab6:	dd00      	ble.n	8001aba <mcp2515_configRate+0x2e>
 8001ab8:	e2b7      	b.n	800202a <mcp2515_configRate+0x59e>
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d003      	beq.n	8001ac6 <mcp2515_configRate+0x3a>
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d100      	bne.n	8001ac4 <mcp2515_configRate+0x38>
 8001ac2:	e107      	b.n	8001cd4 <mcp2515_configRate+0x248>
 8001ac4:	e2b1      	b.n	800202a <mcp2515_configRate+0x59e>
        case (MCP_16MHz) :
            switch (canSpeed) {
 8001ac6:	1cfb      	adds	r3, r7, #3
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b13      	cmp	r3, #19
 8001acc:	d900      	bls.n	8001ad0 <mcp2515_configRate+0x44>
 8001ace:	e0fb      	b.n	8001cc8 <mcp2515_configRate+0x23c>
 8001ad0:	009a      	lsls	r2, r3, #2
 8001ad2:	4be7      	ldr	r3, [pc, #924]	; (8001e70 <mcp2515_configRate+0x3e4>)
 8001ad4:	18d3      	adds	r3, r2, r3
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	469f      	mov	pc, r3
                case (CAN_5KBPS):
                    cfg1 = MCP_16MHz_5kBPS_CFG1;
 8001ada:	230e      	movs	r3, #14
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	223f      	movs	r2, #63	; 0x3f
 8001ae0:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_16MHz_5kBPS_CFG2;
 8001ae2:	230d      	movs	r3, #13
 8001ae4:	18fb      	adds	r3, r7, r3
 8001ae6:	22ff      	movs	r2, #255	; 0xff
 8001ae8:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_16MHz_5kBPS_CFG3;
 8001aea:	230c      	movs	r3, #12
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	2287      	movs	r2, #135	; 0x87
 8001af0:	701a      	strb	r2, [r3, #0]
                    break;
 8001af2:	e0ee      	b.n	8001cd2 <mcp2515_configRate+0x246>

                case (CAN_10KBPS):
                    cfg1 = MCP_16MHz_10kBPS_CFG1;
 8001af4:	230e      	movs	r3, #14
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	221f      	movs	r2, #31
 8001afa:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_16MHz_10kBPS_CFG2;
 8001afc:	230d      	movs	r3, #13
 8001afe:	18fb      	adds	r3, r7, r3
 8001b00:	22ff      	movs	r2, #255	; 0xff
 8001b02:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_16MHz_10kBPS_CFG3;
 8001b04:	230c      	movs	r3, #12
 8001b06:	18fb      	adds	r3, r7, r3
 8001b08:	2287      	movs	r2, #135	; 0x87
 8001b0a:	701a      	strb	r2, [r3, #0]
                    break;
 8001b0c:	e0e1      	b.n	8001cd2 <mcp2515_configRate+0x246>

                case (CAN_20KBPS):
                    cfg1 = MCP_16MHz_20kBPS_CFG1;
 8001b0e:	230e      	movs	r3, #14
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	220f      	movs	r2, #15
 8001b14:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_16MHz_20kBPS_CFG2;
 8001b16:	230d      	movs	r3, #13
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	22ff      	movs	r2, #255	; 0xff
 8001b1c:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_16MHz_20kBPS_CFG3;
 8001b1e:	230c      	movs	r3, #12
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	2287      	movs	r2, #135	; 0x87
 8001b24:	701a      	strb	r2, [r3, #0]
                    break;
 8001b26:	e0d4      	b.n	8001cd2 <mcp2515_configRate+0x246>

                case (CAN_25KBPS):
                    cfg1 = MCP_16MHz_25kBPS_CFG1;
 8001b28:	230e      	movs	r3, #14
 8001b2a:	18fb      	adds	r3, r7, r3
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_16MHz_25kBPS_CFG2;
 8001b30:	230d      	movs	r3, #13
 8001b32:	18fb      	adds	r3, r7, r3
 8001b34:	22ba      	movs	r2, #186	; 0xba
 8001b36:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_16MHz_25kBPS_CFG3;
 8001b38:	230c      	movs	r3, #12
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	2207      	movs	r2, #7
 8001b3e:	701a      	strb	r2, [r3, #0]
                    break;
 8001b40:	e0c7      	b.n	8001cd2 <mcp2515_configRate+0x246>

                case (CAN_31K25BPS):
                    cfg1 = MCP_16MHz_31k25BPS_CFG1;
 8001b42:	230e      	movs	r3, #14
 8001b44:	18fb      	adds	r3, r7, r3
 8001b46:	220f      	movs	r2, #15
 8001b48:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_16MHz_31k25BPS_CFG2;
 8001b4a:	230d      	movs	r3, #13
 8001b4c:	18fb      	adds	r3, r7, r3
 8001b4e:	22f1      	movs	r2, #241	; 0xf1
 8001b50:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_16MHz_31k25BPS_CFG3;
 8001b52:	230c      	movs	r3, #12
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	2285      	movs	r2, #133	; 0x85
 8001b58:	701a      	strb	r2, [r3, #0]
                    break;
 8001b5a:	e0ba      	b.n	8001cd2 <mcp2515_configRate+0x246>

                case (CAN_33KBPS):
                    cfg1 = MCP_16MHz_33kBPS_CFG1;
 8001b5c:	230e      	movs	r3, #14
 8001b5e:	18fb      	adds	r3, r7, r3
 8001b60:	2209      	movs	r2, #9
 8001b62:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_16MHz_33kBPS_CFG2;
 8001b64:	230d      	movs	r3, #13
 8001b66:	18fb      	adds	r3, r7, r3
 8001b68:	22be      	movs	r2, #190	; 0xbe
 8001b6a:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_16MHz_33kBPS_CFG3;
 8001b6c:	230c      	movs	r3, #12
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	2207      	movs	r2, #7
 8001b72:	701a      	strb	r2, [r3, #0]
                    break;
 8001b74:	e0ad      	b.n	8001cd2 <mcp2515_configRate+0x246>

                case (CAN_40KBPS):
                    cfg1 = MCP_16MHz_40kBPS_CFG1;
 8001b76:	230e      	movs	r3, #14
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	2207      	movs	r2, #7
 8001b7c:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_16MHz_40kBPS_CFG2;
 8001b7e:	230d      	movs	r3, #13
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	22ff      	movs	r2, #255	; 0xff
 8001b84:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_16MHz_40kBPS_CFG3;
 8001b86:	230c      	movs	r3, #12
 8001b88:	18fb      	adds	r3, r7, r3
 8001b8a:	2287      	movs	r2, #135	; 0x87
 8001b8c:	701a      	strb	r2, [r3, #0]
                    break;
 8001b8e:	e0a0      	b.n	8001cd2 <mcp2515_configRate+0x246>

                case (CAN_50KBPS):
                    cfg1 = MCP_16MHz_50kBPS_CFG1;
 8001b90:	230e      	movs	r3, #14
 8001b92:	18fb      	adds	r3, r7, r3
 8001b94:	2207      	movs	r2, #7
 8001b96:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_16MHz_50kBPS_CFG2;
 8001b98:	230d      	movs	r3, #13
 8001b9a:	18fb      	adds	r3, r7, r3
 8001b9c:	22fa      	movs	r2, #250	; 0xfa
 8001b9e:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_16MHz_50kBPS_CFG3;
 8001ba0:	230c      	movs	r3, #12
 8001ba2:	18fb      	adds	r3, r7, r3
 8001ba4:	2287      	movs	r2, #135	; 0x87
 8001ba6:	701a      	strb	r2, [r3, #0]
                    break;
 8001ba8:	e093      	b.n	8001cd2 <mcp2515_configRate+0x246>

                case (CAN_80KBPS):
                    cfg1 = MCP_16MHz_80kBPS_CFG1;
 8001baa:	230e      	movs	r3, #14
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	2203      	movs	r2, #3
 8001bb0:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_16MHz_80kBPS_CFG2;
 8001bb2:	230d      	movs	r3, #13
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	22ff      	movs	r2, #255	; 0xff
 8001bb8:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_16MHz_80kBPS_CFG3;
 8001bba:	230c      	movs	r3, #12
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	2287      	movs	r2, #135	; 0x87
 8001bc0:	701a      	strb	r2, [r3, #0]
                    break;
 8001bc2:	e086      	b.n	8001cd2 <mcp2515_configRate+0x246>

                case (CAN_83K3BPS):
                    cfg1 = MCP_16MHz_83k3BPS_CFG1;
 8001bc4:	230e      	movs	r3, #14
 8001bc6:	18fb      	adds	r3, r7, r3
 8001bc8:	2203      	movs	r2, #3
 8001bca:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_16MHz_83k3BPS_CFG2;
 8001bcc:	230d      	movs	r3, #13
 8001bce:	18fb      	adds	r3, r7, r3
 8001bd0:	22be      	movs	r2, #190	; 0xbe
 8001bd2:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_16MHz_83k3BPS_CFG3;
 8001bd4:	230c      	movs	r3, #12
 8001bd6:	18fb      	adds	r3, r7, r3
 8001bd8:	2207      	movs	r2, #7
 8001bda:	701a      	strb	r2, [r3, #0]
                    break;
 8001bdc:	e079      	b.n	8001cd2 <mcp2515_configRate+0x246>

                case (CAN_95KBPS):
                    cfg1 = MCP_16MHz_95kBPS_CFG1;
 8001bde:	230e      	movs	r3, #14
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	2203      	movs	r2, #3
 8001be4:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_16MHz_95kBPS_CFG2;
 8001be6:	230d      	movs	r3, #13
 8001be8:	18fb      	adds	r3, r7, r3
 8001bea:	22ad      	movs	r2, #173	; 0xad
 8001bec:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_16MHz_95kBPS_CFG3;
 8001bee:	230c      	movs	r3, #12
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	2207      	movs	r2, #7
 8001bf4:	701a      	strb	r2, [r3, #0]
                    break;
 8001bf6:	e06c      	b.n	8001cd2 <mcp2515_configRate+0x246>

                case (CAN_100KBPS):
                    cfg1 = MCP_16MHz_100kBPS_CFG1;
 8001bf8:	230e      	movs	r3, #14
 8001bfa:	18fb      	adds	r3, r7, r3
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_16MHz_100kBPS_CFG2;
 8001c00:	230d      	movs	r3, #13
 8001c02:	18fb      	adds	r3, r7, r3
 8001c04:	22fa      	movs	r2, #250	; 0xfa
 8001c06:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_16MHz_100kBPS_CFG3;
 8001c08:	230c      	movs	r3, #12
 8001c0a:	18fb      	adds	r3, r7, r3
 8001c0c:	2287      	movs	r2, #135	; 0x87
 8001c0e:	701a      	strb	r2, [r3, #0]
                    break;
 8001c10:	e05f      	b.n	8001cd2 <mcp2515_configRate+0x246>

                case (CAN_125KBPS):
                    cfg1 = MCP_16MHz_125kBPS_CFG1;
 8001c12:	230e      	movs	r3, #14
 8001c14:	18fb      	adds	r3, r7, r3
 8001c16:	2203      	movs	r2, #3
 8001c18:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_16MHz_125kBPS_CFG2;
 8001c1a:	230d      	movs	r3, #13
 8001c1c:	18fb      	adds	r3, r7, r3
 8001c1e:	22f0      	movs	r2, #240	; 0xf0
 8001c20:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_16MHz_125kBPS_CFG3;
 8001c22:	230c      	movs	r3, #12
 8001c24:	18fb      	adds	r3, r7, r3
 8001c26:	2286      	movs	r2, #134	; 0x86
 8001c28:	701a      	strb	r2, [r3, #0]
                    break;
 8001c2a:	e052      	b.n	8001cd2 <mcp2515_configRate+0x246>

                case (CAN_200KBPS):
                    cfg1 = MCP_16MHz_200kBPS_CFG1;
 8001c2c:	230e      	movs	r3, #14
 8001c2e:	18fb      	adds	r3, r7, r3
 8001c30:	2201      	movs	r2, #1
 8001c32:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_16MHz_200kBPS_CFG2;
 8001c34:	230d      	movs	r3, #13
 8001c36:	18fb      	adds	r3, r7, r3
 8001c38:	22fa      	movs	r2, #250	; 0xfa
 8001c3a:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_16MHz_200kBPS_CFG3;
 8001c3c:	230c      	movs	r3, #12
 8001c3e:	18fb      	adds	r3, r7, r3
 8001c40:	2287      	movs	r2, #135	; 0x87
 8001c42:	701a      	strb	r2, [r3, #0]
                    break;
 8001c44:	e045      	b.n	8001cd2 <mcp2515_configRate+0x246>

                case (CAN_250KBPS):
                    cfg1 = MCP_16MHz_250kBPS_CFG1;
 8001c46:	230e      	movs	r3, #14
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	2241      	movs	r2, #65	; 0x41
 8001c4c:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_16MHz_250kBPS_CFG2;
 8001c4e:	230d      	movs	r3, #13
 8001c50:	18fb      	adds	r3, r7, r3
 8001c52:	22f1      	movs	r2, #241	; 0xf1
 8001c54:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_16MHz_250kBPS_CFG3;
 8001c56:	230c      	movs	r3, #12
 8001c58:	18fb      	adds	r3, r7, r3
 8001c5a:	2285      	movs	r2, #133	; 0x85
 8001c5c:	701a      	strb	r2, [r3, #0]
                    break;
 8001c5e:	e038      	b.n	8001cd2 <mcp2515_configRate+0x246>

                case (CAN_500KBPS):
                    cfg1 = MCP_16MHz_500kBPS_CFG1;
 8001c60:	230e      	movs	r3, #14
 8001c62:	18fb      	adds	r3, r7, r3
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_16MHz_500kBPS_CFG2;
 8001c68:	230d      	movs	r3, #13
 8001c6a:	18fb      	adds	r3, r7, r3
 8001c6c:	22f0      	movs	r2, #240	; 0xf0
 8001c6e:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_16MHz_500kBPS_CFG3;
 8001c70:	230c      	movs	r3, #12
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	2286      	movs	r2, #134	; 0x86
 8001c76:	701a      	strb	r2, [r3, #0]
                    break;
 8001c78:	e02b      	b.n	8001cd2 <mcp2515_configRate+0x246>

                case (CAN_666KBPS):
                    cfg1 = MCP_16MHz_666kBPS_CFG1;
 8001c7a:	230e      	movs	r3, #14
 8001c7c:	18fb      	adds	r3, r7, r3
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_16MHz_666kBPS_CFG2;
 8001c82:	230d      	movs	r3, #13
 8001c84:	18fb      	adds	r3, r7, r3
 8001c86:	22a0      	movs	r2, #160	; 0xa0
 8001c88:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_16MHz_666kBPS_CFG3;
 8001c8a:	230c      	movs	r3, #12
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	2204      	movs	r2, #4
 8001c90:	701a      	strb	r2, [r3, #0]
                    break;
 8001c92:	e01e      	b.n	8001cd2 <mcp2515_configRate+0x246>

                case (CAN_800KBPS) :
                    cfg1 = MCP_16MHz_800kBPS_CFG1;
 8001c94:	230e      	movs	r3, #14
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	2240      	movs	r2, #64	; 0x40
 8001c9a:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_16MHz_800kBPS_CFG2;
 8001c9c:	230d      	movs	r3, #13
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	2292      	movs	r2, #146	; 0x92
 8001ca2:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_16MHz_800kBPS_CFG3;
 8001ca4:	230c      	movs	r3, #12
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	2202      	movs	r2, #2
 8001caa:	701a      	strb	r2, [r3, #0]
                    break;
 8001cac:	e011      	b.n	8001cd2 <mcp2515_configRate+0x246>

                case (CAN_1000KBPS):
                    cfg1 = MCP_16MHz_1000kBPS_CFG1;
 8001cae:	230e      	movs	r3, #14
 8001cb0:	18fb      	adds	r3, r7, r3
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_16MHz_1000kBPS_CFG2;
 8001cb6:	230d      	movs	r3, #13
 8001cb8:	18fb      	adds	r3, r7, r3
 8001cba:	22d0      	movs	r2, #208	; 0xd0
 8001cbc:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_16MHz_1000kBPS_CFG3;
 8001cbe:	230c      	movs	r3, #12
 8001cc0:	18fb      	adds	r3, r7, r3
 8001cc2:	2282      	movs	r2, #130	; 0x82
 8001cc4:	701a      	strb	r2, [r3, #0]
                    break;
 8001cc6:	e004      	b.n	8001cd2 <mcp2515_configRate+0x246>

                default:
                    set = 0;
 8001cc8:	230f      	movs	r3, #15
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
                    break;
 8001cd0:	46c0      	nop			; (mov r8, r8)
            }
            break;
 8001cd2:	e1af      	b.n	8002034 <mcp2515_configRate+0x5a8>

        case (MCP_12MHz) :
            switch (canSpeed) {
 8001cd4:	1cfb      	adds	r3, r7, #3
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	3b03      	subs	r3, #3
 8001cda:	2b10      	cmp	r3, #16
 8001cdc:	d900      	bls.n	8001ce0 <mcp2515_configRate+0x254>
 8001cde:	e0d8      	b.n	8001e92 <mcp2515_configRate+0x406>
 8001ce0:	009a      	lsls	r2, r3, #2
 8001ce2:	4b64      	ldr	r3, [pc, #400]	; (8001e74 <mcp2515_configRate+0x3e8>)
 8001ce4:	18d3      	adds	r3, r2, r3
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	469f      	mov	pc, r3
                case (CAN_20KBPS) :
                    cfg1 = MCP_12MHz_20kBPS_CFG1;
 8001cea:	230e      	movs	r3, #14
 8001cec:	18fb      	adds	r3, r7, r3
 8001cee:	220c      	movs	r2, #12
 8001cf0:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_12MHz_20kBPS_CFG2;
 8001cf2:	230d      	movs	r3, #13
 8001cf4:	18fb      	adds	r3, r7, r3
 8001cf6:	22bf      	movs	r2, #191	; 0xbf
 8001cf8:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_12MHz_20kBPS_CFG3;
 8001cfa:	230c      	movs	r3, #12
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	2205      	movs	r2, #5
 8001d00:	701a      	strb	r2, [r3, #0]
                    break;
 8001d02:	e0cb      	b.n	8001e9c <mcp2515_configRate+0x410>

                case (CAN_25KBPS) :
                    cfg1 = MCP_12MHz_25kBPS_CFG1;
 8001d04:	230e      	movs	r3, #14
 8001d06:	18fb      	adds	r3, r7, r3
 8001d08:	220b      	movs	r2, #11
 8001d0a:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_12MHz_25kBPS_CFG2;
 8001d0c:	230d      	movs	r3, #13
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	22b6      	movs	r2, #182	; 0xb6
 8001d12:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_12MHz_25kBPS_CFG3;
 8001d14:	230c      	movs	r3, #12
 8001d16:	18fb      	adds	r3, r7, r3
 8001d18:	2204      	movs	r2, #4
 8001d1a:	701a      	strb	r2, [r3, #0]
                    break;
 8001d1c:	e0be      	b.n	8001e9c <mcp2515_configRate+0x410>

                case (CAN_31K25BPS) :
                    cfg1 = MCP_12MHz_31k25BPS_CFG1;
 8001d1e:	230e      	movs	r3, #14
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	220b      	movs	r2, #11
 8001d24:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_12MHz_31k25BPS_CFG2;
 8001d26:	230d      	movs	r3, #13
 8001d28:	18fb      	adds	r3, r7, r3
 8001d2a:	22ac      	movs	r2, #172	; 0xac
 8001d2c:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_12MHz_31k25BPS_CFG3;
 8001d2e:	230c      	movs	r3, #12
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	2203      	movs	r2, #3
 8001d34:	701a      	strb	r2, [r3, #0]
                    break;
 8001d36:	e0b1      	b.n	8001e9c <mcp2515_configRate+0x410>

                case (CAN_33KBPS) :
                    cfg1 = MCP_12MHz_33kBPS_CFG1;
 8001d38:	230e      	movs	r3, #14
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	220c      	movs	r2, #12
 8001d3e:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_12MHz_33kBPS_CFG2;
 8001d40:	230d      	movs	r3, #13
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	22a4      	movs	r2, #164	; 0xa4
 8001d46:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_12MHz_33kBPS_CFG3;
 8001d48:	230c      	movs	r3, #12
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	701a      	strb	r2, [r3, #0]
                    break;
 8001d50:	e0a4      	b.n	8001e9c <mcp2515_configRate+0x410>

                case (CAN_40KBPS) :
                    cfg1 = MCP_12MHz_40kBPS_CFG1;
 8001d52:	230e      	movs	r3, #14
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	2209      	movs	r2, #9
 8001d58:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_12MHz_40kBPS_CFG2;
 8001d5a:	230d      	movs	r3, #13
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	22a4      	movs	r2, #164	; 0xa4
 8001d60:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_12MHz_40kBPS_CFG3;
 8001d62:	230c      	movs	r3, #12
 8001d64:	18fb      	adds	r3, r7, r3
 8001d66:	2203      	movs	r2, #3
 8001d68:	701a      	strb	r2, [r3, #0]
                    break;
 8001d6a:	e097      	b.n	8001e9c <mcp2515_configRate+0x410>

                case (CAN_50KBPS) :
                    cfg1 = MCP_12MHz_50kBPS_CFG1;
 8001d6c:	230e      	movs	r3, #14
 8001d6e:	18fb      	adds	r3, r7, r3
 8001d70:	2205      	movs	r2, #5
 8001d72:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_12MHz_50kBPS_CFG2;
 8001d74:	230d      	movs	r3, #13
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	22b6      	movs	r2, #182	; 0xb6
 8001d7a:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_12MHz_50kBPS_CFG3;
 8001d7c:	230c      	movs	r3, #12
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	2204      	movs	r2, #4
 8001d82:	701a      	strb	r2, [r3, #0]
                    break;
 8001d84:	e08a      	b.n	8001e9c <mcp2515_configRate+0x410>

                case (CAN_80KBPS) :
                    cfg1 = MCP_12MHz_80kBPS_CFG1;
 8001d86:	230e      	movs	r3, #14
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_12MHz_80kBPS_CFG2;
 8001d8e:	230d      	movs	r3, #13
 8001d90:	18fb      	adds	r3, r7, r3
 8001d92:	22a4      	movs	r2, #164	; 0xa4
 8001d94:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_12MHz_80kBPS_CFG3;
 8001d96:	230c      	movs	r3, #12
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	701a      	strb	r2, [r3, #0]
                    break;
 8001d9e:	e07d      	b.n	8001e9c <mcp2515_configRate+0x410>

                case (CAN_83K3BPS) :
                    cfg1 = MCP_12MHz_83k3BPS_CFG1;
 8001da0:	230e      	movs	r3, #14
 8001da2:	18fb      	adds	r3, r7, r3
 8001da4:	2203      	movs	r2, #3
 8001da6:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_12MHz_83k3BPS_CFG2;
 8001da8:	230d      	movs	r3, #13
 8001daa:	18fb      	adds	r3, r7, r3
 8001dac:	22b5      	movs	r2, #181	; 0xb5
 8001dae:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_12MHz_83k3BPS_CFG3;
 8001db0:	230c      	movs	r3, #12
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	2203      	movs	r2, #3
 8001db6:	701a      	strb	r2, [r3, #0]
                    break;
 8001db8:	e070      	b.n	8001e9c <mcp2515_configRate+0x410>

                case (CAN_95KBPS) :
                    cfg1 = MCP_12MHz_95kBPS_CFG1;
 8001dba:	230e      	movs	r3, #14
 8001dbc:	18fb      	adds	r3, r7, r3
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_12MHz_95kBPS_CFG2;
 8001dc2:	230d      	movs	r3, #13
 8001dc4:	18fb      	adds	r3, r7, r3
 8001dc6:	22be      	movs	r2, #190	; 0xbe
 8001dc8:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_12MHz_95kBPS_CFG3;
 8001dca:	230c      	movs	r3, #12
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	2204      	movs	r2, #4
 8001dd0:	701a      	strb	r2, [r3, #0]
                    break;
 8001dd2:	e063      	b.n	8001e9c <mcp2515_configRate+0x410>

                case (CAN_100KBPS) :
                    cfg1 = MCP_12MHz_100kBPS_CFG1;
 8001dd4:	230e      	movs	r3, #14
 8001dd6:	18fb      	adds	r3, r7, r3
 8001dd8:	2202      	movs	r2, #2
 8001dda:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_12MHz_100kBPS_CFG2;
 8001ddc:	230d      	movs	r3, #13
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	22b6      	movs	r2, #182	; 0xb6
 8001de2:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_12MHz_100kBPS_CFG3;
 8001de4:	230c      	movs	r3, #12
 8001de6:	18fb      	adds	r3, r7, r3
 8001de8:	2204      	movs	r2, #4
 8001dea:	701a      	strb	r2, [r3, #0]
                    break;
 8001dec:	e056      	b.n	8001e9c <mcp2515_configRate+0x410>

                case (CAN_125KBPS) :
                    cfg1 = MCP_12MHz_125kBPS_CFG1;
 8001dee:	230e      	movs	r3, #14
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_12MHz_125kBPS_CFG2;
 8001df6:	230d      	movs	r3, #13
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	22bf      	movs	r2, #191	; 0xbf
 8001dfc:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_12MHz_125kBPS_CFG3;
 8001dfe:	230c      	movs	r3, #12
 8001e00:	18fb      	adds	r3, r7, r3
 8001e02:	2206      	movs	r2, #6
 8001e04:	701a      	strb	r2, [r3, #0]
                    break;
 8001e06:	e049      	b.n	8001e9c <mcp2515_configRate+0x410>

                case (CAN_200KBPS) :
                    cfg1 = MCP_12MHz_200kBPS_CFG1;
 8001e08:	230e      	movs	r3, #14
 8001e0a:	18fb      	adds	r3, r7, r3
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_12MHz_200kBPS_CFG2;
 8001e10:	230d      	movs	r3, #13
 8001e12:	18fb      	adds	r3, r7, r3
 8001e14:	22a4      	movs	r2, #164	; 0xa4
 8001e16:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_12MHz_200kBPS_CFG3;
 8001e18:	230c      	movs	r3, #12
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	701a      	strb	r2, [r3, #0]
                    break;
 8001e20:	e03c      	b.n	8001e9c <mcp2515_configRate+0x410>

                case (CAN_250KBPS) :
                    cfg1 = MCP_12MHz_250kBPS_CFG1;
 8001e22:	230e      	movs	r3, #14
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_12MHz_250kBPS_CFG2;
 8001e2a:	230d      	movs	r3, #13
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	22bf      	movs	r2, #191	; 0xbf
 8001e30:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_12MHz_250kBPS_CFG3;
 8001e32:	230c      	movs	r3, #12
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	2206      	movs	r2, #6
 8001e38:	701a      	strb	r2, [r3, #0]
                    break;
 8001e3a:	e02f      	b.n	8001e9c <mcp2515_configRate+0x410>

                case (CAN_500KBPS) :
                    cfg1 = MCP_12MHz_500kBPS_CFG1;
 8001e3c:	230e      	movs	r3, #14
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_12MHz_500kBPS_CFG2;
 8001e44:	230d      	movs	r3, #13
 8001e46:	18fb      	adds	r3, r7, r3
 8001e48:	229b      	movs	r2, #155	; 0x9b
 8001e4a:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_12MHz_500kBPS_CFG3;
 8001e4c:	230c      	movs	r3, #12
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	2202      	movs	r2, #2
 8001e52:	701a      	strb	r2, [r3, #0]
                    break;
 8001e54:	e022      	b.n	8001e9c <mcp2515_configRate+0x410>

                case (CAN_666KBPS) :
                    cfg1 = MCP_12MHz_666kBPS_CFG1;
 8001e56:	230e      	movs	r3, #14
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_12MHz_666kBPS_CFG2;
 8001e5e:	230d      	movs	r3, #13
 8001e60:	18fb      	adds	r3, r7, r3
 8001e62:	2292      	movs	r2, #146	; 0x92
 8001e64:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_12MHz_666kBPS_CFG3;
 8001e66:	230c      	movs	r3, #12
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	701a      	strb	r2, [r3, #0]
                    break;
 8001e6e:	e015      	b.n	8001e9c <mcp2515_configRate+0x410>
 8001e70:	080079d8 	.word	0x080079d8
 8001e74:	08007a28 	.word	0x08007a28

                case (CAN_1000KBPS) :
                    cfg1 = MCP_12MHz_1000kBPS_CFG1;
 8001e78:	230e      	movs	r3, #14
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_12MHz_1000kBPS_CFG2;
 8001e80:	230d      	movs	r3, #13
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	2288      	movs	r2, #136	; 0x88
 8001e86:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_12MHz_1000kBPS_CFG3;
 8001e88:	230c      	movs	r3, #12
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]
                    break;
 8001e90:	e004      	b.n	8001e9c <mcp2515_configRate+0x410>

                default:
                    set = 0;
 8001e92:	230f      	movs	r3, #15
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]
                    break;
 8001e9a:	46c0      	nop			; (mov r8, r8)
            }
            break;
 8001e9c:	e0ca      	b.n	8002034 <mcp2515_configRate+0x5a8>
        case (MCP_8MHz) :
            switch (canSpeed) {
 8001e9e:	1cfb      	adds	r3, r7, #3
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b13      	cmp	r3, #19
 8001ea4:	d900      	bls.n	8001ea8 <mcp2515_configRate+0x41c>
 8001ea6:	e0ba      	b.n	800201e <mcp2515_configRate+0x592>
 8001ea8:	009a      	lsls	r2, r3, #2
 8001eaa:	4b74      	ldr	r3, [pc, #464]	; (800207c <mcp2515_configRate+0x5f0>)
 8001eac:	18d3      	adds	r3, r2, r3
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	469f      	mov	pc, r3
                case (CAN_5KBPS) :
                    cfg1 = MCP_8MHz_5kBPS_CFG1;
 8001eb2:	230e      	movs	r3, #14
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	221f      	movs	r2, #31
 8001eb8:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_8MHz_5kBPS_CFG2;
 8001eba:	230d      	movs	r3, #13
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	22bf      	movs	r2, #191	; 0xbf
 8001ec0:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_8MHz_5kBPS_CFG3;
 8001ec2:	230c      	movs	r3, #12
 8001ec4:	18fb      	adds	r3, r7, r3
 8001ec6:	2207      	movs	r2, #7
 8001ec8:	701a      	strb	r2, [r3, #0]
                    break;
 8001eca:	e0ad      	b.n	8002028 <mcp2515_configRate+0x59c>

                case (CAN_10KBPS) :
                    cfg1 = MCP_8MHz_10kBPS_CFG1;
 8001ecc:	230e      	movs	r3, #14
 8001ece:	18fb      	adds	r3, r7, r3
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_8MHz_10kBPS_CFG2;
 8001ed4:	230d      	movs	r3, #13
 8001ed6:	18fb      	adds	r3, r7, r3
 8001ed8:	22bf      	movs	r2, #191	; 0xbf
 8001eda:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_8MHz_10kBPS_CFG3;
 8001edc:	230c      	movs	r3, #12
 8001ede:	18fb      	adds	r3, r7, r3
 8001ee0:	2207      	movs	r2, #7
 8001ee2:	701a      	strb	r2, [r3, #0]
                    break;
 8001ee4:	e0a0      	b.n	8002028 <mcp2515_configRate+0x59c>

                case (CAN_20KBPS) :
                    cfg1 = MCP_8MHz_20kBPS_CFG1;
 8001ee6:	230e      	movs	r3, #14
 8001ee8:	18fb      	adds	r3, r7, r3
 8001eea:	2207      	movs	r2, #7
 8001eec:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_8MHz_20kBPS_CFG2;
 8001eee:	230d      	movs	r3, #13
 8001ef0:	18fb      	adds	r3, r7, r3
 8001ef2:	22bf      	movs	r2, #191	; 0xbf
 8001ef4:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_8MHz_20kBPS_CFG3;
 8001ef6:	230c      	movs	r3, #12
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	2207      	movs	r2, #7
 8001efc:	701a      	strb	r2, [r3, #0]
                    break;
 8001efe:	e093      	b.n	8002028 <mcp2515_configRate+0x59c>

                case (CAN_31K25BPS) :
                    cfg1 = MCP_8MHz_31k25BPS_CFG1;
 8001f00:	230e      	movs	r3, #14
 8001f02:	18fb      	adds	r3, r7, r3
 8001f04:	2207      	movs	r2, #7
 8001f06:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_8MHz_31k25BPS_CFG2;
 8001f08:	230d      	movs	r3, #13
 8001f0a:	18fb      	adds	r3, r7, r3
 8001f0c:	22a4      	movs	r2, #164	; 0xa4
 8001f0e:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_8MHz_31k25BPS_CFG3;
 8001f10:	230c      	movs	r3, #12
 8001f12:	18fb      	adds	r3, r7, r3
 8001f14:	2204      	movs	r2, #4
 8001f16:	701a      	strb	r2, [r3, #0]
                    break;
 8001f18:	e086      	b.n	8002028 <mcp2515_configRate+0x59c>

                case (CAN_40KBPS) :
                    cfg1 = MCP_8MHz_40kBPS_CFG1;
 8001f1a:	230e      	movs	r3, #14
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	2203      	movs	r2, #3
 8001f20:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_8MHz_40kBPS_CFG2;
 8001f22:	230d      	movs	r3, #13
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	22bf      	movs	r2, #191	; 0xbf
 8001f28:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_8MHz_40kBPS_CFG3;
 8001f2a:	230c      	movs	r3, #12
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	2207      	movs	r2, #7
 8001f30:	701a      	strb	r2, [r3, #0]
                    break;
 8001f32:	e079      	b.n	8002028 <mcp2515_configRate+0x59c>

                case (CAN_50KBPS) :
                    cfg1 = MCP_8MHz_50kBPS_CFG1;
 8001f34:	230e      	movs	r3, #14
 8001f36:	18fb      	adds	r3, r7, r3
 8001f38:	2203      	movs	r2, #3
 8001f3a:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_8MHz_50kBPS_CFG2;
 8001f3c:	230d      	movs	r3, #13
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	22b4      	movs	r2, #180	; 0xb4
 8001f42:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_8MHz_50kBPS_CFG3;
 8001f44:	230c      	movs	r3, #12
 8001f46:	18fb      	adds	r3, r7, r3
 8001f48:	2206      	movs	r2, #6
 8001f4a:	701a      	strb	r2, [r3, #0]
                    break;
 8001f4c:	e06c      	b.n	8002028 <mcp2515_configRate+0x59c>

                case (CAN_80KBPS) :
                    cfg1 = MCP_8MHz_80kBPS_CFG1;
 8001f4e:	230e      	movs	r3, #14
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_8MHz_80kBPS_CFG2;
 8001f56:	230d      	movs	r3, #13
 8001f58:	18fb      	adds	r3, r7, r3
 8001f5a:	22bf      	movs	r2, #191	; 0xbf
 8001f5c:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_8MHz_80kBPS_CFG3;
 8001f5e:	230c      	movs	r3, #12
 8001f60:	18fb      	adds	r3, r7, r3
 8001f62:	2207      	movs	r2, #7
 8001f64:	701a      	strb	r2, [r3, #0]
                    break;
 8001f66:	e05f      	b.n	8002028 <mcp2515_configRate+0x59c>

                case (CAN_100KBPS) :
                    cfg1 = MCP_8MHz_100kBPS_CFG1;
 8001f68:	230e      	movs	r3, #14
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_8MHz_100kBPS_CFG2;
 8001f70:	230d      	movs	r3, #13
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	22b4      	movs	r2, #180	; 0xb4
 8001f76:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_8MHz_100kBPS_CFG3;
 8001f78:	230c      	movs	r3, #12
 8001f7a:	18fb      	adds	r3, r7, r3
 8001f7c:	2206      	movs	r2, #6
 8001f7e:	701a      	strb	r2, [r3, #0]
                    break;
 8001f80:	e052      	b.n	8002028 <mcp2515_configRate+0x59c>

                case (CAN_125KBPS) :
                    cfg1 = MCP_8MHz_125kBPS_CFG1;
 8001f82:	230e      	movs	r3, #14
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	2201      	movs	r2, #1
 8001f88:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_8MHz_125kBPS_CFG2;
 8001f8a:	230d      	movs	r3, #13
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	22b1      	movs	r2, #177	; 0xb1
 8001f90:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_8MHz_125kBPS_CFG3;
 8001f92:	230c      	movs	r3, #12
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	2205      	movs	r2, #5
 8001f98:	701a      	strb	r2, [r3, #0]
                    break;
 8001f9a:	e045      	b.n	8002028 <mcp2515_configRate+0x59c>

                case (CAN_200KBPS) :
                    cfg1 = MCP_8MHz_200kBPS_CFG1;
 8001f9c:	230e      	movs	r3, #14
 8001f9e:	18fb      	adds	r3, r7, r3
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_8MHz_200kBPS_CFG2;
 8001fa4:	230d      	movs	r3, #13
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	22b4      	movs	r2, #180	; 0xb4
 8001faa:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_8MHz_200kBPS_CFG3;
 8001fac:	230c      	movs	r3, #12
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	2206      	movs	r2, #6
 8001fb2:	701a      	strb	r2, [r3, #0]
                    break;
 8001fb4:	e038      	b.n	8002028 <mcp2515_configRate+0x59c>

                case (CAN_250KBPS) :
                    cfg1 = MCP_8MHz_250kBPS_CFG1;
 8001fb6:	230e      	movs	r3, #14
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_8MHz_250kBPS_CFG2;
 8001fbe:	230d      	movs	r3, #13
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	22b1      	movs	r2, #177	; 0xb1
 8001fc4:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_8MHz_250kBPS_CFG3;
 8001fc6:	230c      	movs	r3, #12
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	2205      	movs	r2, #5
 8001fcc:	701a      	strb	r2, [r3, #0]
                    break;
 8001fce:	e02b      	b.n	8002028 <mcp2515_configRate+0x59c>

                case (CAN_500KBPS) :
                    cfg1 = MCP_8MHz_500kBPS_CFG1;
 8001fd0:	230e      	movs	r3, #14
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_8MHz_500kBPS_CFG2;
 8001fd8:	230d      	movs	r3, #13
 8001fda:	18fb      	adds	r3, r7, r3
 8001fdc:	2290      	movs	r2, #144	; 0x90
 8001fde:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_8MHz_500kBPS_CFG3;
 8001fe0:	230c      	movs	r3, #12
 8001fe2:	18fb      	adds	r3, r7, r3
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	701a      	strb	r2, [r3, #0]
                    break;
 8001fe8:	e01e      	b.n	8002028 <mcp2515_configRate+0x59c>

                case (CAN_800KBPS) :
                    cfg1 = MCP_8MHz_800kBPS_CFG1;
 8001fea:	230e      	movs	r3, #14
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_8MHz_800kBPS_CFG2;
 8001ff2:	230d      	movs	r3, #13
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	2280      	movs	r2, #128	; 0x80
 8001ff8:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_8MHz_800kBPS_CFG3;
 8001ffa:	230c      	movs	r3, #12
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	2201      	movs	r2, #1
 8002000:	701a      	strb	r2, [r3, #0]
                    break;
 8002002:	e011      	b.n	8002028 <mcp2515_configRate+0x59c>

                case (CAN_1000KBPS) :
                    cfg1 = MCP_8MHz_1000kBPS_CFG1;
 8002004:	230e      	movs	r3, #14
 8002006:	18fb      	adds	r3, r7, r3
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
                    cfg2 = MCP_8MHz_1000kBPS_CFG2;
 800200c:	230d      	movs	r3, #13
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	2280      	movs	r2, #128	; 0x80
 8002012:	701a      	strb	r2, [r3, #0]
                    cfg3 = MCP_8MHz_1000kBPS_CFG3;
 8002014:	230c      	movs	r3, #12
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
                    break;
 800201c:	e004      	b.n	8002028 <mcp2515_configRate+0x59c>

                default:
                    set = 0;
 800201e:	230f      	movs	r3, #15
 8002020:	18fb      	adds	r3, r7, r3
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
                    break;
 8002026:	46c0      	nop			; (mov r8, r8)
            }
            break;
 8002028:	e004      	b.n	8002034 <mcp2515_configRate+0x5a8>

        default:
            set = 0;
 800202a:	230f      	movs	r3, #15
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	2200      	movs	r2, #0
 8002030:	701a      	strb	r2, [r3, #0]
            break;
 8002032:	46c0      	nop			; (mov r8, r8)
    }

    if (set)
 8002034:	230f      	movs	r3, #15
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d019      	beq.n	8002072 <mcp2515_configRate+0x5e6>
	{
        mcp2515_setRegister(canCfg,MCP_CNF1, cfg1);
 800203e:	230e      	movs	r3, #14
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	781a      	ldrb	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	212a      	movs	r1, #42	; 0x2a
 8002048:	0018      	movs	r0, r3
 800204a:	f7ff fbfa 	bl	8001842 <mcp2515_setRegister>
        mcp2515_setRegister(canCfg,MCP_CNF2, cfg2);
 800204e:	230d      	movs	r3, #13
 8002050:	18fb      	adds	r3, r7, r3
 8002052:	781a      	ldrb	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2129      	movs	r1, #41	; 0x29
 8002058:	0018      	movs	r0, r3
 800205a:	f7ff fbf2 	bl	8001842 <mcp2515_setRegister>
        mcp2515_setRegister(canCfg,MCP_CNF3, cfg3);
 800205e:	230c      	movs	r3, #12
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	781a      	ldrb	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2128      	movs	r1, #40	; 0x28
 8002068:	0018      	movs	r0, r3
 800206a:	f7ff fbea 	bl	8001842 <mcp2515_setRegister>

        return MCP2515_OK;
 800206e:	2300      	movs	r3, #0
 8002070:	e000      	b.n	8002074 <mcp2515_configRate+0x5e8>
    }
	else
	{
        return MCP2515_FAIL;
 8002072:	2301      	movs	r3, #1
    }
}
 8002074:	0018      	movs	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	b004      	add	sp, #16
 800207a:	bd80      	pop	{r7, pc}
 800207c:	08007a6c 	.word	0x08007a6c

08002080 <mcp2515_initCANBuffers>:
/*********************************************************************************************************
** Function name:           mcp2515_initCANBuffers
** Descriptions:            init canbuffers
*********************************************************************************************************/
void mcp2515_initCANBuffers(CanbusConfig_t* canCfg)
{
 8002080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
    uint8_t i, a1, a2, a3;

    a1 = MCP_TXB0CTRL;
 8002088:	230e      	movs	r3, #14
 800208a:	18fb      	adds	r3, r7, r3
 800208c:	2230      	movs	r2, #48	; 0x30
 800208e:	701a      	strb	r2, [r3, #0]
    a2 = MCP_TXB1CTRL;
 8002090:	230d      	movs	r3, #13
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	2240      	movs	r2, #64	; 0x40
 8002096:	701a      	strb	r2, [r3, #0]
    a3 = MCP_TXB2CTRL;
 8002098:	230c      	movs	r3, #12
 800209a:	18fb      	adds	r3, r7, r3
 800209c:	2250      	movs	r2, #80	; 0x50
 800209e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 14; i++)
 80020a0:	230f      	movs	r3, #15
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
 80020a8:	e02c      	b.n	8002104 <mcp2515_initCANBuffers+0x84>
		{                       // in-buffer loop
        mcp2515_setRegister(canCfg,a1,0);
 80020aa:	240e      	movs	r4, #14
 80020ac:	193b      	adds	r3, r7, r4
 80020ae:	7819      	ldrb	r1, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	0018      	movs	r0, r3
 80020b6:	f7ff fbc4 	bl	8001842 <mcp2515_setRegister>
        mcp2515_setRegister(canCfg,a2,0);
 80020ba:	250d      	movs	r5, #13
 80020bc:	197b      	adds	r3, r7, r5
 80020be:	7819      	ldrb	r1, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	0018      	movs	r0, r3
 80020c6:	f7ff fbbc 	bl	8001842 <mcp2515_setRegister>
        mcp2515_setRegister(canCfg,a3,0);
 80020ca:	260c      	movs	r6, #12
 80020cc:	19bb      	adds	r3, r7, r6
 80020ce:	7819      	ldrb	r1, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	0018      	movs	r0, r3
 80020d6:	f7ff fbb4 	bl	8001842 <mcp2515_setRegister>
        a1++;
 80020da:	193b      	adds	r3, r7, r4
 80020dc:	781a      	ldrb	r2, [r3, #0]
 80020de:	193b      	adds	r3, r7, r4
 80020e0:	3201      	adds	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]
        a2++;
 80020e4:	197b      	adds	r3, r7, r5
 80020e6:	781a      	ldrb	r2, [r3, #0]
 80020e8:	197b      	adds	r3, r7, r5
 80020ea:	3201      	adds	r2, #1
 80020ec:	701a      	strb	r2, [r3, #0]
        a3++;
 80020ee:	19bb      	adds	r3, r7, r6
 80020f0:	781a      	ldrb	r2, [r3, #0]
 80020f2:	19bb      	adds	r3, r7, r6
 80020f4:	3201      	adds	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 14; i++)
 80020f8:	210f      	movs	r1, #15
 80020fa:	187b      	adds	r3, r7, r1
 80020fc:	781a      	ldrb	r2, [r3, #0]
 80020fe:	187b      	adds	r3, r7, r1
 8002100:	3201      	adds	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]
 8002104:	230f      	movs	r3, #15
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b0d      	cmp	r3, #13
 800210c:	d9cd      	bls.n	80020aa <mcp2515_initCANBuffers+0x2a>
    }
    mcp2515_setRegister(canCfg,MCP_RXB0CTRL,0);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	2160      	movs	r1, #96	; 0x60
 8002114:	0018      	movs	r0, r3
 8002116:	f7ff fb94 	bl	8001842 <mcp2515_setRegister>
    mcp2515_setRegister(canCfg,MCP_RXB1CTRL,0);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	2170      	movs	r1, #112	; 0x70
 8002120:	0018      	movs	r0, r3
 8002122:	f7ff fb8e 	bl	8001842 <mcp2515_setRegister>
}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	46bd      	mov	sp, r7
 800212a:	b005      	add	sp, #20
 800212c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800212e <mcp2515_init>:
/*********************************************************************************************************
** Function name:           mcp2515_init
** Descriptions:            init the device
*********************************************************************************************************/
uint8_t mcp2515_init(CanbusConfig_t* canCfg,const uint8_t canSpeed, const uint8_t clock)
 {
 800212e:	b5b0      	push	{r4, r5, r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	0008      	movs	r0, r1
 8002138:	0011      	movs	r1, r2
 800213a:	1cfb      	adds	r3, r7, #3
 800213c:	1c02      	adds	r2, r0, #0
 800213e:	701a      	strb	r2, [r3, #0]
 8002140:	1cbb      	adds	r3, r7, #2
 8002142:	1c0a      	adds	r2, r1, #0
 8002144:	701a      	strb	r2, [r3, #0]
    uint8_t res;

    mcp2515_reset(canCfg);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	0018      	movs	r0, r3
 800214a:	f7ff fb41 	bl	80017d0 <mcp2515_reset>
    res = mcp2515_setCANCTRL_Mode(canCfg,MODE_CONFIG);
 800214e:	250f      	movs	r5, #15
 8002150:	197c      	adds	r4, r7, r5
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2180      	movs	r1, #128	; 0x80
 8002156:	0018      	movs	r0, r3
 8002158:	f7ff fc12 	bl	8001980 <mcp2515_setCANCTRL_Mode>
 800215c:	0003      	movs	r3, r0
 800215e:	7023      	strb	r3, [r4, #0]

    if (res > 0)
 8002160:	197b      	adds	r3, r7, r5
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d005      	beq.n	8002174 <mcp2515_init+0x46>
	{
        #if DEBUG_EN
        debugPrint("Enter setting mode fail\n");
        #else
        HW_DELAY(10);
 8002168:	200a      	movs	r0, #10
 800216a:	f000 ff5b 	bl	8003024 <HAL_Delay>
        #endif
        return res;
 800216e:	197b      	adds	r3, r7, r5
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	e04a      	b.n	800220a <mcp2515_init+0xdc>
    }
    #if DEBUG_EN
    debugPrint("Enter setting mode success\n ");
    #else
    HW_DELAY(10);
 8002174:	200a      	movs	r0, #10
 8002176:	f000 ff55 	bl	8003024 <HAL_Delay>
    #endif

    // set boadrate
    if (mcp2515_configRate(canCfg,canSpeed, clock)) {
 800217a:	1cbb      	adds	r3, r7, #2
 800217c:	781a      	ldrb	r2, [r3, #0]
 800217e:	1cfb      	adds	r3, r7, #3
 8002180:	7819      	ldrb	r1, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	0018      	movs	r0, r3
 8002186:	f7ff fc81 	bl	8001a8c <mcp2515_configRate>
 800218a:	1e03      	subs	r3, r0, #0
 800218c:	d006      	beq.n	800219c <mcp2515_init+0x6e>
        #if DEBUG_EN
    	debugPrint("set rate fall!!\n");
        #else
        HW_DELAY(10);
 800218e:	200a      	movs	r0, #10
 8002190:	f000 ff48 	bl	8003024 <HAL_Delay>
        #endif
        return res;
 8002194:	230f      	movs	r3, #15
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	e036      	b.n	800220a <mcp2515_init+0xdc>
    }
    #if DEBUG_EN
    debugPrint("set rate success!!\n");
    #else
    HW_DELAY(10);
 800219c:	200a      	movs	r0, #10
 800219e:	f000 ff41 	bl	8003024 <HAL_Delay>
    #endif

    if (res == MCP2515_OK) {
 80021a2:	240f      	movs	r4, #15
 80021a4:	193b      	adds	r3, r7, r4
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d12b      	bne.n	8002204 <mcp2515_init+0xd6>

        // init canbuffers
        mcp2515_initCANBuffers(canCfg);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	0018      	movs	r0, r3
 80021b0:	f7ff ff66 	bl	8002080 <mcp2515_initCANBuffers>

        // interrupt mode
        mcp2515_setRegister(canCfg,MCP_CANINTE, MCP_RX0IF | MCP_RX1IF);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2203      	movs	r2, #3
 80021b8:	212b      	movs	r1, #43	; 0x2b
 80021ba:	0018      	movs	r0, r3
 80021bc:	f7ff fb41 	bl	8001842 <mcp2515_setRegister>
        mcp2515_modifyRegister(canCfg,MCP_RXB0CTRL,MCP_RXB_RX_MASK | MCP_RXB_BUKT_MASK,MCP_RXB_RX_ANY | MCP_RXB_BUKT_MASK);
        mcp2515_modifyRegister(canCfg,MCP_RXB1CTRL, MCP_RXB_RX_MASK, MCP_RXB_RX_ANY);
        #else


        mcp2515_modifyRegister(canCfg,MCP_RXB0CTRL,MCP_RXB_RX_MASK | MCP_RXB_BUKT_MASK,MCP_RXB_RX_STDEXT | MCP_RXB_BUKT_MASK);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	2304      	movs	r3, #4
 80021c4:	2264      	movs	r2, #100	; 0x64
 80021c6:	2160      	movs	r1, #96	; 0x60
 80021c8:	f7ff fb61 	bl	800188e <mcp2515_modifyRegister>
        mcp2515_modifyRegister(canCfg,MCP_RXB1CTRL, MCP_RXB_RX_MASK, MCP_RXB_RX_STDEXT);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	2300      	movs	r3, #0
 80021d0:	2260      	movs	r2, #96	; 0x60
 80021d2:	2170      	movs	r1, #112	; 0x70
 80021d4:	f7ff fb5b 	bl	800188e <mcp2515_modifyRegister>
        #endif
        // enter normal mode
        res = setMode(canCfg,MODE_NORMAL);
 80021d8:	0025      	movs	r5, r4
 80021da:	193c      	adds	r4, r7, r4
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2100      	movs	r1, #0
 80021e0:	0018      	movs	r0, r3
 80021e2:	f7ff fb9f 	bl	8001924 <setMode>
 80021e6:	0003      	movs	r3, r0
 80021e8:	7023      	strb	r3, [r4, #0]
        if (res)
 80021ea:	197b      	adds	r3, r7, r5
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d005      	beq.n	80021fe <mcp2515_init+0xd0>
		{
            #if DEBUG_EN
            debugPrint("Enter Normal Mode Fail!!\n");
            #else
            HW_DELAY(10);
 80021f2:	200a      	movs	r0, #10
 80021f4:	f000 ff16 	bl	8003024 <HAL_Delay>
            #endif
            return res;
 80021f8:	197b      	adds	r3, r7, r5
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	e005      	b.n	800220a <mcp2515_init+0xdc>
        }

        #if DEBUG_EN
        debugPrint("Enter Normal Mode Success!!\n");
        #else
        HW_DELAY(10);
 80021fe:	200a      	movs	r0, #10
 8002200:	f000 ff10 	bl	8003024 <HAL_Delay>
        #endif
    }
    return res;
 8002204:	230f      	movs	r3, #15
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	781b      	ldrb	r3, [r3, #0]
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	b004      	add	sp, #16
 8002210:	bdb0      	pop	{r4, r5, r7, pc}

08002212 <mcp2515_id_to_buf>:
/*********************************************************************************************************
** Function name:           mcp2515_id_to_buf
** Descriptions:            configure tbufdata[4] from id and ext
*********************************************************************************************************/
void mcp2515_id_to_buf(const uint8_t ext, const unsigned long id, uint8_t* tbufdata)
 {
 8002212:	b580      	push	{r7, lr}
 8002214:	b086      	sub	sp, #24
 8002216:	af00      	add	r7, sp, #0
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	210f      	movs	r1, #15
 800221e:	187b      	adds	r3, r7, r1
 8002220:	1c02      	adds	r2, r0, #0
 8002222:	701a      	strb	r2, [r3, #0]
    uint16_t canid;

    canid = (uint16_t)(id & 0x0FFFF);
 8002224:	2016      	movs	r0, #22
 8002226:	183b      	adds	r3, r7, r0
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	801a      	strh	r2, [r3, #0]

    if (ext == 1)
 800222c:	187b      	adds	r3, r7, r1
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d13b      	bne.n	80022ac <mcp2515_id_to_buf+0x9a>
	{
        tbufdata[MCP_EID0] = (uint8_t)(canid & 0xFF);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3303      	adds	r3, #3
 8002238:	183a      	adds	r2, r7, r0
 800223a:	8812      	ldrh	r2, [r2, #0]
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	701a      	strb	r2, [r3, #0]
        tbufdata[MCP_EID8] = (uint8_t)(canid >> 8);
 8002240:	183b      	adds	r3, r7, r0
 8002242:	881b      	ldrh	r3, [r3, #0]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	b29a      	uxth	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3302      	adds	r3, #2
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	701a      	strb	r2, [r3, #0]
        canid = (uint16_t)(id >> 16);
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	0c1a      	lsrs	r2, r3, #16
 8002254:	183b      	adds	r3, r7, r0
 8002256:	801a      	strh	r2, [r3, #0]
        tbufdata[MCP_SIDL] = (uint8_t)(canid & 0x03);
 8002258:	183b      	adds	r3, r7, r0
 800225a:	881b      	ldrh	r3, [r3, #0]
 800225c:	b2da      	uxtb	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3301      	adds	r3, #1
 8002262:	2103      	movs	r1, #3
 8002264:	400a      	ands	r2, r1
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	701a      	strb	r2, [r3, #0]
        tbufdata[MCP_SIDL] += (uint8_t)((canid & 0x1C) << 3);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3301      	adds	r3, #1
 800226e:	7819      	ldrb	r1, [r3, #0]
 8002270:	183b      	adds	r3, r7, r0
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	221f      	movs	r2, #31
 800227c:	4393      	bics	r3, r2
 800227e:	b2da      	uxtb	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3301      	adds	r3, #1
 8002284:	188a      	adds	r2, r1, r2
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	701a      	strb	r2, [r3, #0]
        tbufdata[MCP_SIDL] |= MCP_TXB_EXIDE_M;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	3301      	adds	r3, #1
 800228e:	781a      	ldrb	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3301      	adds	r3, #1
 8002294:	2108      	movs	r1, #8
 8002296:	430a      	orrs	r2, r1
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	701a      	strb	r2, [r3, #0]
        tbufdata[MCP_SIDH] = (uint8_t)(canid >> 5);
 800229c:	183b      	adds	r3, r7, r0
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	095b      	lsrs	r3, r3, #5
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	701a      	strb	r2, [r3, #0]
        tbufdata[MCP_SIDH] = (uint8_t)(canid >> 3);
        tbufdata[MCP_SIDL] = (uint8_t)((canid & 0x07) << 5);
        tbufdata[MCP_EID0] = 0;
        tbufdata[MCP_EID8] = 0;
    }
}
 80022aa:	e017      	b.n	80022dc <mcp2515_id_to_buf+0xca>
        tbufdata[MCP_SIDH] = (uint8_t)(canid >> 3);
 80022ac:	2116      	movs	r1, #22
 80022ae:	187b      	adds	r3, r7, r1
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	08db      	lsrs	r3, r3, #3
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	701a      	strb	r2, [r3, #0]
        tbufdata[MCP_SIDL] = (uint8_t)((canid & 0x07) << 5);
 80022bc:	187b      	adds	r3, r7, r1
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3301      	adds	r3, #1
 80022c6:	0152      	lsls	r2, r2, #5
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	701a      	strb	r2, [r3, #0]
        tbufdata[MCP_EID0] = 0;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3303      	adds	r3, #3
 80022d0:	2200      	movs	r2, #0
 80022d2:	701a      	strb	r2, [r3, #0]
        tbufdata[MCP_EID8] = 0;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3302      	adds	r3, #2
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
}
 80022dc:	46c0      	nop			; (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	b006      	add	sp, #24
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <mcp2515_write_canMsg>:
** Function name:           mcp2515_write_canMsg
** Descriptions:            write msg
**                          Note! There is no check for right address!
*********************************************************************************************************/
void mcp2515_write_canMsg(CanbusConfig_t* canCfg,const uint8_t buffer_sidh_addr, unsigned long id, uint8_t ext, uint8_t rtrBit, uint8_t len,volatile const uint8_t* buf)
{
 80022e4:	b5b0      	push	{r4, r5, r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	0008      	movs	r0, r1
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	0019      	movs	r1, r3
 80022f2:	250b      	movs	r5, #11
 80022f4:	197b      	adds	r3, r7, r5
 80022f6:	1c02      	adds	r2, r0, #0
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	230a      	movs	r3, #10
 80022fc:	18fb      	adds	r3, r7, r3
 80022fe:	1c0a      	adds	r2, r1, #0
 8002300:	701a      	strb	r2, [r3, #0]
    uint8_t load_addr = txSidhToTxLoad(buffer_sidh_addr);
 8002302:	2316      	movs	r3, #22
 8002304:	18fc      	adds	r4, r7, r3
 8002306:	197b      	adds	r3, r7, r5
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	0018      	movs	r0, r3
 800230c:	f7ff fa0f 	bl	800172e <txSidhToTxLoad>
 8002310:	0003      	movs	r3, r0
 8002312:	7023      	strb	r3, [r4, #0]

    uint8_t tbufdata[4];
    uint8_t dlc = len | (rtrBit ? MCP_RTR_MASK : 0) ;
 8002314:	2328      	movs	r3, #40	; 0x28
 8002316:	18fb      	adds	r3, r7, r3
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <mcp2515_write_canMsg+0x3e>
 800231e:	2340      	movs	r3, #64	; 0x40
 8002320:	e000      	b.n	8002324 <mcp2515_write_canMsg+0x40>
 8002322:	2300      	movs	r3, #0
 8002324:	212c      	movs	r1, #44	; 0x2c
 8002326:	187a      	adds	r2, r7, r1
 8002328:	7812      	ldrb	r2, [r2, #0]
 800232a:	b252      	sxtb	r2, r2
 800232c:	4313      	orrs	r3, r2
 800232e:	b25a      	sxtb	r2, r3
 8002330:	2315      	movs	r3, #21
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    ///////////////////////////////////////
    if(rtrBit == 1){	//RTR LEN UPDATE
 8002336:	2328      	movs	r3, #40	; 0x28
 8002338:	18fb      	adds	r3, r7, r3
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d102      	bne.n	8002346 <mcp2515_write_canMsg+0x62>
    len = 0;
 8002340:	187b      	adds	r3, r7, r1
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
    }
    ///////////////////////////////////////

    mcp2515_id_to_buf(ext, id, tbufdata);
 8002346:	2310      	movs	r3, #16
 8002348:	18fa      	adds	r2, r7, r3
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	230a      	movs	r3, #10
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	0018      	movs	r0, r3
 8002354:	f7ff ff5d 	bl	8002212 <mcp2515_id_to_buf>

    canCfg->ChipSelectFp();
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	4798      	blx	r3
    canCfg->SPIReadWriteFp(load_addr);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	2216      	movs	r2, #22
 8002364:	18ba      	adds	r2, r7, r2
 8002366:	7812      	ldrb	r2, [r2, #0]
 8002368:	0010      	movs	r0, r2
 800236a:	4798      	blx	r3

    for (i = 0; i < 4; i++)
 800236c:	2317      	movs	r3, #23
 800236e:	18fb      	adds	r3, r7, r3
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
 8002374:	e00e      	b.n	8002394 <mcp2515_write_canMsg+0xb0>
	{
         canCfg->SPIWriteFp(tbufdata[i]);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	2417      	movs	r4, #23
 800237c:	193a      	adds	r2, r7, r4
 800237e:	7812      	ldrb	r2, [r2, #0]
 8002380:	2110      	movs	r1, #16
 8002382:	1879      	adds	r1, r7, r1
 8002384:	5c8a      	ldrb	r2, [r1, r2]
 8002386:	0010      	movs	r0, r2
 8002388:	4798      	blx	r3
    for (i = 0; i < 4; i++)
 800238a:	193b      	adds	r3, r7, r4
 800238c:	781a      	ldrb	r2, [r3, #0]
 800238e:	193b      	adds	r3, r7, r4
 8002390:	3201      	adds	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
 8002394:	2417      	movs	r4, #23
 8002396:	193b      	adds	r3, r7, r4
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d9eb      	bls.n	8002376 <mcp2515_write_canMsg+0x92>
    }

	canCfg->SPIWriteFp(dlc);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	2215      	movs	r2, #21
 80023a4:	18ba      	adds	r2, r7, r2
 80023a6:	7812      	ldrb	r2, [r2, #0]
 80023a8:	0010      	movs	r0, r2
 80023aa:	4798      	blx	r3

    for (i = 0; i < len && i < CAN_MSG_MAX_DATA_LENGTH; i++)
 80023ac:	193b      	adds	r3, r7, r4
 80023ae:	2200      	movs	r2, #0
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	e00f      	b.n	80023d4 <mcp2515_write_canMsg+0xf0>
	{
        canCfg->SPIWriteFp(buf[i]);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	2417      	movs	r4, #23
 80023ba:	193a      	adds	r2, r7, r4
 80023bc:	7812      	ldrb	r2, [r2, #0]
 80023be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80023c0:	188a      	adds	r2, r1, r2
 80023c2:	7812      	ldrb	r2, [r2, #0]
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	0010      	movs	r0, r2
 80023c8:	4798      	blx	r3
    for (i = 0; i < len && i < CAN_MSG_MAX_DATA_LENGTH; i++)
 80023ca:	193b      	adds	r3, r7, r4
 80023cc:	781a      	ldrb	r2, [r3, #0]
 80023ce:	193b      	adds	r3, r7, r4
 80023d0:	3201      	adds	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
 80023d4:	2117      	movs	r1, #23
 80023d6:	187a      	adds	r2, r7, r1
 80023d8:	232c      	movs	r3, #44	; 0x2c
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	7812      	ldrb	r2, [r2, #0]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d203      	bcs.n	80023ec <mcp2515_write_canMsg+0x108>
 80023e4:	187b      	adds	r3, r7, r1
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b07      	cmp	r3, #7
 80023ea:	d9e3      	bls.n	80023b4 <mcp2515_write_canMsg+0xd0>
    }

    canCfg->ChipUnSelectFp();
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	4798      	blx	r3

    mcp2515_start_transmit(canCfg,buffer_sidh_addr);
 80023f2:	230b      	movs	r3, #11
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	781a      	ldrb	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	0011      	movs	r1, r2
 80023fc:	0018      	movs	r0, r3
 80023fe:	f000 f8a4 	bl	800254a <mcp2515_start_transmit>
}
 8002402:	46c0      	nop			; (mov r8, r8)
 8002404:	46bd      	mov	sp, r7
 8002406:	b006      	add	sp, #24
 8002408:	bdb0      	pop	{r4, r5, r7, pc}

0800240a <mcp2515_read_canMsg>:
/*********************************************************************************************************
** Function name:           mcp2515_read_canMsg
** Descriptions:            read message
*********************************************************************************************************/
void mcp2515_read_canMsg(CanbusConfig_t* canCfg,const uint8_t buffer_load_addr, volatile unsigned long* id, volatile uint8_t* ext,volatile uint8_t* rtrBit, volatile uint8_t* len, volatile uint8_t* buf)
 {      /* read can msg                 */
 800240a:	b5b0      	push	{r4, r5, r7, lr}
 800240c:	b086      	sub	sp, #24
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	603b      	str	r3, [r7, #0]
 8002416:	240b      	movs	r4, #11
 8002418:	193b      	adds	r3, r7, r4
 800241a:	1c0a      	adds	r2, r1, #0
 800241c:	701a      	strb	r2, [r3, #0]
    uint8_t tbufdata[4];
    uint8_t i;

    canCfg->ChipSelectFp();
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	4798      	blx	r3
    canCfg->SPIReadWriteFp(buffer_load_addr);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	193a      	adds	r2, r7, r4
 800242a:	7812      	ldrb	r2, [r2, #0]
 800242c:	0010      	movs	r0, r2
 800242e:	4798      	blx	r3
    // mcp2515 has auto-increment of address-pointer
    for (i = 0; i < 4; i++)
 8002430:	2317      	movs	r3, #23
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]
 8002438:	e00f      	b.n	800245a <mcp2515_read_canMsg+0x50>
	{
        tbufdata[i] = canCfg->SPIReadFp();
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	2517      	movs	r5, #23
 8002440:	197a      	adds	r2, r7, r5
 8002442:	7814      	ldrb	r4, [r2, #0]
 8002444:	4798      	blx	r3
 8002446:	0003      	movs	r3, r0
 8002448:	001a      	movs	r2, r3
 800244a:	2310      	movs	r3, #16
 800244c:	18fb      	adds	r3, r7, r3
 800244e:	551a      	strb	r2, [r3, r4]
    for (i = 0; i < 4; i++)
 8002450:	197b      	adds	r3, r7, r5
 8002452:	781a      	ldrb	r2, [r3, #0]
 8002454:	197b      	adds	r3, r7, r5
 8002456:	3201      	adds	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]
 800245a:	2317      	movs	r3, #23
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b03      	cmp	r3, #3
 8002462:	d9ea      	bls.n	800243a <mcp2515_read_canMsg+0x30>
    }


    *id = (tbufdata[MCP_SIDH] << 3) + (tbufdata[MCP_SIDL] >> 5);
 8002464:	2110      	movs	r1, #16
 8002466:	187b      	adds	r3, r7, r1
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	187a      	adds	r2, r7, r1
 800246e:	7852      	ldrb	r2, [r2, #1]
 8002470:	0952      	lsrs	r2, r2, #5
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	189b      	adds	r3, r3, r2
 8002476:	001a      	movs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	601a      	str	r2, [r3, #0]
    *ext = 0;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
    if ((tbufdata[MCP_SIDL] & MCP_TXB_EXIDE_M) ==  MCP_TXB_EXIDE_M)
 8002482:	187b      	adds	r3, r7, r1
 8002484:	785b      	ldrb	r3, [r3, #1]
 8002486:	001a      	movs	r2, r3
 8002488:	2308      	movs	r3, #8
 800248a:	4013      	ands	r3, r2
 800248c:	d01e      	beq.n	80024cc <mcp2515_read_canMsg+0xc2>
	{
        /* extended id                  */
        *id = (*id << 2) + (tbufdata[MCP_SIDL] & 0x03);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	009a      	lsls	r2, r3, #2
 8002494:	0008      	movs	r0, r1
 8002496:	187b      	adds	r3, r7, r1
 8002498:	785b      	ldrb	r3, [r3, #1]
 800249a:	0019      	movs	r1, r3
 800249c:	2303      	movs	r3, #3
 800249e:	400b      	ands	r3, r1
 80024a0:	18d2      	adds	r2, r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	601a      	str	r2, [r3, #0]
        *id = (*id << 8) + tbufdata[MCP_EID8];
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	183a      	adds	r2, r7, r0
 80024ae:	7892      	ldrb	r2, [r2, #2]
 80024b0:	189a      	adds	r2, r3, r2
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	601a      	str	r2, [r3, #0]
        *id = (*id << 8) + tbufdata[MCP_EID0];
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	183a      	adds	r2, r7, r0
 80024be:	78d2      	ldrb	r2, [r2, #3]
 80024c0:	189a      	adds	r2, r3, r2
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	601a      	str	r2, [r3, #0]
        *ext = 1;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
    }

    uint8_t pMsgSize = canCfg->SPIReadFp();
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	2516      	movs	r5, #22
 80024d2:	197c      	adds	r4, r7, r5
 80024d4:	4798      	blx	r3
 80024d6:	0003      	movs	r3, r0
 80024d8:	7023      	strb	r3, [r4, #0]

    *len = pMsgSize & MCP_DLC_MASK;
 80024da:	0029      	movs	r1, r5
 80024dc:	187b      	adds	r3, r7, r1
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	220f      	movs	r2, #15
 80024e2:	4013      	ands	r3, r2
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e8:	701a      	strb	r2, [r3, #0]

    *rtrBit = (pMsgSize & MCP_RTR_MASK) ? 1 : 0;
 80024ea:	187b      	adds	r3, r7, r1
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	119b      	asrs	r3, r3, #6
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2201      	movs	r2, #1
 80024f4:	4013      	ands	r3, r2
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fa:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < *len && i < CAN_MSG_MAX_DATA_LENGTH; i++)
 80024fc:	2317      	movs	r3, #23
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]
 8002504:	e00e      	b.n	8002524 <mcp2515_read_canMsg+0x11a>
	{
        buf[i] = canCfg->SPIReadFp();
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250a:	2517      	movs	r5, #23
 800250c:	197a      	adds	r2, r7, r5
 800250e:	7812      	ldrb	r2, [r2, #0]
 8002510:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002512:	188c      	adds	r4, r1, r2
 8002514:	4798      	blx	r3
 8002516:	0003      	movs	r3, r0
 8002518:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < *len && i < CAN_MSG_MAX_DATA_LENGTH; i++)
 800251a:	197b      	adds	r3, r7, r5
 800251c:	781a      	ldrb	r2, [r3, #0]
 800251e:	197b      	adds	r3, r7, r5
 8002520:	3201      	adds	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
 8002524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2117      	movs	r1, #23
 800252c:	187a      	adds	r2, r7, r1
 800252e:	7812      	ldrb	r2, [r2, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d203      	bcs.n	800253c <mcp2515_read_canMsg+0x132>
 8002534:	187b      	adds	r3, r7, r1
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b07      	cmp	r3, #7
 800253a:	d9e4      	bls.n	8002506 <mcp2515_read_canMsg+0xfc>
    }

    canCfg->ChipUnSelectFp();
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	4798      	blx	r3
}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	46bd      	mov	sp, r7
 8002546:	b006      	add	sp, #24
 8002548:	bdb0      	pop	{r4, r5, r7, pc}

0800254a <mcp2515_start_transmit>:
/*********************************************************************************************************
** Function name:           mcp2515_start_transmit
** Descriptions:            Start message transmit on mcp2515
*********************************************************************************************************/
void mcp2515_start_transmit(CanbusConfig_t* canCfg,const uint8_t mcp_addr)
 {            // start transmit
 800254a:	b590      	push	{r4, r7, lr}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	000a      	movs	r2, r1
 8002554:	1cfb      	adds	r3, r7, #3
 8002556:	701a      	strb	r2, [r3, #0]
    canCfg->ChipSelectFp();
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	4798      	blx	r3
    canCfg->SPIReadWriteFp(txSidhToRTS(mcp_addr));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69dc      	ldr	r4, [r3, #28]
 8002562:	1cfb      	adds	r3, r7, #3
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	0018      	movs	r0, r3
 8002568:	f7ff f8c6 	bl	80016f8 <txSidhToRTS>
 800256c:	0003      	movs	r3, r0
 800256e:	0018      	movs	r0, r3
 8002570:	47a0      	blx	r4
    canCfg->ChipUnSelectFp();
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	4798      	blx	r3
}
 8002578:	46c0      	nop			; (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	b003      	add	sp, #12
 800257e:	bd90      	pop	{r4, r7, pc}

08002580 <mcp2515_getNextFreeTXBuf>:
/*********************************************************************************************************
** Function name:           mcp2515_getNextFreeTXBuf
** Descriptions:            finds next free tx buffer for sending. Return MCP_ALLTXBUSY, if there is none.
*********************************************************************************************************/
uint8_t mcp2515_getNextFreeTXBuf(CanbusConfig_t* canCfg,uint8_t* txbuf_n)
{               // get Next free txbuf
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
    uint8_t status = mcp2515_readStatus(canCfg) & MCP_STAT_TX_PENDING_MASK;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	0018      	movs	r0, r3
 800258e:	f7ff f9ae 	bl	80018ee <mcp2515_readStatus>
 8002592:	0003      	movs	r3, r0
 8002594:	0019      	movs	r1, r3
 8002596:	200e      	movs	r0, #14
 8002598:	183b      	adds	r3, r7, r0
 800259a:	2254      	movs	r2, #84	; 0x54
 800259c:	400a      	ands	r2, r1
 800259e:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    *txbuf_n = 0x00;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]

    if (status == MCP_STAT_TX_PENDING_MASK)
 80025a6:	183b      	adds	r3, r7, r0
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b54      	cmp	r3, #84	; 0x54
 80025ac:	d101      	bne.n	80025b2 <mcp2515_getNextFreeTXBuf+0x32>
	{
        return MCP_ALLTXBUSY;    // All buffers are pending
 80025ae:	2302      	movs	r3, #2
 80025b0:	e03c      	b.n	800262c <mcp2515_getNextFreeTXBuf+0xac>
    }

    // check all 3 TX-Buffers except reserved
    for (i = 0; i < MCP_N_TXBUFFERS - canCfg->nReservedTx; i++)
 80025b2:	230f      	movs	r3, #15
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	e02c      	b.n	8002616 <mcp2515_getNextFreeTXBuf+0x96>
	{
        if ((status & txStatusPendingFlag(i)) == 0)
 80025bc:	240f      	movs	r4, #15
 80025be:	193b      	adds	r3, r7, r4
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	0018      	movs	r0, r3
 80025c4:	f7ff f8e9 	bl	800179a <txStatusPendingFlag>
 80025c8:	0003      	movs	r3, r0
 80025ca:	001a      	movs	r2, r3
 80025cc:	230e      	movs	r3, #14
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	4013      	ands	r3, r2
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d117      	bne.n	800260a <mcp2515_getNextFreeTXBuf+0x8a>
		{
            *txbuf_n = txCtrlReg(i) + 1;                                   // return SIDH-address of Buffer
 80025da:	193b      	adds	r3, r7, r4
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	0018      	movs	r0, r3
 80025e0:	f7ff f86f 	bl	80016c2 <txCtrlReg>
 80025e4:	0003      	movs	r3, r0
 80025e6:	3301      	adds	r3, #1
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	701a      	strb	r2, [r3, #0]
            mcp2515_modifyRegister(canCfg,MCP_CANINTF, txIfFlag(i), 0);
 80025ee:	193b      	adds	r3, r7, r4
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	0018      	movs	r0, r3
 80025f4:	f7ff f8b6 	bl	8001764 <txIfFlag>
 80025f8:	0003      	movs	r3, r0
 80025fa:	001a      	movs	r2, r3
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	2300      	movs	r3, #0
 8002600:	212c      	movs	r1, #44	; 0x2c
 8002602:	f7ff f944 	bl	800188e <mcp2515_modifyRegister>
            return MCP2515_OK;                                                 // ! function exit
 8002606:	2300      	movs	r3, #0
 8002608:	e010      	b.n	800262c <mcp2515_getNextFreeTXBuf+0xac>
    for (i = 0; i < MCP_N_TXBUFFERS - canCfg->nReservedTx; i++)
 800260a:	210f      	movs	r1, #15
 800260c:	187b      	adds	r3, r7, r1
 800260e:	781a      	ldrb	r2, [r3, #0]
 8002610:	187b      	adds	r3, r7, r1
 8002612:	3201      	adds	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
 8002616:	230f      	movs	r3, #15
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	781a      	ldrb	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7cdb      	ldrb	r3, [r3, #19]
 8002620:	0019      	movs	r1, r3
 8002622:	2303      	movs	r3, #3
 8002624:	1a5b      	subs	r3, r3, r1
 8002626:	429a      	cmp	r2, r3
 8002628:	dbc8      	blt.n	80025bc <mcp2515_getNextFreeTXBuf+0x3c>
        }
    }
    return MCP_ALLTXBUSY;
 800262a:	2302      	movs	r3, #2
}
 800262c:	0018      	movs	r0, r3
 800262e:	46bd      	mov	sp, r7
 8002630:	b005      	add	sp, #20
 8002632:	bd90      	pop	{r4, r7, pc}

08002634 <begin>:
/*********************************************************************************************************
** Function name:           begin
** Descriptions:            init can and set speed
*********************************************************************************************************/
uint8_t begin(CanbusConfig_t* canCfg,uint32_t speedset, const uint8_t clockset)
{
 8002634:	b5b0      	push	{r4, r5, r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	1dfb      	adds	r3, r7, #7
 8002640:	701a      	strb	r2, [r3, #0]

    uint8_t res = mcp2515_init(canCfg,(uint8_t)speedset, clockset);
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	b2d9      	uxtb	r1, r3
 8002646:	2517      	movs	r5, #23
 8002648:	197c      	adds	r4, r7, r5
 800264a:	1dfb      	adds	r3, r7, #7
 800264c:	781a      	ldrb	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	0018      	movs	r0, r3
 8002652:	f7ff fd6c 	bl	800212e <mcp2515_init>
 8002656:	0003      	movs	r3, r0
 8002658:	7023      	strb	r3, [r4, #0]

    return ((res == MCP2515_OK) ? CAN_OK : CAN_FAILINIT);
 800265a:	197b      	adds	r3, r7, r5
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	1e5a      	subs	r2, r3, #1
 8002660:	4193      	sbcs	r3, r2
 8002662:	b2db      	uxtb	r3, r3
}
 8002664:	0018      	movs	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	b006      	add	sp, #24
 800266a:	bdb0      	pop	{r4, r5, r7, pc}

0800266c <sendMsgBuffer>:
** Function name:           sendMsgBuf
** Descriptions:            Send message by using buffer read as free from CANINTF status
**                          Status has to be read with readRxTxStatus and filtered with checkClearTxStatus
*********************************************************************************************************/
uint8_t sendMsgBuffer(CanbusConfig_t* canCfg,unsigned long id, uint8_t ext,uint8_t rtr, uint8_t len,  uint8_t* buf)
{
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b089      	sub	sp, #36	; 0x24
 8002670:	af04      	add	r7, sp, #16
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	0019      	movs	r1, r3
 8002678:	1dfb      	adds	r3, r7, #7
 800267a:	701a      	strb	r2, [r3, #0]
 800267c:	1dbb      	adds	r3, r7, #6
 800267e:	1c0a      	adds	r2, r1, #0
 8002680:	701a      	strb	r2, [r3, #0]
	return sendMsg(canCfg,id,ext,rtr,len,buf,true);
 8002682:	1dbb      	adds	r3, r7, #6
 8002684:	781c      	ldrb	r4, [r3, #0]
 8002686:	1dfb      	adds	r3, r7, #7
 8002688:	781a      	ldrb	r2, [r3, #0]
 800268a:	68b9      	ldr	r1, [r7, #8]
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	2301      	movs	r3, #1
 8002690:	9302      	str	r3, [sp, #8]
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	2320      	movs	r3, #32
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	0023      	movs	r3, r4
 80026a0:	f000 f805 	bl	80026ae <sendMsg>
 80026a4:	0003      	movs	r3, r0
}
 80026a6:	0018      	movs	r0, r3
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b005      	add	sp, #20
 80026ac:	bd90      	pop	{r4, r7, pc}

080026ae <sendMsg>:
/*********************************************************************************************************
** Function name:           sendMsg
** Descriptions:            send message
*********************************************************************************************************/
uint8_t sendMsg(CanbusConfig_t* canCfg,unsigned long id, uint8_t ext, uint8_t rtrBit, uint8_t len, const uint8_t* buf, int8_t wait_sent)
{
 80026ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b0:	b08b      	sub	sp, #44	; 0x2c
 80026b2:	af04      	add	r7, sp, #16
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	0019      	movs	r1, r3
 80026ba:	1dfb      	adds	r3, r7, #7
 80026bc:	701a      	strb	r2, [r3, #0]
 80026be:	1dbb      	adds	r3, r7, #6
 80026c0:	1c0a      	adds	r2, r1, #0
 80026c2:	701a      	strb	r2, [r3, #0]
    uint8_t res, res1, txbuf_n;
    uint16_t uiTimeOut = 0;
 80026c4:	2316      	movs	r3, #22
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	2200      	movs	r2, #0
 80026ca:	801a      	strh	r2, [r3, #0]

    canCfg->can_id  = id;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	605a      	str	r2, [r3, #4]
    canCfg->ext_flg = ext;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1dfa      	adds	r2, r7, #7
 80026d6:	7812      	ldrb	r2, [r2, #0]
 80026d8:	701a      	strb	r2, [r3, #0]
    canCfg->rtr     = rtrBit;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1dba      	adds	r2, r7, #6
 80026de:	7812      	ldrb	r2, [r2, #0]
 80026e0:	721a      	strb	r2, [r3, #8]

    do
    {
        if (uiTimeOut > 0)
 80026e2:	2316      	movs	r3, #22
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <sendMsg+0x44>
		{
            HW_DELAYMICROSECS(10);//
 80026ec:	200a      	movs	r0, #10
 80026ee:	f000 f99b 	bl	8002a28 <delayMicroseconds>
        }
        res = mcp2515_getNextFreeTXBuf(canCfg,&txbuf_n);                       // info = addr.
 80026f2:	2515      	movs	r5, #21
 80026f4:	197c      	adds	r4, r7, r5
 80026f6:	2313      	movs	r3, #19
 80026f8:	18fa      	adds	r2, r7, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	0011      	movs	r1, r2
 80026fe:	0018      	movs	r0, r3
 8002700:	f7ff ff3e 	bl	8002580 <mcp2515_getNextFreeTXBuf>
 8002704:	0003      	movs	r3, r0
 8002706:	7023      	strb	r3, [r4, #0]
        uiTimeOut++;
 8002708:	2116      	movs	r1, #22
 800270a:	187b      	adds	r3, r7, r1
 800270c:	881a      	ldrh	r2, [r3, #0]
 800270e:	187b      	adds	r3, r7, r1
 8002710:	3201      	adds	r2, #1
 8002712:	801a      	strh	r2, [r3, #0]
    } while (res == MCP_ALLTXBUSY && (uiTimeOut < TIMEOUTVALUE));
 8002714:	197b      	adds	r3, r7, r5
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d103      	bne.n	8002724 <sendMsg+0x76>
 800271c:	187b      	adds	r3, r7, r1
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	2b31      	cmp	r3, #49	; 0x31
 8002722:	d9de      	bls.n	80026e2 <sendMsg+0x34>

    if (uiTimeOut == TIMEOUTVALUE)
 8002724:	2316      	movs	r3, #22
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	2b32      	cmp	r3, #50	; 0x32
 800272c:	d101      	bne.n	8002732 <sendMsg+0x84>
    {
        return CAN_GETTXBFTIMEOUT;                                      // get tx buff time out
 800272e:	2306      	movs	r3, #6
 8002730:	e052      	b.n	80027d8 <sendMsg+0x12a>
    }
    mcp2515_write_canMsg(canCfg,txbuf_n, id, ext, rtrBit, len, buf);
 8002732:	2313      	movs	r3, #19
 8002734:	18fb      	adds	r3, r7, r3
 8002736:	7819      	ldrb	r1, [r3, #0]
 8002738:	1dfb      	adds	r3, r7, #7
 800273a:	781c      	ldrb	r4, [r3, #0]
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002742:	9302      	str	r3, [sp, #8]
 8002744:	2328      	movs	r3, #40	; 0x28
 8002746:	2508      	movs	r5, #8
 8002748:	195b      	adds	r3, r3, r5
 800274a:	19db      	adds	r3, r3, r7
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	9301      	str	r3, [sp, #4]
 8002750:	1dbb      	adds	r3, r7, #6
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	0023      	movs	r3, r4
 8002758:	f7ff fdc4 	bl	80022e4 <mcp2515_write_canMsg>

    if (wait_sent)
 800275c:	2330      	movs	r3, #48	; 0x30
 800275e:	195b      	adds	r3, r3, r5
 8002760:	19db      	adds	r3, r3, r7
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	b25b      	sxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d035      	beq.n	80027d6 <sendMsg+0x128>
    {
        uiTimeOut = 0;
 800276a:	2316      	movs	r3, #22
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	2200      	movs	r2, #0
 8002770:	801a      	strh	r2, [r3, #0]
        do
        {
            if (uiTimeOut > 0)
 8002772:	2316      	movs	r3, #22
 8002774:	18fb      	adds	r3, r7, r3
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <sendMsg+0xd4>
            {
            	HW_DELAYMICROSECS(10);
 800277c:	200a      	movs	r0, #10
 800277e:	f000 f953 	bl	8002a28 <delayMicroseconds>
            }
            uiTimeOut++;
 8002782:	2616      	movs	r6, #22
 8002784:	19bb      	adds	r3, r7, r6
 8002786:	881a      	ldrh	r2, [r3, #0]
 8002788:	19bb      	adds	r3, r7, r6
 800278a:	3201      	adds	r2, #1
 800278c:	801a      	strh	r2, [r3, #0]
            res1 = mcp2515_readRegister(canCfg,txbuf_n - 1);  // read send buff ctrl reg
 800278e:	2313      	movs	r3, #19
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	3b01      	subs	r3, #1
 8002796:	b2da      	uxtb	r2, r3
 8002798:	2514      	movs	r5, #20
 800279a:	197c      	adds	r4, r7, r5
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	0011      	movs	r1, r2
 80027a0:	0018      	movs	r0, r3
 80027a2:	f7ff f82a 	bl	80017fa <mcp2515_readRegister>
 80027a6:	0003      	movs	r3, r0
 80027a8:	7023      	strb	r3, [r4, #0]
            res1 = res1 & 0x08;
 80027aa:	0028      	movs	r0, r5
 80027ac:	183b      	adds	r3, r7, r0
 80027ae:	183a      	adds	r2, r7, r0
 80027b0:	7812      	ldrb	r2, [r2, #0]
 80027b2:	2108      	movs	r1, #8
 80027b4:	400a      	ands	r2, r1
 80027b6:	701a      	strb	r2, [r3, #0]
        } while (res1 && (uiTimeOut < TIMEOUTVALUE));
 80027b8:	183b      	adds	r3, r7, r0
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <sendMsg+0x11a>
 80027c0:	19bb      	adds	r3, r7, r6
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	2b31      	cmp	r3, #49	; 0x31
 80027c6:	d9d4      	bls.n	8002772 <sendMsg+0xc4>

        if (uiTimeOut == TIMEOUTVALUE)
 80027c8:	2316      	movs	r3, #22
 80027ca:	18fb      	adds	r3, r7, r3
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	2b32      	cmp	r3, #50	; 0x32
 80027d0:	d101      	bne.n	80027d6 <sendMsg+0x128>
        {                                     // send msg timeout
            return CAN_SENDMSGTIMEOUT;
 80027d2:	2307      	movs	r3, #7
 80027d4:	e000      	b.n	80027d8 <sendMsg+0x12a>
        }
    }

    return CAN_OK;
 80027d6:	2300      	movs	r3, #0

}
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	b007      	add	sp, #28
 80027de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080027e0 <readMsgBufID>:
** Function name:           readMsgBufID
** Descriptions:            Read message buf and can bus source ID according to status.
**                          Status has to be read with readRxTxStatus.
*********************************************************************************************************/
uint8_t readMsgBufID(CanbusConfig_t* canCfg,uint8_t status, volatile unsigned long* id, volatile uint8_t* ext, volatile uint8_t* rtrBit,volatile uint8_t* len, volatile uint8_t* buf)
{
 80027e0:	b590      	push	{r4, r7, lr}
 80027e2:	b08b      	sub	sp, #44	; 0x2c
 80027e4:	af04      	add	r7, sp, #16
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	607a      	str	r2, [r7, #4]
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	200b      	movs	r0, #11
 80027ee:	183b      	adds	r3, r7, r0
 80027f0:	1c0a      	adds	r2, r1, #0
 80027f2:	701a      	strb	r2, [r3, #0]
    uint8_t rc = CAN_NOMSG;
 80027f4:	2417      	movs	r4, #23
 80027f6:	193b      	adds	r3, r7, r4
 80027f8:	2204      	movs	r2, #4
 80027fa:	701a      	strb	r2, [r3, #0]

    if (status & MCP_RX0IF)
 80027fc:	183b      	adds	r3, r7, r0
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2201      	movs	r2, #1
 8002802:	4013      	ands	r3, r2
 8002804:	d010      	beq.n	8002828 <readMsgBufID+0x48>
    {                                        // Msg in Buffer 0
        mcp2515_read_canMsg(canCfg,MCP_READ_RX0, id, ext, rtrBit, len, buf);
 8002806:	6839      	ldr	r1, [r7, #0]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280e:	9302      	str	r3, [sp, #8]
 8002810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002812:	9301      	str	r3, [sp, #4]
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	000b      	movs	r3, r1
 800281a:	2190      	movs	r1, #144	; 0x90
 800281c:	f7ff fdf5 	bl	800240a <mcp2515_read_canMsg>
        rc = CAN_OK;
 8002820:	193b      	adds	r3, r7, r4
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
 8002826:	e016      	b.n	8002856 <readMsgBufID+0x76>
    }
    else if (status & MCP_RX1IF)
 8002828:	230b      	movs	r3, #11
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2202      	movs	r2, #2
 8002830:	4013      	ands	r3, r2
 8002832:	d010      	beq.n	8002856 <readMsgBufID+0x76>
    {                                 // Msg in Buffer 1
        mcp2515_read_canMsg(canCfg,MCP_READ_RX1, id, ext, rtrBit, len, buf);
 8002834:	6839      	ldr	r1, [r7, #0]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283c:	9302      	str	r3, [sp, #8]
 800283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002840:	9301      	str	r3, [sp, #4]
 8002842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	000b      	movs	r3, r1
 8002848:	2194      	movs	r1, #148	; 0x94
 800284a:	f7ff fdde 	bl	800240a <mcp2515_read_canMsg>
        rc = CAN_OK;
 800284e:	2317      	movs	r3, #23
 8002850:	18fb      	adds	r3, r7, r3
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
    }

    if (rc == CAN_OK)
 8002856:	2317      	movs	r3, #23
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10e      	bne.n	800287e <readMsgBufID+0x9e>
    {
    	canCfg->rtr = *rtrBit;
 8002860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	b2da      	uxtb	r2, r3
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	721a      	strb	r2, [r3, #8]
        // dta_len=*len; // not used on any interface function
    	canCfg->ext_flg = *ext;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	b2da      	uxtb	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	701a      	strb	r2, [r3, #0]
    	canCfg->can_id = *id;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	605a      	str	r2, [r3, #4]
 800287c:	e002      	b.n	8002884 <readMsgBufID+0xa4>
    } else
    {
        *len = 0;
 800287e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
    }

    return rc;
 8002884:	2317      	movs	r3, #23
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	781b      	ldrb	r3, [r3, #0]
}
 800288a:	0018      	movs	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	b007      	add	sp, #28
 8002890:	bd90      	pop	{r4, r7, pc}

08002892 <readMsgBuf>:
** Function name:           readMsgBuf
** Descriptions:            wrapper readMsgBufID func.
**                          Read message buf
*********************************************************************************************************/
uint8_t readMsgBuf(CanbusConfig_t* canCfg, uint8_t *len, uint8_t *buf)
{
 8002892:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002894:	b08b      	sub	sp, #44	; 0x2c
 8002896:	af04      	add	r7, sp, #16
 8002898:	60f8      	str	r0, [r7, #12]
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
	uint8_t status = readRxTxStatus(canCfg);
 800289e:	2617      	movs	r6, #23
 80028a0:	19bc      	adds	r4, r7, r6
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	0018      	movs	r0, r3
 80028a6:	f000 f818 	bl	80028da <readRxTxStatus>
 80028aa:	0003      	movs	r3, r0
 80028ac:	7023      	strb	r3, [r4, #0]

	return readMsgBufID(canCfg, status, &canCfg->can_id, &canCfg->ext_flg, &canCfg->rtr, len, buf);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	1d1c      	adds	r4, r3, #4
 80028b2:	68fd      	ldr	r5, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3308      	adds	r3, #8
 80028b8:	19ba      	adds	r2, r7, r6
 80028ba:	7811      	ldrb	r1, [r2, #0]
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	9202      	str	r2, [sp, #8]
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	9201      	str	r2, [sp, #4]
 80028c6:	9300      	str	r3, [sp, #0]
 80028c8:	002b      	movs	r3, r5
 80028ca:	0022      	movs	r2, r4
 80028cc:	f7ff ff88 	bl	80027e0 <readMsgBufID>
 80028d0:	0003      	movs	r3, r0

}
 80028d2:	0018      	movs	r0, r3
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b007      	add	sp, #28
 80028d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028da <readRxTxStatus>:
** Descriptions:            Read RX and TX interrupt bits. Function uses status reading, but translates.
**                          result to MCP_CANINTF. With this you can check status e.g. on interrupt sr
**                          with one single call to save SPI calls. Then use checkClearRxStatus and
**                          checkClearTxStatus for testing.
*********************************************************************************************************/
uint8_t readRxTxStatus(CanbusConfig_t* canCfg) {
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
    uint8_t ret = (mcp2515_readStatus(canCfg) & (MCP_STAT_TXIF_MASK | MCP_STAT_RXIF_MASK));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7ff f802 	bl	80018ee <mcp2515_readStatus>
 80028ea:	0003      	movs	r3, r0
 80028ec:	0019      	movs	r1, r3
 80028ee:	200f      	movs	r0, #15
 80028f0:	183b      	adds	r3, r7, r0
 80028f2:	2254      	movs	r2, #84	; 0x54
 80028f4:	4391      	bics	r1, r2
 80028f6:	000a      	movs	r2, r1
 80028f8:	701a      	strb	r2, [r3, #0]
    ret = (ret & MCP_STAT_TX0IF ? MCP_TX0IF : 0) |
 80028fa:	183b      	adds	r3, r7, r0
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	105b      	asrs	r3, r3, #1
 8002900:	b25b      	sxtb	r3, r3
 8002902:	2204      	movs	r2, #4
 8002904:	4013      	ands	r3, r2
 8002906:	b25a      	sxtb	r2, r3
          (ret & MCP_STAT_TX1IF ? MCP_TX1IF : 0) |
 8002908:	183b      	adds	r3, r7, r0
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	109b      	asrs	r3, r3, #2
 800290e:	b25b      	sxtb	r3, r3
 8002910:	2108      	movs	r1, #8
 8002912:	400b      	ands	r3, r1
 8002914:	b25b      	sxtb	r3, r3
    ret = (ret & MCP_STAT_TX0IF ? MCP_TX0IF : 0) |
 8002916:	4313      	orrs	r3, r2
 8002918:	b25a      	sxtb	r2, r3
          (ret & MCP_STAT_TX2IF ? MCP_TX2IF : 0) |
 800291a:	183b      	adds	r3, r7, r0
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	b25b      	sxtb	r3, r3
 8002920:	10db      	asrs	r3, r3, #3
 8002922:	b25b      	sxtb	r3, r3
 8002924:	2110      	movs	r1, #16
 8002926:	400b      	ands	r3, r1
 8002928:	b25b      	sxtb	r3, r3
          (ret & MCP_STAT_TX1IF ? MCP_TX1IF : 0) |
 800292a:	4313      	orrs	r3, r2
 800292c:	b25a      	sxtb	r2, r3
          (ret & MCP_STAT_RXIF_MASK); // Rx bits happend to be same on status and MCP_CANINTF
 800292e:	183b      	adds	r3, r7, r0
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	b25b      	sxtb	r3, r3
 8002934:	2103      	movs	r1, #3
 8002936:	400b      	ands	r3, r1
 8002938:	b25b      	sxtb	r3, r3
          (ret & MCP_STAT_TX2IF ? MCP_TX2IF : 0) |
 800293a:	4313      	orrs	r3, r2
 800293c:	b25a      	sxtb	r2, r3
    ret = (ret & MCP_STAT_TX0IF ? MCP_TX0IF : 0) |
 800293e:	183b      	adds	r3, r7, r0
 8002940:	701a      	strb	r2, [r3, #0]
    return ret;
 8002942:	183b      	adds	r3, r7, r0
 8002944:	781b      	ldrb	r3, [r3, #0]
}
 8002946:	0018      	movs	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	b004      	add	sp, #16
 800294c:	bd80      	pop	{r7, pc}

0800294e <checkReceive>:
/*********************************************************************************************************
** Function name:           checkReceive
** Descriptions:            check if got something
*********************************************************************************************************/
uint8_t checkReceive(CanbusConfig_t* canCfg)
{
 800294e:	b5b0      	push	{r4, r5, r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
    uint8_t res;
    res = mcp2515_readStatus(canCfg);
 8002956:	250f      	movs	r5, #15
 8002958:	197c      	adds	r4, r7, r5
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	0018      	movs	r0, r3
 800295e:	f7fe ffc6 	bl	80018ee <mcp2515_readStatus>
 8002962:	0003      	movs	r3, r0
 8002964:	7023      	strb	r3, [r4, #0]
    // RXnIF in Bit 1 and 0
    return ((res & MCP_STAT_RXIF_MASK) ? CAN_MSGAVAIL : CAN_NOMSG);
 8002966:	197b      	adds	r3, r7, r5
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2203      	movs	r2, #3
 800296c:	4013      	ands	r3, r2
 800296e:	d001      	beq.n	8002974 <checkReceive+0x26>
 8002970:	2303      	movs	r3, #3
 8002972:	e000      	b.n	8002976 <checkReceive+0x28>
 8002974:	2304      	movs	r3, #4
}
 8002976:	0018      	movs	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	b004      	add	sp, #16
 800297c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002980 <ChipUnSelectFpC>:




void ChipUnSelectFpC(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_CAN_C_GPIO_Port, CS_CAN_C_Pin, GPIO_PIN_SET);
 8002984:	4b04      	ldr	r3, [pc, #16]	; (8002998 <ChipUnSelectFpC+0x18>)
 8002986:	2201      	movs	r2, #1
 8002988:	2104      	movs	r1, #4
 800298a:	0018      	movs	r0, r3
 800298c:	f001 fc41 	bl	8004212 <HAL_GPIO_WritePin>
}
 8002990:	46c0      	nop			; (mov r8, r8)
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	50000400 	.word	0x50000400

0800299c <ChipSelectFpC>:

void ChipSelectFpC(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_CAN_C_GPIO_Port, CS_CAN_C_Pin, GPIO_PIN_RESET);
 80029a0:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <ChipSelectFpC+0x18>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	2104      	movs	r1, #4
 80029a6:	0018      	movs	r0, r3
 80029a8:	f001 fc33 	bl	8004212 <HAL_GPIO_WritePin>
}
 80029ac:	46c0      	nop			; (mov r8, r8)
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	50000400 	.word	0x50000400

080029b8 <SPIReadWriteFpC>:

void SPIReadWriteFpC(uint8_t data)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	0002      	movs	r2, r0
 80029c0:	1dfb      	adds	r3, r7, #7
 80029c2:	701a      	strb	r2, [r3, #0]
	 HAL_SPI_Transmit(&hspi1, (uint8_t *)&data, 1, 100);
 80029c4:	1df9      	adds	r1, r7, #7
 80029c6:	4804      	ldr	r0, [pc, #16]	; (80029d8 <SPIReadWriteFpC+0x20>)
 80029c8:	2364      	movs	r3, #100	; 0x64
 80029ca:	2201      	movs	r2, #1
 80029cc:	f002 fcd8 	bl	8005380 <HAL_SPI_Transmit>
}
 80029d0:	46c0      	nop			; (mov r8, r8)
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b002      	add	sp, #8
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	200003f0 	.word	0x200003f0

080029dc <SPIWriteFpC>:

void SPIWriteFpC(uint8_t data)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	0002      	movs	r2, r0
 80029e4:	1dfb      	adds	r3, r7, #7
 80029e6:	701a      	strb	r2, [r3, #0]
	 HAL_SPI_Transmit(&hspi1, (uint8_t *)&data, 1, 100);
 80029e8:	1df9      	adds	r1, r7, #7
 80029ea:	4804      	ldr	r0, [pc, #16]	; (80029fc <SPIWriteFpC+0x20>)
 80029ec:	2364      	movs	r3, #100	; 0x64
 80029ee:	2201      	movs	r2, #1
 80029f0:	f002 fcc6 	bl	8005380 <HAL_SPI_Transmit>
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b002      	add	sp, #8
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	200003f0 	.word	0x200003f0

08002a00 <SPIReadFpC>:

uint8_t SPIReadFpC(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
	uint8_t data = 0x00;
 8002a06:	1dfb      	adds	r3, r7, #7
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]

	HAL_SPI_Receive(&hspi1, (uint8_t *)&data, 1, 100);
 8002a0c:	1df9      	adds	r1, r7, #7
 8002a0e:	4805      	ldr	r0, [pc, #20]	; (8002a24 <SPIReadFpC+0x24>)
 8002a10:	2364      	movs	r3, #100	; 0x64
 8002a12:	2201      	movs	r2, #1
 8002a14:	f002 fe0c 	bl	8005630 <HAL_SPI_Receive>

	return data;
 8002a18:	1dfb      	adds	r3, r7, #7
 8002a1a:	781b      	ldrb	r3, [r3, #0]
}
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b002      	add	sp, #8
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	200003f0 	.word	0x200003f0

08002a28 <delayMicroseconds>:



void delayMicroseconds(uint32_t microseconds)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
    uint32_t loops_per_microsecond = 72;
 8002a30:	2348      	movs	r3, #72	; 0x48
 8002a32:	613b      	str	r3, [r7, #16]
    uint32_t total_loops = microseconds * loops_per_microsecond;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4353      	muls	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]

    // Döngü ile bekle
    for (uint32_t i = 0; i < total_loops; ++i) {
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	e002      	b.n	8002a48 <delayMicroseconds+0x20>
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	3301      	adds	r3, #1
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d3f8      	bcc.n	8002a42 <delayMicroseconds+0x1a>

    }
}
 8002a50:	46c0      	nop			; (mov r8, r8)
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b006      	add	sp, #24
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a62:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <HAL_MspInit+0x44>)
 8002a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a66:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <HAL_MspInit+0x44>)
 8002a68:	2101      	movs	r1, #1
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40
 8002a6e:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <HAL_MspInit+0x44>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	2201      	movs	r2, #1
 8002a74:	4013      	ands	r3, r2
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a7a:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <HAL_MspInit+0x44>)
 8002a7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a7e:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <HAL_MspInit+0x44>)
 8002a80:	2180      	movs	r1, #128	; 0x80
 8002a82:	0549      	lsls	r1, r1, #21
 8002a84:	430a      	orrs	r2, r1
 8002a86:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_MspInit+0x44>)
 8002a8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a8c:	2380      	movs	r3, #128	; 0x80
 8002a8e:	055b      	lsls	r3, r3, #21
 8002a90:	4013      	ands	r3, r2
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b002      	add	sp, #8
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	46c0      	nop			; (mov r8, r8)
 8002aa0:	40021000 	.word	0x40021000

08002aa4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002aa4:	b590      	push	{r4, r7, lr}
 8002aa6:	b09f      	sub	sp, #124	; 0x7c
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aac:	2364      	movs	r3, #100	; 0x64
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	2314      	movs	r3, #20
 8002ab4:	001a      	movs	r2, r3
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	f004 fa02 	bl	8006ec0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002abc:	2418      	movs	r4, #24
 8002abe:	193b      	adds	r3, r7, r4
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	234c      	movs	r3, #76	; 0x4c
 8002ac4:	001a      	movs	r2, r3
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	f004 f9fa 	bl	8006ec0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a60      	ldr	r2, [pc, #384]	; (8002c54 <HAL_FDCAN_MspInit+0x1b0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d15a      	bne.n	8002b8c <HAL_FDCAN_MspInit+0xe8>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002ad6:	193b      	adds	r3, r7, r4
 8002ad8:	2280      	movs	r2, #128	; 0x80
 8002ada:	0492      	lsls	r2, r2, #18
 8002adc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002ade:	193b      	adds	r3, r7, r4
 8002ae0:	2280      	movs	r2, #128	; 0x80
 8002ae2:	0052      	lsls	r2, r2, #1
 8002ae4:	649a      	str	r2, [r3, #72]	; 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ae6:	193b      	adds	r3, r7, r4
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f002 f955 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 8002aee:	1e03      	subs	r3, r0, #0
 8002af0:	d001      	beq.n	8002af6 <HAL_FDCAN_MspInit+0x52>
    {
      Error_Handler();
 8002af2:	f7fe fde1 	bl	80016b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002af6:	4b58      	ldr	r3, [pc, #352]	; (8002c58 <HAL_FDCAN_MspInit+0x1b4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	1c5a      	adds	r2, r3, #1
 8002afc:	4b56      	ldr	r3, [pc, #344]	; (8002c58 <HAL_FDCAN_MspInit+0x1b4>)
 8002afe:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002b00:	4b55      	ldr	r3, [pc, #340]	; (8002c58 <HAL_FDCAN_MspInit+0x1b4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d10d      	bne.n	8002b24 <HAL_FDCAN_MspInit+0x80>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002b08:	4b54      	ldr	r3, [pc, #336]	; (8002c5c <HAL_FDCAN_MspInit+0x1b8>)
 8002b0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b0c:	4b53      	ldr	r3, [pc, #332]	; (8002c5c <HAL_FDCAN_MspInit+0x1b8>)
 8002b0e:	2180      	movs	r1, #128	; 0x80
 8002b10:	0149      	lsls	r1, r1, #5
 8002b12:	430a      	orrs	r2, r1
 8002b14:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b16:	4b51      	ldr	r3, [pc, #324]	; (8002c5c <HAL_FDCAN_MspInit+0x1b8>)
 8002b18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b1a:	2380      	movs	r3, #128	; 0x80
 8002b1c:	015b      	lsls	r3, r3, #5
 8002b1e:	4013      	ands	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b24:	4b4d      	ldr	r3, [pc, #308]	; (8002c5c <HAL_FDCAN_MspInit+0x1b8>)
 8002b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b28:	4b4c      	ldr	r3, [pc, #304]	; (8002c5c <HAL_FDCAN_MspInit+0x1b8>)
 8002b2a:	2102      	movs	r1, #2
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	635a      	str	r2, [r3, #52]	; 0x34
 8002b30:	4b4a      	ldr	r3, [pc, #296]	; (8002c5c <HAL_FDCAN_MspInit+0x1b8>)
 8002b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b34:	2202      	movs	r2, #2
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b3c:	2164      	movs	r1, #100	; 0x64
 8002b3e:	187b      	adds	r3, r7, r1
 8002b40:	22c0      	movs	r2, #192	; 0xc0
 8002b42:	0092      	lsls	r2, r2, #2
 8002b44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b46:	187b      	adds	r3, r7, r1
 8002b48:	2202      	movs	r2, #2
 8002b4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	187b      	adds	r3, r7, r1
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b52:	187b      	adds	r3, r7, r1
 8002b54:	2200      	movs	r2, #0
 8002b56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 8002b58:	187b      	adds	r3, r7, r1
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5e:	187b      	adds	r3, r7, r1
 8002b60:	4a3f      	ldr	r2, [pc, #252]	; (8002c60 <HAL_FDCAN_MspInit+0x1bc>)
 8002b62:	0019      	movs	r1, r3
 8002b64:	0010      	movs	r0, r2
 8002b66:	f001 f9cb 	bl	8003f00 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	2015      	movs	r0, #21
 8002b70:	f000 fb28 	bl	80031c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 8002b74:	2015      	movs	r0, #21
 8002b76:	f000 fb3a 	bl	80031ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 0, 0);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	2016      	movs	r0, #22
 8002b80:	f000 fb20 	bl	80031c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 8002b84:	2016      	movs	r0, #22
 8002b86:	f000 fb32 	bl	80031ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8002b8a:	e05e      	b.n	8002c4a <HAL_FDCAN_MspInit+0x1a6>
  else if(hfdcan->Instance==FDCAN2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a34      	ldr	r2, [pc, #208]	; (8002c64 <HAL_FDCAN_MspInit+0x1c0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d159      	bne.n	8002c4a <HAL_FDCAN_MspInit+0x1a6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002b96:	2118      	movs	r1, #24
 8002b98:	187b      	adds	r3, r7, r1
 8002b9a:	2280      	movs	r2, #128	; 0x80
 8002b9c:	0492      	lsls	r2, r2, #18
 8002b9e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002ba0:	187b      	adds	r3, r7, r1
 8002ba2:	2280      	movs	r2, #128	; 0x80
 8002ba4:	0052      	lsls	r2, r2, #1
 8002ba6:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ba8:	187b      	adds	r3, r7, r1
 8002baa:	0018      	movs	r0, r3
 8002bac:	f002 f8f4 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 8002bb0:	1e03      	subs	r3, r0, #0
 8002bb2:	d001      	beq.n	8002bb8 <HAL_FDCAN_MspInit+0x114>
      Error_Handler();
 8002bb4:	f7fe fd80 	bl	80016b8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002bb8:	4b27      	ldr	r3, [pc, #156]	; (8002c58 <HAL_FDCAN_MspInit+0x1b4>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	1c5a      	adds	r2, r3, #1
 8002bbe:	4b26      	ldr	r3, [pc, #152]	; (8002c58 <HAL_FDCAN_MspInit+0x1b4>)
 8002bc0:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002bc2:	4b25      	ldr	r3, [pc, #148]	; (8002c58 <HAL_FDCAN_MspInit+0x1b4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d10d      	bne.n	8002be6 <HAL_FDCAN_MspInit+0x142>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002bca:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <HAL_FDCAN_MspInit+0x1b8>)
 8002bcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bce:	4b23      	ldr	r3, [pc, #140]	; (8002c5c <HAL_FDCAN_MspInit+0x1b8>)
 8002bd0:	2180      	movs	r1, #128	; 0x80
 8002bd2:	0149      	lsls	r1, r1, #5
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bd8:	4b20      	ldr	r3, [pc, #128]	; (8002c5c <HAL_FDCAN_MspInit+0x1b8>)
 8002bda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	015b      	lsls	r3, r3, #5
 8002be0:	4013      	ands	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002be6:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <HAL_FDCAN_MspInit+0x1b8>)
 8002be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bea:	4b1c      	ldr	r3, [pc, #112]	; (8002c5c <HAL_FDCAN_MspInit+0x1b8>)
 8002bec:	2102      	movs	r1, #2
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	635a      	str	r2, [r3, #52]	; 0x34
 8002bf2:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <HAL_FDCAN_MspInit+0x1b8>)
 8002bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002bfe:	2164      	movs	r1, #100	; 0x64
 8002c00:	187b      	adds	r3, r7, r1
 8002c02:	2203      	movs	r2, #3
 8002c04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c06:	187b      	adds	r3, r7, r1
 8002c08:	2202      	movs	r2, #2
 8002c0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	187b      	adds	r3, r7, r1
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c12:	187b      	adds	r3, r7, r1
 8002c14:	2200      	movs	r2, #0
 8002c16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN2;
 8002c18:	187b      	adds	r3, r7, r1
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c1e:	187b      	adds	r3, r7, r1
 8002c20:	4a0f      	ldr	r2, [pc, #60]	; (8002c60 <HAL_FDCAN_MspInit+0x1bc>)
 8002c22:	0019      	movs	r1, r3
 8002c24:	0010      	movs	r0, r2
 8002c26:	f001 f96b 	bl	8003f00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	2015      	movs	r0, #21
 8002c30:	f000 fac8 	bl	80031c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 8002c34:	2015      	movs	r0, #21
 8002c36:	f000 fada 	bl	80031ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM17_FDCAN_IT1_IRQn, 0, 0);
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	2016      	movs	r0, #22
 8002c40:	f000 fac0 	bl	80031c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_FDCAN_IT1_IRQn);
 8002c44:	2016      	movs	r0, #22
 8002c46:	f000 fad2 	bl	80031ee <HAL_NVIC_EnableIRQ>
}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b01f      	add	sp, #124	; 0x7c
 8002c50:	bd90      	pop	{r4, r7, pc}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	40006400 	.word	0x40006400
 8002c58:	200005ec 	.word	0x200005ec
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	50000400 	.word	0x50000400
 8002c64:	40006800 	.word	0x40006800

08002c68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b08b      	sub	sp, #44	; 0x2c
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c70:	2414      	movs	r4, #20
 8002c72:	193b      	adds	r3, r7, r4
 8002c74:	0018      	movs	r0, r3
 8002c76:	2314      	movs	r3, #20
 8002c78:	001a      	movs	r2, r3
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	f004 f920 	bl	8006ec0 <memset>
  if(hspi->Instance==SPI1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a1b      	ldr	r2, [pc, #108]	; (8002cf4 <HAL_SPI_MspInit+0x8c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d130      	bne.n	8002cec <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c8a:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <HAL_SPI_MspInit+0x90>)
 8002c8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c8e:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <HAL_SPI_MspInit+0x90>)
 8002c90:	2180      	movs	r1, #128	; 0x80
 8002c92:	0149      	lsls	r1, r1, #5
 8002c94:	430a      	orrs	r2, r1
 8002c96:	641a      	str	r2, [r3, #64]	; 0x40
 8002c98:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <HAL_SPI_MspInit+0x90>)
 8002c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	015b      	lsls	r3, r3, #5
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca6:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <HAL_SPI_MspInit+0x90>)
 8002ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002caa:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <HAL_SPI_MspInit+0x90>)
 8002cac:	2101      	movs	r1, #1
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	635a      	str	r2, [r3, #52]	; 0x34
 8002cb2:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <HAL_SPI_MspInit+0x90>)
 8002cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 8002cbe:	0021      	movs	r1, r4
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	2246      	movs	r2, #70	; 0x46
 8002cc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc6:	187b      	adds	r3, r7, r1
 8002cc8:	2202      	movs	r2, #2
 8002cca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	187b      	adds	r3, r7, r1
 8002cce:	2200      	movs	r2, #0
 8002cd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd2:	187b      	adds	r3, r7, r1
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002cd8:	187b      	adds	r3, r7, r1
 8002cda:	2200      	movs	r2, #0
 8002cdc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cde:	187a      	adds	r2, r7, r1
 8002ce0:	23a0      	movs	r3, #160	; 0xa0
 8002ce2:	05db      	lsls	r3, r3, #23
 8002ce4:	0011      	movs	r1, r2
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f001 f90a 	bl	8003f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002cec:	46c0      	nop			; (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b00b      	add	sp, #44	; 0x2c
 8002cf2:	bd90      	pop	{r4, r7, pc}
 8002cf4:	40013000 	.word	0x40013000
 8002cf8:	40021000 	.word	0x40021000

08002cfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cfc:	b590      	push	{r4, r7, lr}
 8002cfe:	b09d      	sub	sp, #116	; 0x74
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d04:	235c      	movs	r3, #92	; 0x5c
 8002d06:	18fb      	adds	r3, r7, r3
 8002d08:	0018      	movs	r0, r3
 8002d0a:	2314      	movs	r3, #20
 8002d0c:	001a      	movs	r2, r3
 8002d0e:	2100      	movs	r1, #0
 8002d10:	f004 f8d6 	bl	8006ec0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d14:	2410      	movs	r4, #16
 8002d16:	193b      	adds	r3, r7, r4
 8002d18:	0018      	movs	r0, r3
 8002d1a:	234c      	movs	r3, #76	; 0x4c
 8002d1c:	001a      	movs	r2, r3
 8002d1e:	2100      	movs	r1, #0
 8002d20:	f004 f8ce 	bl	8006ec0 <memset>
  if(huart->Instance==USART1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a23      	ldr	r2, [pc, #140]	; (8002db8 <HAL_UART_MspInit+0xbc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d13f      	bne.n	8002dae <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d2e:	193b      	adds	r3, r7, r4
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002d34:	193b      	adds	r3, r7, r4
 8002d36:	2200      	movs	r2, #0
 8002d38:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d3a:	193b      	adds	r3, r7, r4
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f002 f82b 	bl	8004d98 <HAL_RCCEx_PeriphCLKConfig>
 8002d42:	1e03      	subs	r3, r0, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d46:	f7fe fcb7 	bl	80016b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d4a:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <HAL_UART_MspInit+0xc0>)
 8002d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d4e:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <HAL_UART_MspInit+0xc0>)
 8002d50:	2180      	movs	r1, #128	; 0x80
 8002d52:	01c9      	lsls	r1, r1, #7
 8002d54:	430a      	orrs	r2, r1
 8002d56:	641a      	str	r2, [r3, #64]	; 0x40
 8002d58:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <HAL_UART_MspInit+0xc0>)
 8002d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	01db      	lsls	r3, r3, #7
 8002d60:	4013      	ands	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d66:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <HAL_UART_MspInit+0xc0>)
 8002d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d6a:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <HAL_UART_MspInit+0xc0>)
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	635a      	str	r2, [r3, #52]	; 0x34
 8002d72:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <HAL_UART_MspInit+0xc0>)
 8002d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d76:	2201      	movs	r2, #1
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d7e:	215c      	movs	r1, #92	; 0x5c
 8002d80:	187b      	adds	r3, r7, r1
 8002d82:	22c0      	movs	r2, #192	; 0xc0
 8002d84:	00d2      	lsls	r2, r2, #3
 8002d86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d88:	187b      	adds	r3, r7, r1
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8e:	187b      	adds	r3, r7, r1
 8002d90:	2200      	movs	r2, #0
 8002d92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	2200      	movs	r2, #0
 8002d98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002d9a:	187b      	adds	r3, r7, r1
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da0:	187a      	adds	r2, r7, r1
 8002da2:	23a0      	movs	r3, #160	; 0xa0
 8002da4:	05db      	lsls	r3, r3, #23
 8002da6:	0011      	movs	r1, r2
 8002da8:	0018      	movs	r0, r3
 8002daa:	f001 f8a9 	bl	8003f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b01d      	add	sp, #116	; 0x74
 8002db4:	bd90      	pop	{r4, r7, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	40013800 	.word	0x40013800
 8002dbc:	40021000 	.word	0x40021000

08002dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dc4:	e7fe      	b.n	8002dc4 <NMI_Handler+0x4>

08002dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dca:	e7fe      	b.n	8002dca <HardFault_Handler+0x4>

08002dcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002dd0:	46c0      	nop			; (mov r8, r8)
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002de4:	f000 f902 	bl	8002fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002de8:	46c0      	nop			; (mov r8, r8)
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_CAN_C_Pin);
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	0018      	movs	r0, r3
 8002df8:	f001 fa44 	bl	8004284 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <TIM16_FDCAN_IT0_IRQHandler+0x1c>)
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f000 fdfd 	bl	8003a0a <HAL_FDCAN_IRQHandler>
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002e10:	4b04      	ldr	r3, [pc, #16]	; (8002e24 <TIM16_FDCAN_IT0_IRQHandler+0x20>)
 8002e12:	0018      	movs	r0, r3
 8002e14:	f000 fdf9 	bl	8003a0a <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8002e18:	46c0      	nop			; (mov r8, r8)
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	20000328 	.word	0x20000328
 8002e24:	2000038c 	.word	0x2000038c

08002e28 <TIM17_FDCAN_IT1_IRQHandler>:

/**
  * @brief This function handles TIM17, FDCAN1_IT1 and FDCAN2_IT1 Interrupt.
  */
void TIM17_FDCAN_IT1_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 0 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <TIM17_FDCAN_IT1_IRQHandler+0x1c>)
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f000 fdeb 	bl	8003a0a <HAL_FDCAN_IRQHandler>
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8002e34:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <TIM17_FDCAN_IT1_IRQHandler+0x20>)
 8002e36:	0018      	movs	r0, r3
 8002e38:	f000 fde7 	bl	8003a0a <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM17_FDCAN_IT1_IRQn 1 */

  /* USER CODE END TIM17_FDCAN_IT1_IRQn 1 */
}
 8002e3c:	46c0      	nop			; (mov r8, r8)
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	20000328 	.word	0x20000328
 8002e48:	2000038c 	.word	0x2000038c

08002e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e54:	4a14      	ldr	r2, [pc, #80]	; (8002ea8 <_sbrk+0x5c>)
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <_sbrk+0x60>)
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e60:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <_sbrk+0x64>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <_sbrk+0x64>)
 8002e6a:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <_sbrk+0x68>)
 8002e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e6e:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <_sbrk+0x64>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	18d3      	adds	r3, r2, r3
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d207      	bcs.n	8002e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e7c:	f003 fff6 	bl	8006e6c <__errno>
 8002e80:	0003      	movs	r3, r0
 8002e82:	220c      	movs	r2, #12
 8002e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e86:	2301      	movs	r3, #1
 8002e88:	425b      	negs	r3, r3
 8002e8a:	e009      	b.n	8002ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e8c:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <_sbrk+0x64>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e92:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <_sbrk+0x64>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	18d2      	adds	r2, r2, r3
 8002e9a:	4b05      	ldr	r3, [pc, #20]	; (8002eb0 <_sbrk+0x64>)
 8002e9c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	b006      	add	sp, #24
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20024000 	.word	0x20024000
 8002eac:	00000400 	.word	0x00000400
 8002eb0:	200005f0 	.word	0x200005f0
 8002eb4:	20000608 	.word	0x20000608

08002eb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ebc:	46c0      	nop			; (mov r8, r8)
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ec4:	480d      	ldr	r0, [pc, #52]	; (8002efc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ec6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ec8:	f7ff fff6 	bl	8002eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ecc:	480c      	ldr	r0, [pc, #48]	; (8002f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ece:	490d      	ldr	r1, [pc, #52]	; (8002f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ed0:	4a0d      	ldr	r2, [pc, #52]	; (8002f08 <LoopForever+0xe>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ed4:	e002      	b.n	8002edc <LoopCopyDataInit>

08002ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eda:	3304      	adds	r3, #4

08002edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee0:	d3f9      	bcc.n	8002ed6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ee4:	4c0a      	ldr	r4, [pc, #40]	; (8002f10 <LoopForever+0x16>)
  movs r3, #0
 8002ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee8:	e001      	b.n	8002eee <LoopFillZerobss>

08002eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eec:	3204      	adds	r2, #4

08002eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef0:	d3fb      	bcc.n	8002eea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ef2:	f003 ffc1 	bl	8006e78 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002ef6:	f7fd fee9 	bl	8000ccc <main>

08002efa <LoopForever>:

LoopForever:
  b LoopForever
 8002efa:	e7fe      	b.n	8002efa <LoopForever>
  ldr   r0, =_estack
 8002efc:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8002f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f04:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002f08:	08007b98 	.word	0x08007b98
  ldr r2, =_sbss
 8002f0c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002f10:	20000608 	.word	0x20000608

08002f14 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f14:	e7fe      	b.n	8002f14 <ADC1_COMP_IRQHandler>
	...

08002f18 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f1e:	1dfb      	adds	r3, r7, #7
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f24:	4b0b      	ldr	r3, [pc, #44]	; (8002f54 <HAL_Init+0x3c>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	4b0a      	ldr	r3, [pc, #40]	; (8002f54 <HAL_Init+0x3c>)
 8002f2a:	2180      	movs	r1, #128	; 0x80
 8002f2c:	0049      	lsls	r1, r1, #1
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f32:	2003      	movs	r0, #3
 8002f34:	f000 f810 	bl	8002f58 <HAL_InitTick>
 8002f38:	1e03      	subs	r3, r0, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002f3c:	1dfb      	adds	r3, r7, #7
 8002f3e:	2201      	movs	r2, #1
 8002f40:	701a      	strb	r2, [r3, #0]
 8002f42:	e001      	b.n	8002f48 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002f44:	f7ff fd8a 	bl	8002a5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f48:	1dfb      	adds	r3, r7, #7
 8002f4a:	781b      	ldrb	r3, [r3, #0]
}
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b002      	add	sp, #8
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40022000 	.word	0x40022000

08002f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f60:	230f      	movs	r3, #15
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002f68:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <HAL_InitTick+0x88>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d02b      	beq.n	8002fc8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002f70:	4b1c      	ldr	r3, [pc, #112]	; (8002fe4 <HAL_InitTick+0x8c>)
 8002f72:	681c      	ldr	r4, [r3, #0]
 8002f74:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <HAL_InitTick+0x88>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	0019      	movs	r1, r3
 8002f7a:	23fa      	movs	r3, #250	; 0xfa
 8002f7c:	0098      	lsls	r0, r3, #2
 8002f7e:	f7fd f8d3 	bl	8000128 <__udivsi3>
 8002f82:	0003      	movs	r3, r0
 8002f84:	0019      	movs	r1, r3
 8002f86:	0020      	movs	r0, r4
 8002f88:	f7fd f8ce 	bl	8000128 <__udivsi3>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f000 f93d 	bl	800320e <HAL_SYSTICK_Config>
 8002f94:	1e03      	subs	r3, r0, #0
 8002f96:	d112      	bne.n	8002fbe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d80a      	bhi.n	8002fb4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	425b      	negs	r3, r3
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f000 f90c 	bl	80031c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fac:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <HAL_InitTick+0x90>)
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	e00d      	b.n	8002fd0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002fb4:	230f      	movs	r3, #15
 8002fb6:	18fb      	adds	r3, r7, r3
 8002fb8:	2201      	movs	r2, #1
 8002fba:	701a      	strb	r2, [r3, #0]
 8002fbc:	e008      	b.n	8002fd0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002fbe:	230f      	movs	r3, #15
 8002fc0:	18fb      	adds	r3, r7, r3
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
 8002fc6:	e003      	b.n	8002fd0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002fc8:	230f      	movs	r3, #15
 8002fca:	18fb      	adds	r3, r7, r3
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002fd0:	230f      	movs	r3, #15
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	781b      	ldrb	r3, [r3, #0]
}
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b005      	add	sp, #20
 8002fdc:	bd90      	pop	{r4, r7, pc}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	2000001c 	.word	0x2000001c
 8002fe4:	20000014 	.word	0x20000014
 8002fe8:	20000018 	.word	0x20000018

08002fec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ff0:	4b05      	ldr	r3, [pc, #20]	; (8003008 <HAL_IncTick+0x1c>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	001a      	movs	r2, r3
 8002ff6:	4b05      	ldr	r3, [pc, #20]	; (800300c <HAL_IncTick+0x20>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	18d2      	adds	r2, r2, r3
 8002ffc:	4b03      	ldr	r3, [pc, #12]	; (800300c <HAL_IncTick+0x20>)
 8002ffe:	601a      	str	r2, [r3, #0]
}
 8003000:	46c0      	nop			; (mov r8, r8)
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	2000001c 	.word	0x2000001c
 800300c:	200005f4 	.word	0x200005f4

08003010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  return uwTick;
 8003014:	4b02      	ldr	r3, [pc, #8]	; (8003020 <HAL_GetTick+0x10>)
 8003016:	681b      	ldr	r3, [r3, #0]
}
 8003018:	0018      	movs	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	200005f4 	.word	0x200005f4

08003024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800302c:	f7ff fff0 	bl	8003010 <HAL_GetTick>
 8003030:	0003      	movs	r3, r0
 8003032:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	3301      	adds	r3, #1
 800303c:	d005      	beq.n	800304a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <HAL_Delay+0x44>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	001a      	movs	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	189b      	adds	r3, r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800304a:	46c0      	nop			; (mov r8, r8)
 800304c:	f7ff ffe0 	bl	8003010 <HAL_GetTick>
 8003050:	0002      	movs	r2, r0
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	429a      	cmp	r2, r3
 800305a:	d8f7      	bhi.n	800304c <HAL_Delay+0x28>
  {
  }
}
 800305c:	46c0      	nop			; (mov r8, r8)
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	46bd      	mov	sp, r7
 8003062:	b004      	add	sp, #16
 8003064:	bd80      	pop	{r7, pc}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	2000001c 	.word	0x2000001c

0800306c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	0002      	movs	r2, r0
 8003074:	1dfb      	adds	r3, r7, #7
 8003076:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003078:	1dfb      	adds	r3, r7, #7
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b7f      	cmp	r3, #127	; 0x7f
 800307e:	d809      	bhi.n	8003094 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003080:	1dfb      	adds	r3, r7, #7
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	001a      	movs	r2, r3
 8003086:	231f      	movs	r3, #31
 8003088:	401a      	ands	r2, r3
 800308a:	4b04      	ldr	r3, [pc, #16]	; (800309c <__NVIC_EnableIRQ+0x30>)
 800308c:	2101      	movs	r1, #1
 800308e:	4091      	lsls	r1, r2
 8003090:	000a      	movs	r2, r1
 8003092:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003094:	46c0      	nop			; (mov r8, r8)
 8003096:	46bd      	mov	sp, r7
 8003098:	b002      	add	sp, #8
 800309a:	bd80      	pop	{r7, pc}
 800309c:	e000e100 	.word	0xe000e100

080030a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030a0:	b590      	push	{r4, r7, lr}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	0002      	movs	r2, r0
 80030a8:	6039      	str	r1, [r7, #0]
 80030aa:	1dfb      	adds	r3, r7, #7
 80030ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030ae:	1dfb      	adds	r3, r7, #7
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b7f      	cmp	r3, #127	; 0x7f
 80030b4:	d828      	bhi.n	8003108 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030b6:	4a2f      	ldr	r2, [pc, #188]	; (8003174 <__NVIC_SetPriority+0xd4>)
 80030b8:	1dfb      	adds	r3, r7, #7
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	b25b      	sxtb	r3, r3
 80030be:	089b      	lsrs	r3, r3, #2
 80030c0:	33c0      	adds	r3, #192	; 0xc0
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	589b      	ldr	r3, [r3, r2]
 80030c6:	1dfa      	adds	r2, r7, #7
 80030c8:	7812      	ldrb	r2, [r2, #0]
 80030ca:	0011      	movs	r1, r2
 80030cc:	2203      	movs	r2, #3
 80030ce:	400a      	ands	r2, r1
 80030d0:	00d2      	lsls	r2, r2, #3
 80030d2:	21ff      	movs	r1, #255	; 0xff
 80030d4:	4091      	lsls	r1, r2
 80030d6:	000a      	movs	r2, r1
 80030d8:	43d2      	mvns	r2, r2
 80030da:	401a      	ands	r2, r3
 80030dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	019b      	lsls	r3, r3, #6
 80030e2:	22ff      	movs	r2, #255	; 0xff
 80030e4:	401a      	ands	r2, r3
 80030e6:	1dfb      	adds	r3, r7, #7
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	0018      	movs	r0, r3
 80030ec:	2303      	movs	r3, #3
 80030ee:	4003      	ands	r3, r0
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030f4:	481f      	ldr	r0, [pc, #124]	; (8003174 <__NVIC_SetPriority+0xd4>)
 80030f6:	1dfb      	adds	r3, r7, #7
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	b25b      	sxtb	r3, r3
 80030fc:	089b      	lsrs	r3, r3, #2
 80030fe:	430a      	orrs	r2, r1
 8003100:	33c0      	adds	r3, #192	; 0xc0
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003106:	e031      	b.n	800316c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003108:	4a1b      	ldr	r2, [pc, #108]	; (8003178 <__NVIC_SetPriority+0xd8>)
 800310a:	1dfb      	adds	r3, r7, #7
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	0019      	movs	r1, r3
 8003110:	230f      	movs	r3, #15
 8003112:	400b      	ands	r3, r1
 8003114:	3b08      	subs	r3, #8
 8003116:	089b      	lsrs	r3, r3, #2
 8003118:	3306      	adds	r3, #6
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	18d3      	adds	r3, r2, r3
 800311e:	3304      	adds	r3, #4
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	1dfa      	adds	r2, r7, #7
 8003124:	7812      	ldrb	r2, [r2, #0]
 8003126:	0011      	movs	r1, r2
 8003128:	2203      	movs	r2, #3
 800312a:	400a      	ands	r2, r1
 800312c:	00d2      	lsls	r2, r2, #3
 800312e:	21ff      	movs	r1, #255	; 0xff
 8003130:	4091      	lsls	r1, r2
 8003132:	000a      	movs	r2, r1
 8003134:	43d2      	mvns	r2, r2
 8003136:	401a      	ands	r2, r3
 8003138:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	019b      	lsls	r3, r3, #6
 800313e:	22ff      	movs	r2, #255	; 0xff
 8003140:	401a      	ands	r2, r3
 8003142:	1dfb      	adds	r3, r7, #7
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	0018      	movs	r0, r3
 8003148:	2303      	movs	r3, #3
 800314a:	4003      	ands	r3, r0
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003150:	4809      	ldr	r0, [pc, #36]	; (8003178 <__NVIC_SetPriority+0xd8>)
 8003152:	1dfb      	adds	r3, r7, #7
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	001c      	movs	r4, r3
 8003158:	230f      	movs	r3, #15
 800315a:	4023      	ands	r3, r4
 800315c:	3b08      	subs	r3, #8
 800315e:	089b      	lsrs	r3, r3, #2
 8003160:	430a      	orrs	r2, r1
 8003162:	3306      	adds	r3, #6
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	18c3      	adds	r3, r0, r3
 8003168:	3304      	adds	r3, #4
 800316a:	601a      	str	r2, [r3, #0]
}
 800316c:	46c0      	nop			; (mov r8, r8)
 800316e:	46bd      	mov	sp, r7
 8003170:	b003      	add	sp, #12
 8003172:	bd90      	pop	{r4, r7, pc}
 8003174:	e000e100 	.word	0xe000e100
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	1e5a      	subs	r2, r3, #1
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	045b      	lsls	r3, r3, #17
 800318c:	429a      	cmp	r2, r3
 800318e:	d301      	bcc.n	8003194 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003190:	2301      	movs	r3, #1
 8003192:	e010      	b.n	80031b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003194:	4b0a      	ldr	r3, [pc, #40]	; (80031c0 <SysTick_Config+0x44>)
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	3a01      	subs	r2, #1
 800319a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800319c:	2301      	movs	r3, #1
 800319e:	425b      	negs	r3, r3
 80031a0:	2103      	movs	r1, #3
 80031a2:	0018      	movs	r0, r3
 80031a4:	f7ff ff7c 	bl	80030a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a8:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <SysTick_Config+0x44>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ae:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <SysTick_Config+0x44>)
 80031b0:	2207      	movs	r2, #7
 80031b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	0018      	movs	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b002      	add	sp, #8
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	e000e010 	.word	0xe000e010

080031c4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
 80031ce:	210f      	movs	r1, #15
 80031d0:	187b      	adds	r3, r7, r1
 80031d2:	1c02      	adds	r2, r0, #0
 80031d4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	187b      	adds	r3, r7, r1
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	b25b      	sxtb	r3, r3
 80031de:	0011      	movs	r1, r2
 80031e0:	0018      	movs	r0, r3
 80031e2:	f7ff ff5d 	bl	80030a0 <__NVIC_SetPriority>
}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b004      	add	sp, #16
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	0002      	movs	r2, r0
 80031f6:	1dfb      	adds	r3, r7, #7
 80031f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031fa:	1dfb      	adds	r3, r7, #7
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	b25b      	sxtb	r3, r3
 8003200:	0018      	movs	r0, r3
 8003202:	f7ff ff33 	bl	800306c <__NVIC_EnableIRQ>
}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	46bd      	mov	sp, r7
 800320a:	b002      	add	sp, #8
 800320c:	bd80      	pop	{r7, pc}

0800320e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	0018      	movs	r0, r3
 800321a:	f7ff ffaf 	bl	800317c <SysTick_Config>
 800321e:	0003      	movs	r3, r0
}
 8003220:	0018      	movs	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	b002      	add	sp, #8
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e14e      	b.n	80034d8 <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	225c      	movs	r2, #92	; 0x5c
 800323e:	5c9b      	ldrb	r3, [r3, r2]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d107      	bne.n	8003256 <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	225d      	movs	r2, #93	; 0x5d
 800324a:	2100      	movs	r1, #0
 800324c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	0018      	movs	r0, r3
 8003252:	f7ff fc27 	bl	8002aa4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699a      	ldr	r2, [r3, #24]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2110      	movs	r1, #16
 8003262:	438a      	bics	r2, r1
 8003264:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003266:	f7ff fed3 	bl	8003010 <HAL_GetTick>
 800326a:	0003      	movs	r3, r0
 800326c:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800326e:	e012      	b.n	8003296 <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003270:	f7ff fece 	bl	8003010 <HAL_GetTick>
 8003274:	0002      	movs	r2, r0
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b0a      	cmp	r3, #10
 800327c:	d90b      	bls.n	8003296 <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003282:	2201      	movs	r2, #1
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	225c      	movs	r2, #92	; 0x5c
 800328e:	2103      	movs	r1, #3
 8003290:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e120      	b.n	80034d8 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	2208      	movs	r2, #8
 800329e:	4013      	ands	r3, r2
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d0e5      	beq.n	8003270 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2101      	movs	r1, #1
 80032b0:	430a      	orrs	r2, r1
 80032b2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032b4:	f7ff feac 	bl	8003010 <HAL_GetTick>
 80032b8:	0003      	movs	r3, r0
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80032bc:	e012      	b.n	80032e4 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80032be:	f7ff fea7 	bl	8003010 <HAL_GetTick>
 80032c2:	0002      	movs	r2, r0
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b0a      	cmp	r3, #10
 80032ca:	d90b      	bls.n	80032e4 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d0:	2201      	movs	r2, #1
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	225c      	movs	r2, #92	; 0x5c
 80032dc:	2103      	movs	r1, #3
 80032de:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0f9      	b.n	80034d8 <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2201      	movs	r2, #1
 80032ec:	4013      	ands	r3, r2
 80032ee:	d0e6      	beq.n	80032be <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699a      	ldr	r2, [r3, #24]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2102      	movs	r1, #2
 80032fc:	430a      	orrs	r2, r1
 80032fe:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a76      	ldr	r2, [pc, #472]	; (80034e0 <HAL_FDCAN_Init+0x2b8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d103      	bne.n	8003312 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800330a:	4a76      	ldr	r2, [pc, #472]	; (80034e4 <HAL_FDCAN_Init+0x2bc>)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	7c1b      	ldrb	r3, [r3, #16]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d108      	bne.n	800332c <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699a      	ldr	r2, [r3, #24]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2140      	movs	r1, #64	; 0x40
 8003326:	438a      	bics	r2, r1
 8003328:	619a      	str	r2, [r3, #24]
 800332a:	e007      	b.n	800333c <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2140      	movs	r1, #64	; 0x40
 8003338:	430a      	orrs	r2, r1
 800333a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	7c5b      	ldrb	r3, [r3, #17]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d109      	bne.n	8003358 <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2180      	movs	r1, #128	; 0x80
 8003350:	01c9      	lsls	r1, r1, #7
 8003352:	430a      	orrs	r2, r1
 8003354:	619a      	str	r2, [r3, #24]
 8003356:	e007      	b.n	8003368 <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4961      	ldr	r1, [pc, #388]	; (80034e8 <HAL_FDCAN_Init+0x2c0>)
 8003364:	400a      	ands	r2, r1
 8003366:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	7c9b      	ldrb	r3, [r3, #18]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d108      	bne.n	8003382 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699a      	ldr	r2, [r3, #24]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	495c      	ldr	r1, [pc, #368]	; (80034ec <HAL_FDCAN_Init+0x2c4>)
 800337c:	400a      	ands	r2, r1
 800337e:	619a      	str	r2, [r3, #24]
 8003380:	e008      	b.n	8003394 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	699a      	ldr	r2, [r3, #24]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2180      	movs	r1, #128	; 0x80
 800338e:	0149      	lsls	r1, r1, #5
 8003390:	430a      	orrs	r2, r1
 8003392:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	4a55      	ldr	r2, [pc, #340]	; (80034f0 <HAL_FDCAN_Init+0x2c8>)
 800339c:	4013      	ands	r3, r2
 800339e:	0019      	movs	r1, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	21a4      	movs	r1, #164	; 0xa4
 80033b8:	438a      	bics	r2, r1
 80033ba:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2110      	movs	r1, #16
 80033c8:	438a      	bics	r2, r1
 80033ca:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d108      	bne.n	80033e6 <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699a      	ldr	r2, [r3, #24]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2104      	movs	r1, #4
 80033e0:	430a      	orrs	r2, r1
 80033e2:	619a      	str	r2, [r3, #24]
 80033e4:	e02c      	b.n	8003440 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d028      	beq.n	8003440 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d01c      	beq.n	8003430 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699a      	ldr	r2, [r3, #24]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2180      	movs	r1, #128	; 0x80
 8003402:	430a      	orrs	r2, r1
 8003404:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2110      	movs	r1, #16
 8003412:	430a      	orrs	r2, r1
 8003414:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	2b03      	cmp	r3, #3
 800341c:	d110      	bne.n	8003440 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699a      	ldr	r2, [r3, #24]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2120      	movs	r1, #32
 800342a:	430a      	orrs	r2, r1
 800342c:	619a      	str	r2, [r3, #24]
 800342e:	e007      	b.n	8003440 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2120      	movs	r1, #32
 800343c:	430a      	orrs	r2, r1
 800343e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	3b01      	subs	r3, #1
 8003446:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	3b01      	subs	r3, #1
 800344e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003450:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003458:	431a      	orrs	r2, r3
 800345a:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	3b01      	subs	r3, #1
 8003462:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003468:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800346a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	23c0      	movs	r3, #192	; 0xc0
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	429a      	cmp	r2, r3
 8003476:	d115      	bne.n	80034a4 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	3b01      	subs	r3, #1
 8003484:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003486:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	3b01      	subs	r3, #1
 800348e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003490:	431a      	orrs	r2, r3
 8003492:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	3b01      	subs	r3, #1
 800349a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80034a0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80034a2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	22c0      	movs	r2, #192	; 0xc0
 80034aa:	5899      	ldr	r1, [r3, r2]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	21c0      	movs	r1, #192	; 0xc0
 80034b8:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	0018      	movs	r0, r3
 80034be:	f000 fc37 	bl	8003d30 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	225c      	movs	r2, #92	; 0x5c
 80034d2:	2101      	movs	r1, #1
 80034d4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	0018      	movs	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	b004      	add	sp, #16
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	40006400 	.word	0x40006400
 80034e4:	40006500 	.word	0x40006500
 80034e8:	ffffbfff 	.word	0xffffbfff
 80034ec:	ffffefff 	.word	0xffffefff
 80034f0:	fffffcff 	.word	0xfffffcff

080034f4 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
 8003500:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	225c      	movs	r2, #92	; 0x5c
 8003506:	5c9b      	ldrb	r3, [r3, r2]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b01      	cmp	r3, #1
 800350c:	d117      	bne.n	800353e <HAL_FDCAN_ConfigGlobalFilter+0x4a>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2280      	movs	r2, #128	; 0x80
 8003514:	589b      	ldr	r3, [r3, r2]
 8003516:	223f      	movs	r2, #63	; 0x3f
 8003518:	4393      	bics	r3, r2
 800351a:	0019      	movs	r1, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	011a      	lsls	r2, r3, #4
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	431a      	orrs	r2, r3
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	431a      	orrs	r2, r3
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	431a      	orrs	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	2180      	movs	r1, #128	; 0x80
 8003538:	505a      	str	r2, [r3, r1]
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	e006      	b.n	800354c <HAL_FDCAN_ConfigGlobalFilter+0x58>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003542:	2204      	movs	r2, #4
 8003544:	431a      	orrs	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
  }
}
 800354c:	0018      	movs	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	b004      	add	sp, #16
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	225c      	movs	r2, #92	; 0x5c
 8003560:	5c9b      	ldrb	r3, [r3, r2]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b01      	cmp	r3, #1
 8003566:	d110      	bne.n	800358a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	225c      	movs	r2, #92	; 0x5c
 800356c:	2102      	movs	r1, #2
 800356e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2101      	movs	r1, #1
 800357c:	438a      	bics	r2, r1
 800357e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8003586:	2300      	movs	r3, #0
 8003588:	e006      	b.n	8003598 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358e:	2204      	movs	r2, #4
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
  }
}
 8003598:	0018      	movs	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	b002      	add	sp, #8
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	225c      	movs	r2, #92	; 0x5c
 80035b0:	5c9b      	ldrb	r3, [r3, r2]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d12d      	bne.n	8003614 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	22c4      	movs	r2, #196	; 0xc4
 80035be:	589a      	ldr	r2, [r3, r2]
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	039b      	lsls	r3, r3, #14
 80035c4:	4013      	ands	r3, r2
 80035c6:	d008      	beq.n	80035da <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035cc:	2280      	movs	r2, #128	; 0x80
 80035ce:	0092      	lsls	r2, r2, #2
 80035d0:	431a      	orrs	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e023      	b.n	8003622 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	22c4      	movs	r2, #196	; 0xc4
 80035e0:	589b      	ldr	r3, [r3, r2]
 80035e2:	0c1b      	lsrs	r3, r3, #16
 80035e4:	2203      	movs	r2, #3
 80035e6:	4013      	ands	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	68b9      	ldr	r1, [r7, #8]
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 fc09 	bl	8003e08 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2101      	movs	r1, #1
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	4091      	lsls	r1, r2
 8003600:	000a      	movs	r2, r1
 8003602:	21cc      	movs	r1, #204	; 0xcc
 8003604:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003606:	2201      	movs	r2, #1
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	409a      	lsls	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003610:	2300      	movs	r3, #0
 8003612:	e006      	b.n	8003622 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003618:	2208      	movs	r2, #8
 800361a:	431a      	orrs	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
  }
}
 8003622:	0018      	movs	r0, r3
 8003624:	46bd      	mov	sp, r7
 8003626:	b006      	add	sp, #24
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b08a      	sub	sp, #40	; 0x28
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
 8003638:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800363a:	201b      	movs	r0, #27
 800363c:	183b      	adds	r3, r7, r0
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	215c      	movs	r1, #92	; 0x5c
 8003642:	5c52      	ldrb	r2, [r2, r1]
 8003644:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003646:	183b      	adds	r3, r7, r0
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d000      	beq.n	8003650 <HAL_FDCAN_GetRxMessage+0x24>
 800364e:	e0c1      	b.n	80037d4 <HAL_FDCAN_GetRxMessage+0x1a8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b40      	cmp	r3, #64	; 0x40
 8003654:	d121      	bne.n	800369a <HAL_FDCAN_GetRxMessage+0x6e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2290      	movs	r2, #144	; 0x90
 800365c:	589b      	ldr	r3, [r3, r2]
 800365e:	220f      	movs	r2, #15
 8003660:	4013      	ands	r3, r2
 8003662:	d108      	bne.n	8003676 <HAL_FDCAN_GetRxMessage+0x4a>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003668:	2280      	movs	r2, #128	; 0x80
 800366a:	0052      	lsls	r2, r2, #1
 800366c:	431a      	orrs	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e0b5      	b.n	80037e2 <HAL_FDCAN_GetRxMessage+0x1b6>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2290      	movs	r2, #144	; 0x90
 800367c:	589b      	ldr	r3, [r3, r2]
 800367e:	0a1b      	lsrs	r3, r3, #8
 8003680:	2203      	movs	r2, #3
 8003682:	4013      	ands	r3, r2
 8003684:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	0013      	movs	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	189b      	adds	r3, r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	18cb      	adds	r3, r1, r3
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
 8003698:	e020      	b.n	80036dc <HAL_FDCAN_GetRxMessage+0xb0>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2298      	movs	r2, #152	; 0x98
 80036a0:	589b      	ldr	r3, [r3, r2]
 80036a2:	220f      	movs	r2, #15
 80036a4:	4013      	ands	r3, r2
 80036a6:	d108      	bne.n	80036ba <HAL_FDCAN_GetRxMessage+0x8e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ac:	2280      	movs	r2, #128	; 0x80
 80036ae:	0052      	lsls	r2, r2, #1
 80036b0:	431a      	orrs	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e093      	b.n	80037e2 <HAL_FDCAN_GetRxMessage+0x1b6>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2298      	movs	r2, #152	; 0x98
 80036c0:	589b      	ldr	r3, [r3, r2]
 80036c2:	0a1b      	lsrs	r3, r3, #8
 80036c4:	2203      	movs	r2, #3
 80036c6:	4013      	ands	r3, r2
 80036c8:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	0013      	movs	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	189b      	adds	r3, r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	18cb      	adds	r3, r1, r3
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	2380      	movs	r3, #128	; 0x80
 80036e2:	05db      	lsls	r3, r3, #23
 80036e4:	401a      	ands	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d107      	bne.n	8003702 <HAL_FDCAN_GetRxMessage+0xd6>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	0c9b      	lsrs	r3, r3, #18
 80036f8:	055b      	lsls	r3, r3, #21
 80036fa:	0d5a      	lsrs	r2, r3, #21
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	e005      	b.n	800370e <HAL_FDCAN_GetRxMessage+0xe2>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	08da      	lsrs	r2, r3, #3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	2380      	movs	r3, #128	; 0x80
 8003714:	059b      	lsls	r3, r3, #22
 8003716:	401a      	ands	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	0fdb      	lsrs	r3, r3, #31
 8003722:	07da      	lsls	r2, r3, #31
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	3304      	adds	r3, #4
 800372c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800372e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	041b      	lsls	r3, r3, #16
 8003734:	0c1a      	lsrs	r2, r3, #16
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	23f0      	movs	r3, #240	; 0xf0
 8003740:	031b      	lsls	r3, r3, #12
 8003742:	401a      	ands	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	2380      	movs	r3, #128	; 0x80
 800374e:	035b      	lsls	r3, r3, #13
 8003750:	401a      	ands	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	039b      	lsls	r3, r3, #14
 800375e:	401a      	ands	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	0e1b      	lsrs	r3, r3, #24
 800376a:	227f      	movs	r2, #127	; 0x7f
 800376c:	401a      	ands	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	0fda      	lsrs	r2, r3, #31
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	3304      	adds	r3, #4
 8003780:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8003786:	2300      	movs	r3, #0
 8003788:	623b      	str	r3, [r7, #32]
 800378a:	e00a      	b.n	80037a2 <HAL_FDCAN_GetRxMessage+0x176>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	18d2      	adds	r2, r2, r3
 8003792:	6839      	ldr	r1, [r7, #0]
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	18cb      	adds	r3, r1, r3
 8003798:	7812      	ldrb	r2, [r2, #0]
 800379a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	3301      	adds	r3, #1
 80037a0:	623b      	str	r3, [r7, #32]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	0c1b      	lsrs	r3, r3, #16
 80037a8:	4a10      	ldr	r2, [pc, #64]	; (80037ec <HAL_FDCAN_GetRxMessage+0x1c0>)
 80037aa:	5cd3      	ldrb	r3, [r2, r3]
 80037ac:	001a      	movs	r2, r3
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d3eb      	bcc.n	800378c <HAL_FDCAN_GetRxMessage+0x160>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b40      	cmp	r3, #64	; 0x40
 80037b8:	d105      	bne.n	80037c6 <HAL_FDCAN_GetRxMessage+0x19a>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2194      	movs	r1, #148	; 0x94
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	505a      	str	r2, [r3, r1]
 80037c4:	e004      	b.n	80037d0 <HAL_FDCAN_GetRxMessage+0x1a4>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	219c      	movs	r1, #156	; 0x9c
 80037cc:	69fa      	ldr	r2, [r7, #28]
 80037ce:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	e006      	b.n	80037e2 <HAL_FDCAN_GetRxMessage+0x1b6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d8:	2208      	movs	r2, #8
 80037da:	431a      	orrs	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
  }
}
 80037e2:	0018      	movs	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b00a      	add	sp, #40	; 0x28
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	08007b1c 	.word	0x08007b1c

080037f0 <HAL_FDCAN_ConfigInterruptLines>:
  * @param  InterruptLine Interrupt line.
  *         This parameter can be a value of @arg FDCAN_Interrupt_Line.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigInterruptLines(FDCAN_HandleTypeDef *hfdcan, uint32_t ITList, uint32_t InterruptLine)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80037fc:	2017      	movs	r0, #23
 80037fe:	183b      	adds	r3, r7, r0
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	215c      	movs	r1, #92	; 0x5c
 8003804:	5c52      	ldrb	r2, [r2, r1]
 8003806:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT_GROUP(ITList));
  assert_param(IS_FDCAN_IT_LINE(InterruptLine));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003808:	0002      	movs	r2, r0
 800380a:	18bb      	adds	r3, r7, r2
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d003      	beq.n	800381a <HAL_FDCAN_ConfigInterruptLines+0x2a>
 8003812:	18bb      	adds	r3, r7, r2
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b02      	cmp	r3, #2
 8003818:	d116      	bne.n	8003848 <HAL_FDCAN_ConfigInterruptLines+0x58>
  {
    /* Assign list of interrupts to the selected line */
    if (InterruptLine == FDCAN_INTERRUPT_LINE0)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d109      	bne.n	8003834 <HAL_FDCAN_ConfigInterruptLines+0x44>
    {
      CLEAR_BIT(hfdcan->Instance->ILS, ITList);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	43d9      	mvns	r1, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	400a      	ands	r2, r1
 8003830:	659a      	str	r2, [r3, #88]	; 0x58
 8003832:	e007      	b.n	8003844 <HAL_FDCAN_ConfigInterruptLines+0x54>
    }
    else /* InterruptLine == FDCAN_INTERRUPT_LINE1 */
    {
      SET_BIT(hfdcan->Instance->ILS, ITList);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	430a      	orrs	r2, r1
 8003842:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	e006      	b.n	8003856 <HAL_FDCAN_ConfigInterruptLines+0x66>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800384c:	2202      	movs	r2, #2
 800384e:	431a      	orrs	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
  }
}
 8003856:	0018      	movs	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	b006      	add	sp, #24
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b086      	sub	sp, #24
 8003862:	af00      	add	r7, sp, #0
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800386a:	2017      	movs	r0, #23
 800386c:	183b      	adds	r3, r7, r0
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	215c      	movs	r1, #92	; 0x5c
 8003872:	5c52      	ldrb	r2, [r2, r1]
 8003874:	701a      	strb	r2, [r3, #0]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003876:	0002      	movs	r2, r0
 8003878:	18bb      	adds	r3, r7, r2
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d004      	beq.n	800388a <HAL_FDCAN_ActivateNotification+0x2c>
 8003880:	18bb      	adds	r3, r7, r2
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b02      	cmp	r3, #2
 8003886:	d000      	beq.n	800388a <HAL_FDCAN_ActivateNotification+0x2c>
 8003888:	e0b4      	b.n	80039f4 <HAL_FDCAN_ActivateNotification+0x196>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003890:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2207      	movs	r2, #7
 8003896:	4013      	ands	r3, r2
 8003898:	d003      	beq.n	80038a2 <HAL_FDCAN_ActivateNotification+0x44>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	2201      	movs	r2, #1
 800389e:	4013      	ands	r3, r2
 80038a0:	d034      	beq.n	800390c <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2238      	movs	r2, #56	; 0x38
 80038a6:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80038a8:	d003      	beq.n	80038b2 <HAL_FDCAN_ActivateNotification+0x54>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2202      	movs	r2, #2
 80038ae:	4013      	ands	r3, r2
 80038b0:	d02c      	beq.n	800390c <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	23e0      	movs	r3, #224	; 0xe0
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80038ba:	d003      	beq.n	80038c4 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	2204      	movs	r2, #4
 80038c0:	4013      	ands	r3, r2
 80038c2:	d023      	beq.n	800390c <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	23f0      	movs	r3, #240	; 0xf0
 80038c8:	015b      	lsls	r3, r3, #5
 80038ca:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80038cc:	d003      	beq.n	80038d6 <HAL_FDCAN_ActivateNotification+0x78>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	2208      	movs	r2, #8
 80038d2:	4013      	ands	r3, r2
 80038d4:	d01a      	beq.n	800390c <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	23e0      	movs	r3, #224	; 0xe0
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80038de:	d003      	beq.n	80038e8 <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	2210      	movs	r2, #16
 80038e4:	4013      	ands	r3, r2
 80038e6:	d011      	beq.n	800390c <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	23c0      	movs	r3, #192	; 0xc0
 80038ec:	029b      	lsls	r3, r3, #10
 80038ee:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80038f0:	d003      	beq.n	80038fa <HAL_FDCAN_ActivateNotification+0x9c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	2220      	movs	r2, #32
 80038f6:	4013      	ands	r3, r2
 80038f8:	d008      	beq.n	800390c <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	23fc      	movs	r3, #252	; 0xfc
 80038fe:	041b      	lsls	r3, r3, #16
 8003900:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003902:	d00b      	beq.n	800391c <HAL_FDCAN_ActivateNotification+0xbe>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	2240      	movs	r2, #64	; 0x40
 8003908:	4013      	ands	r3, r2
 800390a:	d107      	bne.n	800391c <HAL_FDCAN_ActivateNotification+0xbe>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2101      	movs	r1, #1
 8003918:	430a      	orrs	r2, r1
 800391a:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2207      	movs	r2, #7
 8003920:	4013      	ands	r3, r2
 8003922:	d003      	beq.n	800392c <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2201      	movs	r2, #1
 8003928:	4013      	ands	r3, r2
 800392a:	d134      	bne.n	8003996 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2238      	movs	r2, #56	; 0x38
 8003930:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003932:	d003      	beq.n	800393c <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	2202      	movs	r2, #2
 8003938:	4013      	ands	r3, r2
 800393a:	d12c      	bne.n	8003996 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	23e0      	movs	r3, #224	; 0xe0
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003944:	d003      	beq.n	800394e <HAL_FDCAN_ActivateNotification+0xf0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2204      	movs	r2, #4
 800394a:	4013      	ands	r3, r2
 800394c:	d123      	bne.n	8003996 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	23f0      	movs	r3, #240	; 0xf0
 8003952:	015b      	lsls	r3, r3, #5
 8003954:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003956:	d003      	beq.n	8003960 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	2208      	movs	r2, #8
 800395c:	4013      	ands	r3, r2
 800395e:	d11a      	bne.n	8003996 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	23e0      	movs	r3, #224	; 0xe0
 8003964:	021b      	lsls	r3, r3, #8
 8003966:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003968:	d003      	beq.n	8003972 <HAL_FDCAN_ActivateNotification+0x114>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2210      	movs	r2, #16
 800396e:	4013      	ands	r3, r2
 8003970:	d111      	bne.n	8003996 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	23c0      	movs	r3, #192	; 0xc0
 8003976:	029b      	lsls	r3, r3, #10
 8003978:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800397a:	d003      	beq.n	8003984 <HAL_FDCAN_ActivateNotification+0x126>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	2220      	movs	r2, #32
 8003980:	4013      	ands	r3, r2
 8003982:	d108      	bne.n	8003996 <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	23fc      	movs	r3, #252	; 0xfc
 8003988:	041b      	lsls	r3, r3, #16
 800398a:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800398c:	d00b      	beq.n	80039a6 <HAL_FDCAN_ActivateNotification+0x148>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	2240      	movs	r2, #64	; 0x40
 8003992:	4013      	ands	r3, r2
 8003994:	d007      	beq.n	80039a6 <HAL_FDCAN_ActivateNotification+0x148>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2102      	movs	r1, #2
 80039a2:	430a      	orrs	r2, r1
 80039a4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2280      	movs	r2, #128	; 0x80
 80039aa:	4013      	ands	r3, r2
 80039ac:	d009      	beq.n	80039c2 <HAL_FDCAN_ActivateNotification+0x164>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	22dc      	movs	r2, #220	; 0xdc
 80039b4:	5899      	ldr	r1, [r3, r2]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	430a      	orrs	r2, r1
 80039be:	21dc      	movs	r1, #220	; 0xdc
 80039c0:	505a      	str	r2, [r3, r1]
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	4013      	ands	r3, r2
 80039ca:	d009      	beq.n	80039e0 <HAL_FDCAN_ActivateNotification+0x182>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	22e0      	movs	r2, #224	; 0xe0
 80039d2:	5899      	ldr	r1, [r3, r2]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	430a      	orrs	r2, r1
 80039dc:	21e0      	movs	r1, #224	; 0xe0
 80039de:	505a      	str	r2, [r3, r1]
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	430a      	orrs	r2, r1
 80039ee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	e006      	b.n	8003a02 <HAL_FDCAN_ActivateNotification+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f8:	2202      	movs	r2, #2
 80039fa:	431a      	orrs	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
  }
}
 8003a02:	0018      	movs	r0, r3
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b006      	add	sp, #24
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b08c      	sub	sp, #48	; 0x30
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a18:	23e0      	movs	r3, #224	; 0xe0
 8003a1a:	015b      	lsls	r3, r3, #5
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a28:	4013      	ands	r3, r2
 8003a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a32:	2207      	movs	r2, #7
 8003a34:	4013      	ands	r3, r2
 8003a36:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a40:	4013      	ands	r3, r2
 8003a42:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4a:	2238      	movs	r2, #56	; 0x38
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	4013      	ands	r3, r2
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a62:	23f1      	movs	r3, #241	; 0xf1
 8003a64:	041b      	lsls	r3, r3, #16
 8003a66:	4013      	ands	r3, r2
 8003a68:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	4013      	ands	r3, r2
 8003a74:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a7c:	23e0      	movs	r3, #224	; 0xe0
 8003a7e:	031b      	lsls	r3, r3, #12
 8003a80:	4013      	ands	r3, r2
 8003a82:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a96:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a9e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	099b      	lsrs	r3, r3, #6
 8003aa4:	001a      	movs	r2, r3
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d00d      	beq.n	8003ac8 <HAL_FDCAN_IRQHandler+0xbe>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	099b      	lsrs	r3, r3, #6
 8003ab0:	001a      	movs	r2, r3
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d007      	beq.n	8003ac8 <HAL_FDCAN_IRQHandler+0xbe>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2240      	movs	r2, #64	; 0x40
 8003abe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f000 f91b 	bl	8003cfe <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	0a1b      	lsrs	r3, r3, #8
 8003acc:	001a      	movs	r2, r3
 8003ace:	2301      	movs	r3, #1
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d01c      	beq.n	8003b0e <HAL_FDCAN_IRQHandler+0x104>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	0a1b      	lsrs	r3, r3, #8
 8003ad8:	001a      	movs	r2, r3
 8003ada:	2301      	movs	r3, #1
 8003adc:	4013      	ands	r3, r2
 8003ade:	d016      	beq.n	8003b0e <HAL_FDCAN_IRQHandler+0x104>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	22d8      	movs	r2, #216	; 0xd8
 8003ae6:	589b      	ldr	r3, [r3, r2]
 8003ae8:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	22e0      	movs	r2, #224	; 0xe0
 8003af0:	589a      	ldr	r2, [r3, r2]
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	4013      	ands	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2280      	movs	r2, #128	; 0x80
 8003afe:	0052      	lsls	r2, r2, #1
 8003b00:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	0011      	movs	r1, r2
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f000 f8df 	bl	8003ccc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d009      	beq.n	8003b28 <HAL_FDCAN_IRQHandler+0x11e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b1a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	0011      	movs	r1, r2
 8003b22:	0018      	movs	r0, r3
 8003b24:	f000 f8b8 	bl	8003c98 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <HAL_FDCAN_IRQHandler+0x138>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b34:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	0011      	movs	r1, r2
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f7fd fd1d 	bl	800157c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d009      	beq.n	8003b5c <HAL_FDCAN_IRQHandler+0x152>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	0011      	movs	r1, r2
 8003b56:	0018      	movs	r0, r3
 8003b58:	f7fd fd5a 	bl	8001610 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	0a5b      	lsrs	r3, r3, #9
 8003b60:	001a      	movs	r2, r3
 8003b62:	2301      	movs	r3, #1
 8003b64:	4013      	ands	r3, r2
 8003b66:	d00e      	beq.n	8003b86 <HAL_FDCAN_IRQHandler+0x17c>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	0a5b      	lsrs	r3, r3, #9
 8003b6c:	001a      	movs	r2, r3
 8003b6e:	2301      	movs	r3, #1
 8003b70:	4013      	ands	r3, r2
 8003b72:	d008      	beq.n	8003b86 <HAL_FDCAN_IRQHandler+0x17c>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2280      	movs	r2, #128	; 0x80
 8003b7a:	0092      	lsls	r2, r2, #2
 8003b7c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	0018      	movs	r0, r3
 8003b82:	f000 f892 	bl	8003caa <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	09db      	lsrs	r3, r3, #7
 8003b8a:	001a      	movs	r2, r3
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	4013      	ands	r3, r2
 8003b90:	d01b      	beq.n	8003bca <HAL_FDCAN_IRQHandler+0x1c0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	09db      	lsrs	r3, r3, #7
 8003b96:	001a      	movs	r2, r3
 8003b98:	2301      	movs	r3, #1
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d015      	beq.n	8003bca <HAL_FDCAN_IRQHandler+0x1c0>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	22d4      	movs	r2, #212	; 0xd4
 8003ba4:	589b      	ldr	r3, [r3, r2]
 8003ba6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	22dc      	movs	r2, #220	; 0xdc
 8003bae:	589a      	ldr	r2, [r3, r2]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2280      	movs	r2, #128	; 0x80
 8003bbc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	0011      	movs	r1, r2
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f000 f878 	bl	8003cba <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	0b5b      	lsrs	r3, r3, #13
 8003bce:	001a      	movs	r2, r3
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d00e      	beq.n	8003bf4 <HAL_FDCAN_IRQHandler+0x1ea>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	0b5b      	lsrs	r3, r3, #13
 8003bda:	001a      	movs	r2, r3
 8003bdc:	2301      	movs	r3, #1
 8003bde:	4013      	ands	r3, r2
 8003be0:	d008      	beq.n	8003bf4 <HAL_FDCAN_IRQHandler+0x1ea>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2280      	movs	r2, #128	; 0x80
 8003be8:	0192      	lsls	r2, r2, #6
 8003bea:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f000 f875 	bl	8003cde <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	0bdb      	lsrs	r3, r3, #15
 8003bf8:	001a      	movs	r2, r3
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d00e      	beq.n	8003c1e <HAL_FDCAN_IRQHandler+0x214>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	0bdb      	lsrs	r3, r3, #15
 8003c04:	001a      	movs	r2, r3
 8003c06:	2301      	movs	r3, #1
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d008      	beq.n	8003c1e <HAL_FDCAN_IRQHandler+0x214>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2280      	movs	r2, #128	; 0x80
 8003c12:	0212      	lsls	r2, r2, #8
 8003c14:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	0018      	movs	r0, r3
 8003c1a:	f000 f868 	bl	8003cee <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	0b9b      	lsrs	r3, r3, #14
 8003c22:	001a      	movs	r2, r3
 8003c24:	2301      	movs	r3, #1
 8003c26:	4013      	ands	r3, r2
 8003c28:	d010      	beq.n	8003c4c <HAL_FDCAN_IRQHandler+0x242>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	0b9b      	lsrs	r3, r3, #14
 8003c2e:	001a      	movs	r2, r3
 8003c30:	2301      	movs	r3, #1
 8003c32:	4013      	ands	r3, r2
 8003c34:	d00a      	beq.n	8003c4c <HAL_FDCAN_IRQHandler+0x242>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2280      	movs	r2, #128	; 0x80
 8003c3c:	01d2      	lsls	r2, r2, #7
 8003c3e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c44:	2280      	movs	r2, #128	; 0x80
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d009      	beq.n	8003c66 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	69fa      	ldr	r2, [r7, #28]
 8003c58:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8003c5a:	69fa      	ldr	r2, [r7, #28]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	0011      	movs	r1, r2
 8003c60:	0018      	movs	r0, r3
 8003c62:	f000 f85c 	bl	8003d1e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d009      	beq.n	8003c80 <HAL_FDCAN_IRQHandler+0x276>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6a3a      	ldr	r2, [r7, #32]
 8003c72:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_FDCAN_IRQHandler+0x286>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f000 f83f 	bl	8003d0e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8003c90:	46c0      	nop			; (mov r8, r8)
 8003c92:	46bd      	mov	sp, r7
 8003c94:	b00c      	add	sp, #48	; 0x30
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	b002      	add	sp, #8
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	b002      	add	sp, #8
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b082      	sub	sp, #8
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003cc4:	46c0      	nop			; (mov r8, r8)
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b002      	add	sp, #8
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b002      	add	sp, #8
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b002      	add	sp, #8
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b002      	add	sp, #8
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b002      	add	sp, #8
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b082      	sub	sp, #8
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b002      	add	sp, #8
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b082      	sub	sp, #8
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003d28:	46c0      	nop			; (mov r8, r8)
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b002      	add	sp, #8
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003d38:	4b2f      	ldr	r3, [pc, #188]	; (8003df8 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8003d3a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a2e      	ldr	r2, [pc, #184]	; (8003dfc <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d105      	bne.n	8003d52 <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	22d4      	movs	r2, #212	; 0xd4
 8003d4a:	0092      	lsls	r2, r2, #2
 8003d4c:	4694      	mov	ip, r2
 8003d4e:	4463      	add	r3, ip
 8003d50:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2280      	movs	r2, #128	; 0x80
 8003d5e:	589b      	ldr	r3, [r3, r2]
 8003d60:	4a27      	ldr	r2, [pc, #156]	; (8003e00 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	0019      	movs	r1, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6a:	041a      	lsls	r2, r3, #16
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	2180      	movs	r1, #128	; 0x80
 8003d74:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	3370      	adds	r3, #112	; 0x70
 8003d7a:	001a      	movs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2280      	movs	r2, #128	; 0x80
 8003d86:	589b      	ldr	r3, [r3, r2]
 8003d88:	4a1e      	ldr	r2, [pc, #120]	; (8003e04 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	061a      	lsls	r2, r3, #24
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	2180      	movs	r1, #128	; 0x80
 8003d9c:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	33b0      	adds	r3, #176	; 0xb0
 8003da2:	001a      	movs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	3389      	adds	r3, #137	; 0x89
 8003dac:	33ff      	adds	r3, #255	; 0xff
 8003dae:	001a      	movs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2298      	movs	r2, #152	; 0x98
 8003db8:	0092      	lsls	r2, r2, #2
 8003dba:	189a      	adds	r2, r3, r2
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	229e      	movs	r2, #158	; 0x9e
 8003dc4:	0092      	lsls	r2, r2, #2
 8003dc6:	189a      	adds	r2, r3, r2
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	e005      	b.n	8003dde <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	3304      	adds	r3, #4
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	22d4      	movs	r2, #212	; 0xd4
 8003de2:	0092      	lsls	r2, r2, #2
 8003de4:	4694      	mov	ip, r2
 8003de6:	4463      	add	r3, ip
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d3f1      	bcc.n	8003dd2 <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	46c0      	nop			; (mov r8, r8)
 8003df2:	46bd      	mov	sp, r7
 8003df4:	b004      	add	sp, #16
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	4000b400 	.word	0x4000b400
 8003dfc:	40006800 	.word	0x40006800
 8003e00:	ffe0ffff 	.word	0xffe0ffff
 8003e04:	f0ffffff 	.word	0xf0ffffff

08003e08 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b088      	sub	sp, #32
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10a      	bne.n	8003e34 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003e26:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	e00b      	b.n	8003e4c <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003e3c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003e42:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e44:	2280      	movs	r2, #128	; 0x80
 8003e46:	05d2      	lsls	r2, r2, #23
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003e56:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003e5c:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003e62:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	0013      	movs	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	189b      	adds	r3, r3, r2
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	18cb      	adds	r3, r1, r3
 8003e7c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	69fa      	ldr	r2, [r7, #28]
 8003e82:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	3304      	adds	r3, #4
 8003e88:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	3304      	adds	r3, #4
 8003e94:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	e020      	b.n	8003ede <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	3303      	adds	r3, #3
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	18d3      	adds	r3, r2, r3
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	3302      	adds	r3, #2
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	18cb      	adds	r3, r1, r3
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003eb4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	18cb      	adds	r3, r1, r3
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003ec2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	188a      	adds	r2, r1, r2
 8003eca:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003ecc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	3304      	adds	r3, #4
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	0c1b      	lsrs	r3, r3, #16
 8003ee4:	4a05      	ldr	r2, [pc, #20]	; (8003efc <FDCAN_CopyMessageToRAM+0xf4>)
 8003ee6:	5cd3      	ldrb	r3, [r2, r3]
 8003ee8:	001a      	movs	r2, r3
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d3d5      	bcc.n	8003e9c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8003ef0:	46c0      	nop			; (mov r8, r8)
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b008      	add	sp, #32
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	46c0      	nop			; (mov r8, r8)
 8003efc:	08007b1c 	.word	0x08007b1c

08003f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f0e:	e14d      	b.n	80041ac <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2101      	movs	r1, #1
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	4091      	lsls	r1, r2
 8003f1a:	000a      	movs	r2, r1
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d100      	bne.n	8003f28 <HAL_GPIO_Init+0x28>
 8003f26:	e13e      	b.n	80041a6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2203      	movs	r2, #3
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d005      	beq.n	8003f40 <HAL_GPIO_Init+0x40>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2203      	movs	r2, #3
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d130      	bne.n	8003fa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	2203      	movs	r2, #3
 8003f4c:	409a      	lsls	r2, r3
 8003f4e:	0013      	movs	r3, r2
 8003f50:	43da      	mvns	r2, r3
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4013      	ands	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	409a      	lsls	r2, r3
 8003f62:	0013      	movs	r3, r2
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f76:	2201      	movs	r2, #1
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	409a      	lsls	r2, r3
 8003f7c:	0013      	movs	r3, r2
 8003f7e:	43da      	mvns	r2, r3
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4013      	ands	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	091b      	lsrs	r3, r3, #4
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	401a      	ands	r2, r3
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	409a      	lsls	r2, r3
 8003f94:	0013      	movs	r3, r2
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2203      	movs	r2, #3
 8003fa8:	4013      	ands	r3, r2
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d017      	beq.n	8003fde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	2203      	movs	r2, #3
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	0013      	movs	r3, r2
 8003fbe:	43da      	mvns	r2, r3
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	0013      	movs	r3, r2
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d123      	bne.n	8004032 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	08da      	lsrs	r2, r3, #3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3208      	adds	r2, #8
 8003ff2:	0092      	lsls	r2, r2, #2
 8003ff4:	58d3      	ldr	r3, [r2, r3]
 8003ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2207      	movs	r2, #7
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	220f      	movs	r2, #15
 8004002:	409a      	lsls	r2, r3
 8004004:	0013      	movs	r3, r2
 8004006:	43da      	mvns	r2, r3
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	4013      	ands	r3, r2
 800400c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	691a      	ldr	r2, [r3, #16]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2107      	movs	r1, #7
 8004016:	400b      	ands	r3, r1
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	409a      	lsls	r2, r3
 800401c:	0013      	movs	r3, r2
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	08da      	lsrs	r2, r3, #3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	3208      	adds	r2, #8
 800402c:	0092      	lsls	r2, r2, #2
 800402e:	6939      	ldr	r1, [r7, #16]
 8004030:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	2203      	movs	r2, #3
 800403e:	409a      	lsls	r2, r3
 8004040:	0013      	movs	r3, r2
 8004042:	43da      	mvns	r2, r3
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	4013      	ands	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2203      	movs	r2, #3
 8004050:	401a      	ands	r2, r3
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	409a      	lsls	r2, r3
 8004058:	0013      	movs	r3, r2
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4313      	orrs	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	23c0      	movs	r3, #192	; 0xc0
 800406c:	029b      	lsls	r3, r3, #10
 800406e:	4013      	ands	r3, r2
 8004070:	d100      	bne.n	8004074 <HAL_GPIO_Init+0x174>
 8004072:	e098      	b.n	80041a6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004074:	4a53      	ldr	r2, [pc, #332]	; (80041c4 <HAL_GPIO_Init+0x2c4>)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	089b      	lsrs	r3, r3, #2
 800407a:	3318      	adds	r3, #24
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	589b      	ldr	r3, [r3, r2]
 8004080:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2203      	movs	r2, #3
 8004086:	4013      	ands	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	220f      	movs	r2, #15
 800408c:	409a      	lsls	r2, r3
 800408e:	0013      	movs	r3, r2
 8004090:	43da      	mvns	r2, r3
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	4013      	ands	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	23a0      	movs	r3, #160	; 0xa0
 800409c:	05db      	lsls	r3, r3, #23
 800409e:	429a      	cmp	r2, r3
 80040a0:	d019      	beq.n	80040d6 <HAL_GPIO_Init+0x1d6>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a48      	ldr	r2, [pc, #288]	; (80041c8 <HAL_GPIO_Init+0x2c8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d013      	beq.n	80040d2 <HAL_GPIO_Init+0x1d2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a47      	ldr	r2, [pc, #284]	; (80041cc <HAL_GPIO_Init+0x2cc>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00d      	beq.n	80040ce <HAL_GPIO_Init+0x1ce>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a46      	ldr	r2, [pc, #280]	; (80041d0 <HAL_GPIO_Init+0x2d0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d007      	beq.n	80040ca <HAL_GPIO_Init+0x1ca>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a45      	ldr	r2, [pc, #276]	; (80041d4 <HAL_GPIO_Init+0x2d4>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d101      	bne.n	80040c6 <HAL_GPIO_Init+0x1c6>
 80040c2:	2304      	movs	r3, #4
 80040c4:	e008      	b.n	80040d8 <HAL_GPIO_Init+0x1d8>
 80040c6:	2305      	movs	r3, #5
 80040c8:	e006      	b.n	80040d8 <HAL_GPIO_Init+0x1d8>
 80040ca:	2303      	movs	r3, #3
 80040cc:	e004      	b.n	80040d8 <HAL_GPIO_Init+0x1d8>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e002      	b.n	80040d8 <HAL_GPIO_Init+0x1d8>
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <HAL_GPIO_Init+0x1d8>
 80040d6:	2300      	movs	r3, #0
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	2103      	movs	r1, #3
 80040dc:	400a      	ands	r2, r1
 80040de:	00d2      	lsls	r2, r2, #3
 80040e0:	4093      	lsls	r3, r2
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80040e8:	4936      	ldr	r1, [pc, #216]	; (80041c4 <HAL_GPIO_Init+0x2c4>)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	089b      	lsrs	r3, r3, #2
 80040ee:	3318      	adds	r3, #24
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040f6:	4b33      	ldr	r3, [pc, #204]	; (80041c4 <HAL_GPIO_Init+0x2c4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	43da      	mvns	r2, r3
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	4013      	ands	r3, r2
 8004104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	2380      	movs	r3, #128	; 0x80
 800410c:	035b      	lsls	r3, r3, #13
 800410e:	4013      	ands	r3, r2
 8004110:	d003      	beq.n	800411a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4313      	orrs	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800411a:	4b2a      	ldr	r3, [pc, #168]	; (80041c4 <HAL_GPIO_Init+0x2c4>)
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004120:	4b28      	ldr	r3, [pc, #160]	; (80041c4 <HAL_GPIO_Init+0x2c4>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	43da      	mvns	r2, r3
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	4013      	ands	r3, r2
 800412e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	2380      	movs	r3, #128	; 0x80
 8004136:	039b      	lsls	r3, r3, #14
 8004138:	4013      	ands	r3, r2
 800413a:	d003      	beq.n	8004144 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004144:	4b1f      	ldr	r3, [pc, #124]	; (80041c4 <HAL_GPIO_Init+0x2c4>)
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800414a:	4a1e      	ldr	r2, [pc, #120]	; (80041c4 <HAL_GPIO_Init+0x2c4>)
 800414c:	2384      	movs	r3, #132	; 0x84
 800414e:	58d3      	ldr	r3, [r2, r3]
 8004150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	43da      	mvns	r2, r3
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4013      	ands	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	2380      	movs	r3, #128	; 0x80
 8004162:	029b      	lsls	r3, r3, #10
 8004164:	4013      	ands	r3, r2
 8004166:	d003      	beq.n	8004170 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004170:	4914      	ldr	r1, [pc, #80]	; (80041c4 <HAL_GPIO_Init+0x2c4>)
 8004172:	2284      	movs	r2, #132	; 0x84
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004178:	4a12      	ldr	r2, [pc, #72]	; (80041c4 <HAL_GPIO_Init+0x2c4>)
 800417a:	2380      	movs	r3, #128	; 0x80
 800417c:	58d3      	ldr	r3, [r2, r3]
 800417e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	43da      	mvns	r2, r3
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4013      	ands	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	2380      	movs	r3, #128	; 0x80
 8004190:	025b      	lsls	r3, r3, #9
 8004192:	4013      	ands	r3, r2
 8004194:	d003      	beq.n	800419e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800419e:	4909      	ldr	r1, [pc, #36]	; (80041c4 <HAL_GPIO_Init+0x2c4>)
 80041a0:	2280      	movs	r2, #128	; 0x80
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	3301      	adds	r3, #1
 80041aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	40da      	lsrs	r2, r3
 80041b4:	1e13      	subs	r3, r2, #0
 80041b6:	d000      	beq.n	80041ba <HAL_GPIO_Init+0x2ba>
 80041b8:	e6aa      	b.n	8003f10 <HAL_GPIO_Init+0x10>
  }
}
 80041ba:	46c0      	nop			; (mov r8, r8)
 80041bc:	46c0      	nop			; (mov r8, r8)
 80041be:	46bd      	mov	sp, r7
 80041c0:	b006      	add	sp, #24
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	40021800 	.word	0x40021800
 80041c8:	50000400 	.word	0x50000400
 80041cc:	50000800 	.word	0x50000800
 80041d0:	50000c00 	.word	0x50000c00
 80041d4:	50001000 	.word	0x50001000

080041d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	000a      	movs	r2, r1
 80041e2:	1cbb      	adds	r3, r7, #2
 80041e4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	1cba      	adds	r2, r7, #2
 80041ec:	8812      	ldrh	r2, [r2, #0]
 80041ee:	4013      	ands	r3, r2
 80041f0:	d004      	beq.n	80041fc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80041f2:	230f      	movs	r3, #15
 80041f4:	18fb      	adds	r3, r7, r3
 80041f6:	2201      	movs	r2, #1
 80041f8:	701a      	strb	r2, [r3, #0]
 80041fa:	e003      	b.n	8004204 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041fc:	230f      	movs	r3, #15
 80041fe:	18fb      	adds	r3, r7, r3
 8004200:	2200      	movs	r2, #0
 8004202:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004204:	230f      	movs	r3, #15
 8004206:	18fb      	adds	r3, r7, r3
 8004208:	781b      	ldrb	r3, [r3, #0]
}
 800420a:	0018      	movs	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	b004      	add	sp, #16
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	0008      	movs	r0, r1
 800421c:	0011      	movs	r1, r2
 800421e:	1cbb      	adds	r3, r7, #2
 8004220:	1c02      	adds	r2, r0, #0
 8004222:	801a      	strh	r2, [r3, #0]
 8004224:	1c7b      	adds	r3, r7, #1
 8004226:	1c0a      	adds	r2, r1, #0
 8004228:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800422a:	1c7b      	adds	r3, r7, #1
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d004      	beq.n	800423c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004232:	1cbb      	adds	r3, r7, #2
 8004234:	881a      	ldrh	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800423a:	e003      	b.n	8004244 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800423c:	1cbb      	adds	r3, r7, #2
 800423e:	881a      	ldrh	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004244:	46c0      	nop			; (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	b002      	add	sp, #8
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	000a      	movs	r2, r1
 8004256:	1cbb      	adds	r3, r7, #2
 8004258:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004260:	1cbb      	adds	r3, r7, #2
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4013      	ands	r3, r2
 8004268:	041a      	lsls	r2, r3, #16
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	43db      	mvns	r3, r3
 800426e:	1cb9      	adds	r1, r7, #2
 8004270:	8809      	ldrh	r1, [r1, #0]
 8004272:	400b      	ands	r3, r1
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	619a      	str	r2, [r3, #24]
}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	46bd      	mov	sp, r7
 800427e:	b004      	add	sp, #16
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	0002      	movs	r2, r0
 800428c:	1dbb      	adds	r3, r7, #6
 800428e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004290:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	1dba      	adds	r2, r7, #6
 8004296:	8812      	ldrh	r2, [r2, #0]
 8004298:	4013      	ands	r3, r2
 800429a:	d008      	beq.n	80042ae <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800429c:	4b0d      	ldr	r3, [pc, #52]	; (80042d4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800429e:	1dba      	adds	r2, r7, #6
 80042a0:	8812      	ldrh	r2, [r2, #0]
 80042a2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80042a4:	1dbb      	adds	r3, r7, #6
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	0018      	movs	r0, r3
 80042aa:	f000 f815 	bl	80042d8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80042ae:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	1dba      	adds	r2, r7, #6
 80042b4:	8812      	ldrh	r2, [r2, #0]
 80042b6:	4013      	ands	r3, r2
 80042b8:	d008      	beq.n	80042cc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80042bc:	1dba      	adds	r2, r7, #6
 80042be:	8812      	ldrh	r2, [r2, #0]
 80042c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80042c2:	1dbb      	adds	r3, r7, #6
 80042c4:	881b      	ldrh	r3, [r3, #0]
 80042c6:	0018      	movs	r0, r3
 80042c8:	f7fd f9e6 	bl	8001698 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80042cc:	46c0      	nop			; (mov r8, r8)
 80042ce:	46bd      	mov	sp, r7
 80042d0:	b002      	add	sp, #8
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40021800 	.word	0x40021800

080042d8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	0002      	movs	r2, r0
 80042e0:	1dbb      	adds	r3, r7, #6
 80042e2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80042e4:	46c0      	nop			; (mov r8, r8)
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b002      	add	sp, #8
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80042f4:	4b19      	ldr	r3, [pc, #100]	; (800435c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a19      	ldr	r2, [pc, #100]	; (8004360 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	0019      	movs	r1, r3
 80042fe:	4b17      	ldr	r3, [pc, #92]	; (800435c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	430a      	orrs	r2, r1
 8004304:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	2380      	movs	r3, #128	; 0x80
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	429a      	cmp	r2, r3
 800430e:	d11f      	bne.n	8004350 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004310:	4b14      	ldr	r3, [pc, #80]	; (8004364 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	0013      	movs	r3, r2
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	189b      	adds	r3, r3, r2
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	4912      	ldr	r1, [pc, #72]	; (8004368 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800431e:	0018      	movs	r0, r3
 8004320:	f7fb ff02 	bl	8000128 <__udivsi3>
 8004324:	0003      	movs	r3, r0
 8004326:	3301      	adds	r3, #1
 8004328:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800432a:	e008      	b.n	800433e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3b01      	subs	r3, #1
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	e001      	b.n	800433e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e009      	b.n	8004352 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800433e:	4b07      	ldr	r3, [pc, #28]	; (800435c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004340:	695a      	ldr	r2, [r3, #20]
 8004342:	2380      	movs	r3, #128	; 0x80
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	401a      	ands	r2, r3
 8004348:	2380      	movs	r3, #128	; 0x80
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	429a      	cmp	r2, r3
 800434e:	d0ed      	beq.n	800432c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	0018      	movs	r0, r3
 8004354:	46bd      	mov	sp, r7
 8004356:	b004      	add	sp, #16
 8004358:	bd80      	pop	{r7, pc}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	40007000 	.word	0x40007000
 8004360:	fffff9ff 	.word	0xfffff9ff
 8004364:	20000014 	.word	0x20000014
 8004368:	000f4240 	.word	0x000f4240

0800436c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004370:	4b03      	ldr	r3, [pc, #12]	; (8004380 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	23e0      	movs	r3, #224	; 0xe0
 8004376:	01db      	lsls	r3, r3, #7
 8004378:	4013      	ands	r3, r2
}
 800437a:	0018      	movs	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40021000 	.word	0x40021000

08004384 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	f000 fb50 	bl	8004a38 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2201      	movs	r2, #1
 800439e:	4013      	ands	r3, r2
 80043a0:	d100      	bne.n	80043a4 <HAL_RCC_OscConfig+0x20>
 80043a2:	e07c      	b.n	800449e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043a4:	4bc3      	ldr	r3, [pc, #780]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2238      	movs	r2, #56	; 0x38
 80043aa:	4013      	ands	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043ae:	4bc1      	ldr	r3, [pc, #772]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	2203      	movs	r2, #3
 80043b4:	4013      	ands	r3, r2
 80043b6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2b10      	cmp	r3, #16
 80043bc:	d102      	bne.n	80043c4 <HAL_RCC_OscConfig+0x40>
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2b03      	cmp	r3, #3
 80043c2:	d002      	beq.n	80043ca <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d10b      	bne.n	80043e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ca:	4bba      	ldr	r3, [pc, #744]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	2380      	movs	r3, #128	; 0x80
 80043d0:	029b      	lsls	r3, r3, #10
 80043d2:	4013      	ands	r3, r2
 80043d4:	d062      	beq.n	800449c <HAL_RCC_OscConfig+0x118>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d15e      	bne.n	800449c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e32a      	b.n	8004a38 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	2380      	movs	r3, #128	; 0x80
 80043e8:	025b      	lsls	r3, r3, #9
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d107      	bne.n	80043fe <HAL_RCC_OscConfig+0x7a>
 80043ee:	4bb1      	ldr	r3, [pc, #708]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	4bb0      	ldr	r3, [pc, #704]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 80043f4:	2180      	movs	r1, #128	; 0x80
 80043f6:	0249      	lsls	r1, r1, #9
 80043f8:	430a      	orrs	r2, r1
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	e020      	b.n	8004440 <HAL_RCC_OscConfig+0xbc>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	23a0      	movs	r3, #160	; 0xa0
 8004404:	02db      	lsls	r3, r3, #11
 8004406:	429a      	cmp	r2, r3
 8004408:	d10e      	bne.n	8004428 <HAL_RCC_OscConfig+0xa4>
 800440a:	4baa      	ldr	r3, [pc, #680]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	4ba9      	ldr	r3, [pc, #676]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 8004410:	2180      	movs	r1, #128	; 0x80
 8004412:	02c9      	lsls	r1, r1, #11
 8004414:	430a      	orrs	r2, r1
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	4ba6      	ldr	r3, [pc, #664]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	4ba5      	ldr	r3, [pc, #660]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 800441e:	2180      	movs	r1, #128	; 0x80
 8004420:	0249      	lsls	r1, r1, #9
 8004422:	430a      	orrs	r2, r1
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	e00b      	b.n	8004440 <HAL_RCC_OscConfig+0xbc>
 8004428:	4ba2      	ldr	r3, [pc, #648]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4ba1      	ldr	r3, [pc, #644]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 800442e:	49a2      	ldr	r1, [pc, #648]	; (80046b8 <HAL_RCC_OscConfig+0x334>)
 8004430:	400a      	ands	r2, r1
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	4b9f      	ldr	r3, [pc, #636]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	4b9e      	ldr	r3, [pc, #632]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 800443a:	49a0      	ldr	r1, [pc, #640]	; (80046bc <HAL_RCC_OscConfig+0x338>)
 800443c:	400a      	ands	r2, r1
 800443e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d014      	beq.n	8004472 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004448:	f7fe fde2 	bl	8003010 <HAL_GetTick>
 800444c:	0003      	movs	r3, r0
 800444e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004452:	f7fe fddd 	bl	8003010 <HAL_GetTick>
 8004456:	0002      	movs	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b64      	cmp	r3, #100	; 0x64
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e2e9      	b.n	8004a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004464:	4b93      	ldr	r3, [pc, #588]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	2380      	movs	r3, #128	; 0x80
 800446a:	029b      	lsls	r3, r3, #10
 800446c:	4013      	ands	r3, r2
 800446e:	d0f0      	beq.n	8004452 <HAL_RCC_OscConfig+0xce>
 8004470:	e015      	b.n	800449e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004472:	f7fe fdcd 	bl	8003010 <HAL_GetTick>
 8004476:	0003      	movs	r3, r0
 8004478:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800447c:	f7fe fdc8 	bl	8003010 <HAL_GetTick>
 8004480:	0002      	movs	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b64      	cmp	r3, #100	; 0x64
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e2d4      	b.n	8004a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800448e:	4b89      	ldr	r3, [pc, #548]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	2380      	movs	r3, #128	; 0x80
 8004494:	029b      	lsls	r3, r3, #10
 8004496:	4013      	ands	r3, r2
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0xf8>
 800449a:	e000      	b.n	800449e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800449c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2202      	movs	r2, #2
 80044a4:	4013      	ands	r3, r2
 80044a6:	d100      	bne.n	80044aa <HAL_RCC_OscConfig+0x126>
 80044a8:	e099      	b.n	80045de <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044aa:	4b82      	ldr	r3, [pc, #520]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2238      	movs	r2, #56	; 0x38
 80044b0:	4013      	ands	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044b4:	4b7f      	ldr	r3, [pc, #508]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	2203      	movs	r2, #3
 80044ba:	4013      	ands	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	2b10      	cmp	r3, #16
 80044c2:	d102      	bne.n	80044ca <HAL_RCC_OscConfig+0x146>
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d002      	beq.n	80044d0 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d135      	bne.n	800453c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044d0:	4b78      	ldr	r3, [pc, #480]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	2380      	movs	r3, #128	; 0x80
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	4013      	ands	r3, r2
 80044da:	d005      	beq.n	80044e8 <HAL_RCC_OscConfig+0x164>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e2a7      	b.n	8004a38 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e8:	4b72      	ldr	r3, [pc, #456]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	4a74      	ldr	r2, [pc, #464]	; (80046c0 <HAL_RCC_OscConfig+0x33c>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	0019      	movs	r1, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	021a      	lsls	r2, r3, #8
 80044f8:	4b6e      	ldr	r3, [pc, #440]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 80044fa:	430a      	orrs	r2, r1
 80044fc:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d112      	bne.n	800452a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004504:	4b6b      	ldr	r3, [pc, #428]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a6e      	ldr	r2, [pc, #440]	; (80046c4 <HAL_RCC_OscConfig+0x340>)
 800450a:	4013      	ands	r3, r2
 800450c:	0019      	movs	r1, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	4b68      	ldr	r3, [pc, #416]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 8004514:	430a      	orrs	r2, r1
 8004516:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004518:	4b66      	ldr	r3, [pc, #408]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	0adb      	lsrs	r3, r3, #11
 800451e:	2207      	movs	r2, #7
 8004520:	4013      	ands	r3, r2
 8004522:	4a69      	ldr	r2, [pc, #420]	; (80046c8 <HAL_RCC_OscConfig+0x344>)
 8004524:	40da      	lsrs	r2, r3
 8004526:	4b69      	ldr	r3, [pc, #420]	; (80046cc <HAL_RCC_OscConfig+0x348>)
 8004528:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800452a:	4b69      	ldr	r3, [pc, #420]	; (80046d0 <HAL_RCC_OscConfig+0x34c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	0018      	movs	r0, r3
 8004530:	f7fe fd12 	bl	8002f58 <HAL_InitTick>
 8004534:	1e03      	subs	r3, r0, #0
 8004536:	d051      	beq.n	80045dc <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e27d      	b.n	8004a38 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d030      	beq.n	80045a6 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004544:	4b5b      	ldr	r3, [pc, #364]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a5e      	ldr	r2, [pc, #376]	; (80046c4 <HAL_RCC_OscConfig+0x340>)
 800454a:	4013      	ands	r3, r2
 800454c:	0019      	movs	r1, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691a      	ldr	r2, [r3, #16]
 8004552:	4b58      	ldr	r3, [pc, #352]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 8004554:	430a      	orrs	r2, r1
 8004556:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004558:	4b56      	ldr	r3, [pc, #344]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	4b55      	ldr	r3, [pc, #340]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 800455e:	2180      	movs	r1, #128	; 0x80
 8004560:	0049      	lsls	r1, r1, #1
 8004562:	430a      	orrs	r2, r1
 8004564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004566:	f7fe fd53 	bl	8003010 <HAL_GetTick>
 800456a:	0003      	movs	r3, r0
 800456c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004570:	f7fe fd4e 	bl	8003010 <HAL_GetTick>
 8004574:	0002      	movs	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e25a      	b.n	8004a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004582:	4b4c      	ldr	r3, [pc, #304]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	2380      	movs	r3, #128	; 0x80
 8004588:	00db      	lsls	r3, r3, #3
 800458a:	4013      	ands	r3, r2
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800458e:	4b49      	ldr	r3, [pc, #292]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	4a4b      	ldr	r2, [pc, #300]	; (80046c0 <HAL_RCC_OscConfig+0x33c>)
 8004594:	4013      	ands	r3, r2
 8004596:	0019      	movs	r1, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	021a      	lsls	r2, r3, #8
 800459e:	4b45      	ldr	r3, [pc, #276]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 80045a0:	430a      	orrs	r2, r1
 80045a2:	605a      	str	r2, [r3, #4]
 80045a4:	e01b      	b.n	80045de <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80045a6:	4b43      	ldr	r3, [pc, #268]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4b42      	ldr	r3, [pc, #264]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 80045ac:	4949      	ldr	r1, [pc, #292]	; (80046d4 <HAL_RCC_OscConfig+0x350>)
 80045ae:	400a      	ands	r2, r1
 80045b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b2:	f7fe fd2d 	bl	8003010 <HAL_GetTick>
 80045b6:	0003      	movs	r3, r0
 80045b8:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045bc:	f7fe fd28 	bl	8003010 <HAL_GetTick>
 80045c0:	0002      	movs	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e234      	b.n	8004a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045ce:	4b39      	ldr	r3, [pc, #228]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	2380      	movs	r3, #128	; 0x80
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4013      	ands	r3, r2
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x238>
 80045da:	e000      	b.n	80045de <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045dc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2208      	movs	r2, #8
 80045e4:	4013      	ands	r3, r2
 80045e6:	d047      	beq.n	8004678 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80045e8:	4b32      	ldr	r3, [pc, #200]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2238      	movs	r2, #56	; 0x38
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b18      	cmp	r3, #24
 80045f2:	d10a      	bne.n	800460a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80045f4:	4b2f      	ldr	r3, [pc, #188]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 80045f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f8:	2202      	movs	r2, #2
 80045fa:	4013      	ands	r3, r2
 80045fc:	d03c      	beq.n	8004678 <HAL_RCC_OscConfig+0x2f4>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d138      	bne.n	8004678 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e216      	b.n	8004a38 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d019      	beq.n	8004646 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004612:	4b28      	ldr	r3, [pc, #160]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 8004614:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004616:	4b27      	ldr	r3, [pc, #156]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 8004618:	2101      	movs	r1, #1
 800461a:	430a      	orrs	r2, r1
 800461c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461e:	f7fe fcf7 	bl	8003010 <HAL_GetTick>
 8004622:	0003      	movs	r3, r0
 8004624:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004628:	f7fe fcf2 	bl	8003010 <HAL_GetTick>
 800462c:	0002      	movs	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e1fe      	b.n	8004a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800463a:	4b1e      	ldr	r3, [pc, #120]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 800463c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800463e:	2202      	movs	r2, #2
 8004640:	4013      	ands	r3, r2
 8004642:	d0f1      	beq.n	8004628 <HAL_RCC_OscConfig+0x2a4>
 8004644:	e018      	b.n	8004678 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004646:	4b1b      	ldr	r3, [pc, #108]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 8004648:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800464a:	4b1a      	ldr	r3, [pc, #104]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 800464c:	2101      	movs	r1, #1
 800464e:	438a      	bics	r2, r1
 8004650:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004652:	f7fe fcdd 	bl	8003010 <HAL_GetTick>
 8004656:	0003      	movs	r3, r0
 8004658:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800465c:	f7fe fcd8 	bl	8003010 <HAL_GetTick>
 8004660:	0002      	movs	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e1e4      	b.n	8004a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800466e:	4b11      	ldr	r3, [pc, #68]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 8004670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004672:	2202      	movs	r2, #2
 8004674:	4013      	ands	r3, r2
 8004676:	d1f1      	bne.n	800465c <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2204      	movs	r2, #4
 800467e:	4013      	ands	r3, r2
 8004680:	d100      	bne.n	8004684 <HAL_RCC_OscConfig+0x300>
 8004682:	e0c7      	b.n	8004814 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004684:	231f      	movs	r3, #31
 8004686:	18fb      	adds	r3, r7, r3
 8004688:	2200      	movs	r2, #0
 800468a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800468c:	4b09      	ldr	r3, [pc, #36]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2238      	movs	r2, #56	; 0x38
 8004692:	4013      	ands	r3, r2
 8004694:	2b20      	cmp	r3, #32
 8004696:	d11f      	bne.n	80046d8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004698:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <HAL_RCC_OscConfig+0x330>)
 800469a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469c:	2202      	movs	r2, #2
 800469e:	4013      	ands	r3, r2
 80046a0:	d100      	bne.n	80046a4 <HAL_RCC_OscConfig+0x320>
 80046a2:	e0b7      	b.n	8004814 <HAL_RCC_OscConfig+0x490>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d000      	beq.n	80046ae <HAL_RCC_OscConfig+0x32a>
 80046ac:	e0b2      	b.n	8004814 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e1c2      	b.n	8004a38 <HAL_RCC_OscConfig+0x6b4>
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	40021000 	.word	0x40021000
 80046b8:	fffeffff 	.word	0xfffeffff
 80046bc:	fffbffff 	.word	0xfffbffff
 80046c0:	ffff80ff 	.word	0xffff80ff
 80046c4:	ffffc7ff 	.word	0xffffc7ff
 80046c8:	00f42400 	.word	0x00f42400
 80046cc:	20000014 	.word	0x20000014
 80046d0:	20000018 	.word	0x20000018
 80046d4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046d8:	4bb5      	ldr	r3, [pc, #724]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 80046da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046dc:	2380      	movs	r3, #128	; 0x80
 80046de:	055b      	lsls	r3, r3, #21
 80046e0:	4013      	ands	r3, r2
 80046e2:	d101      	bne.n	80046e8 <HAL_RCC_OscConfig+0x364>
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <HAL_RCC_OscConfig+0x366>
 80046e8:	2300      	movs	r3, #0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d011      	beq.n	8004712 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80046ee:	4bb0      	ldr	r3, [pc, #704]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 80046f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046f2:	4baf      	ldr	r3, [pc, #700]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 80046f4:	2180      	movs	r1, #128	; 0x80
 80046f6:	0549      	lsls	r1, r1, #21
 80046f8:	430a      	orrs	r2, r1
 80046fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80046fc:	4bac      	ldr	r3, [pc, #688]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 80046fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004700:	2380      	movs	r3, #128	; 0x80
 8004702:	055b      	lsls	r3, r3, #21
 8004704:	4013      	ands	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800470a:	231f      	movs	r3, #31
 800470c:	18fb      	adds	r3, r7, r3
 800470e:	2201      	movs	r2, #1
 8004710:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004712:	4ba8      	ldr	r3, [pc, #672]	; (80049b4 <HAL_RCC_OscConfig+0x630>)
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	2380      	movs	r3, #128	; 0x80
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	4013      	ands	r3, r2
 800471c:	d11a      	bne.n	8004754 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800471e:	4ba5      	ldr	r3, [pc, #660]	; (80049b4 <HAL_RCC_OscConfig+0x630>)
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4ba4      	ldr	r3, [pc, #656]	; (80049b4 <HAL_RCC_OscConfig+0x630>)
 8004724:	2180      	movs	r1, #128	; 0x80
 8004726:	0049      	lsls	r1, r1, #1
 8004728:	430a      	orrs	r2, r1
 800472a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800472c:	f7fe fc70 	bl	8003010 <HAL_GetTick>
 8004730:	0003      	movs	r3, r0
 8004732:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004736:	f7fe fc6b 	bl	8003010 <HAL_GetTick>
 800473a:	0002      	movs	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e177      	b.n	8004a38 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004748:	4b9a      	ldr	r3, [pc, #616]	; (80049b4 <HAL_RCC_OscConfig+0x630>)
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	2380      	movs	r3, #128	; 0x80
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	4013      	ands	r3, r2
 8004752:	d0f0      	beq.n	8004736 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d106      	bne.n	800476a <HAL_RCC_OscConfig+0x3e6>
 800475c:	4b94      	ldr	r3, [pc, #592]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 800475e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004760:	4b93      	ldr	r3, [pc, #588]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 8004762:	2101      	movs	r1, #1
 8004764:	430a      	orrs	r2, r1
 8004766:	65da      	str	r2, [r3, #92]	; 0x5c
 8004768:	e01c      	b.n	80047a4 <HAL_RCC_OscConfig+0x420>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b05      	cmp	r3, #5
 8004770:	d10c      	bne.n	800478c <HAL_RCC_OscConfig+0x408>
 8004772:	4b8f      	ldr	r3, [pc, #572]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 8004774:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004776:	4b8e      	ldr	r3, [pc, #568]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 8004778:	2104      	movs	r1, #4
 800477a:	430a      	orrs	r2, r1
 800477c:	65da      	str	r2, [r3, #92]	; 0x5c
 800477e:	4b8c      	ldr	r3, [pc, #560]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 8004780:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004782:	4b8b      	ldr	r3, [pc, #556]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 8004784:	2101      	movs	r1, #1
 8004786:	430a      	orrs	r2, r1
 8004788:	65da      	str	r2, [r3, #92]	; 0x5c
 800478a:	e00b      	b.n	80047a4 <HAL_RCC_OscConfig+0x420>
 800478c:	4b88      	ldr	r3, [pc, #544]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 800478e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004790:	4b87      	ldr	r3, [pc, #540]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 8004792:	2101      	movs	r1, #1
 8004794:	438a      	bics	r2, r1
 8004796:	65da      	str	r2, [r3, #92]	; 0x5c
 8004798:	4b85      	ldr	r3, [pc, #532]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 800479a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800479c:	4b84      	ldr	r3, [pc, #528]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 800479e:	2104      	movs	r1, #4
 80047a0:	438a      	bics	r2, r1
 80047a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d014      	beq.n	80047d6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7fe fc30 	bl	8003010 <HAL_GetTick>
 80047b0:	0003      	movs	r3, r0
 80047b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047b4:	e009      	b.n	80047ca <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b6:	f7fe fc2b 	bl	8003010 <HAL_GetTick>
 80047ba:	0002      	movs	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	4a7d      	ldr	r2, [pc, #500]	; (80049b8 <HAL_RCC_OscConfig+0x634>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e136      	b.n	8004a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ca:	4b79      	ldr	r3, [pc, #484]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 80047cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ce:	2202      	movs	r2, #2
 80047d0:	4013      	ands	r3, r2
 80047d2:	d0f0      	beq.n	80047b6 <HAL_RCC_OscConfig+0x432>
 80047d4:	e013      	b.n	80047fe <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d6:	f7fe fc1b 	bl	8003010 <HAL_GetTick>
 80047da:	0003      	movs	r3, r0
 80047dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047de:	e009      	b.n	80047f4 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e0:	f7fe fc16 	bl	8003010 <HAL_GetTick>
 80047e4:	0002      	movs	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	4a73      	ldr	r2, [pc, #460]	; (80049b8 <HAL_RCC_OscConfig+0x634>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e121      	b.n	8004a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047f4:	4b6e      	ldr	r3, [pc, #440]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 80047f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f8:	2202      	movs	r2, #2
 80047fa:	4013      	ands	r3, r2
 80047fc:	d1f0      	bne.n	80047e0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80047fe:	231f      	movs	r3, #31
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d105      	bne.n	8004814 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004808:	4b69      	ldr	r3, [pc, #420]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 800480a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800480c:	4b68      	ldr	r3, [pc, #416]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 800480e:	496b      	ldr	r1, [pc, #428]	; (80049bc <HAL_RCC_OscConfig+0x638>)
 8004810:	400a      	ands	r2, r1
 8004812:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2220      	movs	r2, #32
 800481a:	4013      	ands	r3, r2
 800481c:	d039      	beq.n	8004892 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d01b      	beq.n	800485e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004826:	4b62      	ldr	r3, [pc, #392]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	4b61      	ldr	r3, [pc, #388]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 800482c:	2180      	movs	r1, #128	; 0x80
 800482e:	03c9      	lsls	r1, r1, #15
 8004830:	430a      	orrs	r2, r1
 8004832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004834:	f7fe fbec 	bl	8003010 <HAL_GetTick>
 8004838:	0003      	movs	r3, r0
 800483a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800483c:	e008      	b.n	8004850 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800483e:	f7fe fbe7 	bl	8003010 <HAL_GetTick>
 8004842:	0002      	movs	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e0f3      	b.n	8004a38 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004850:	4b57      	ldr	r3, [pc, #348]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	2380      	movs	r3, #128	; 0x80
 8004856:	041b      	lsls	r3, r3, #16
 8004858:	4013      	ands	r3, r2
 800485a:	d0f0      	beq.n	800483e <HAL_RCC_OscConfig+0x4ba>
 800485c:	e019      	b.n	8004892 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800485e:	4b54      	ldr	r3, [pc, #336]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4b53      	ldr	r3, [pc, #332]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 8004864:	4956      	ldr	r1, [pc, #344]	; (80049c0 <HAL_RCC_OscConfig+0x63c>)
 8004866:	400a      	ands	r2, r1
 8004868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486a:	f7fe fbd1 	bl	8003010 <HAL_GetTick>
 800486e:	0003      	movs	r3, r0
 8004870:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004874:	f7fe fbcc 	bl	8003010 <HAL_GetTick>
 8004878:	0002      	movs	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e0d8      	b.n	8004a38 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004886:	4b4a      	ldr	r3, [pc, #296]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	2380      	movs	r3, #128	; 0x80
 800488c:	041b      	lsls	r3, r3, #16
 800488e:	4013      	ands	r3, r2
 8004890:	d1f0      	bne.n	8004874 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d100      	bne.n	800489c <HAL_RCC_OscConfig+0x518>
 800489a:	e0cc      	b.n	8004a36 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800489c:	4b44      	ldr	r3, [pc, #272]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	2238      	movs	r2, #56	; 0x38
 80048a2:	4013      	ands	r3, r2
 80048a4:	2b10      	cmp	r3, #16
 80048a6:	d100      	bne.n	80048aa <HAL_RCC_OscConfig+0x526>
 80048a8:	e07b      	b.n	80049a2 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d156      	bne.n	8004960 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b2:	4b3f      	ldr	r3, [pc, #252]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	4b3e      	ldr	r3, [pc, #248]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 80048b8:	4942      	ldr	r1, [pc, #264]	; (80049c4 <HAL_RCC_OscConfig+0x640>)
 80048ba:	400a      	ands	r2, r1
 80048bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048be:	f7fe fba7 	bl	8003010 <HAL_GetTick>
 80048c2:	0003      	movs	r3, r0
 80048c4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c8:	f7fe fba2 	bl	8003010 <HAL_GetTick>
 80048cc:	0002      	movs	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e0ae      	b.n	8004a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048da:	4b35      	ldr	r3, [pc, #212]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	2380      	movs	r3, #128	; 0x80
 80048e0:	049b      	lsls	r3, r3, #18
 80048e2:	4013      	ands	r3, r2
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048e6:	4b32      	ldr	r3, [pc, #200]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	4a37      	ldr	r2, [pc, #220]	; (80049c8 <HAL_RCC_OscConfig+0x644>)
 80048ec:	4013      	ands	r3, r2
 80048ee:	0019      	movs	r1, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	431a      	orrs	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fe:	021b      	lsls	r3, r3, #8
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004912:	431a      	orrs	r2, r3
 8004914:	4b26      	ldr	r3, [pc, #152]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 8004916:	430a      	orrs	r2, r1
 8004918:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800491a:	4b25      	ldr	r3, [pc, #148]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	4b24      	ldr	r3, [pc, #144]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 8004920:	2180      	movs	r1, #128	; 0x80
 8004922:	0449      	lsls	r1, r1, #17
 8004924:	430a      	orrs	r2, r1
 8004926:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004928:	4b21      	ldr	r3, [pc, #132]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	4b20      	ldr	r3, [pc, #128]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 800492e:	2180      	movs	r1, #128	; 0x80
 8004930:	0549      	lsls	r1, r1, #21
 8004932:	430a      	orrs	r2, r1
 8004934:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004936:	f7fe fb6b 	bl	8003010 <HAL_GetTick>
 800493a:	0003      	movs	r3, r0
 800493c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004940:	f7fe fb66 	bl	8003010 <HAL_GetTick>
 8004944:	0002      	movs	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e072      	b.n	8004a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004952:	4b17      	ldr	r3, [pc, #92]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	2380      	movs	r3, #128	; 0x80
 8004958:	049b      	lsls	r3, r3, #18
 800495a:	4013      	ands	r3, r2
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0x5bc>
 800495e:	e06a      	b.n	8004a36 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004960:	4b13      	ldr	r3, [pc, #76]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	4b12      	ldr	r3, [pc, #72]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 8004966:	4917      	ldr	r1, [pc, #92]	; (80049c4 <HAL_RCC_OscConfig+0x640>)
 8004968:	400a      	ands	r2, r1
 800496a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7fe fb50 	bl	8003010 <HAL_GetTick>
 8004970:	0003      	movs	r3, r0
 8004972:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004976:	f7fe fb4b 	bl	8003010 <HAL_GetTick>
 800497a:	0002      	movs	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e057      	b.n	8004a38 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004988:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	2380      	movs	r3, #128	; 0x80
 800498e:	049b      	lsls	r3, r3, #18
 8004990:	4013      	ands	r3, r2
 8004992:	d1f0      	bne.n	8004976 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004994:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <HAL_RCC_OscConfig+0x62c>)
 800499a:	490c      	ldr	r1, [pc, #48]	; (80049cc <HAL_RCC_OscConfig+0x648>)
 800499c:	400a      	ands	r2, r1
 800499e:	60da      	str	r2, [r3, #12]
 80049a0:	e049      	b.n	8004a36 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d112      	bne.n	80049d0 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e044      	b.n	8004a38 <HAL_RCC_OscConfig+0x6b4>
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	40021000 	.word	0x40021000
 80049b4:	40007000 	.word	0x40007000
 80049b8:	00001388 	.word	0x00001388
 80049bc:	efffffff 	.word	0xefffffff
 80049c0:	ffbfffff 	.word	0xffbfffff
 80049c4:	feffffff 	.word	0xfeffffff
 80049c8:	11c1808c 	.word	0x11c1808c
 80049cc:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80049d0:	4b1b      	ldr	r3, [pc, #108]	; (8004a40 <HAL_RCC_OscConfig+0x6bc>)
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2203      	movs	r2, #3
 80049da:	401a      	ands	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d126      	bne.n	8004a32 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	2270      	movs	r2, #112	; 0x70
 80049e8:	401a      	ands	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d11f      	bne.n	8004a32 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	23fe      	movs	r3, #254	; 0xfe
 80049f6:	01db      	lsls	r3, r3, #7
 80049f8:	401a      	ands	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d116      	bne.n	8004a32 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	23f8      	movs	r3, #248	; 0xf8
 8004a08:	039b      	lsls	r3, r3, #14
 8004a0a:	401a      	ands	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d10e      	bne.n	8004a32 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	23e0      	movs	r3, #224	; 0xe0
 8004a18:	051b      	lsls	r3, r3, #20
 8004a1a:	401a      	ands	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d106      	bne.n	8004a32 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	0f5b      	lsrs	r3, r3, #29
 8004a28:	075a      	lsls	r2, r3, #29
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d001      	beq.n	8004a36 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	0018      	movs	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b008      	add	sp, #32
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40021000 	.word	0x40021000

08004a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0e9      	b.n	8004c2c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a58:	4b76      	ldr	r3, [pc, #472]	; (8004c34 <HAL_RCC_ClockConfig+0x1f0>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2207      	movs	r2, #7
 8004a5e:	4013      	ands	r3, r2
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d91e      	bls.n	8004aa4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a66:	4b73      	ldr	r3, [pc, #460]	; (8004c34 <HAL_RCC_ClockConfig+0x1f0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2207      	movs	r2, #7
 8004a6c:	4393      	bics	r3, r2
 8004a6e:	0019      	movs	r1, r3
 8004a70:	4b70      	ldr	r3, [pc, #448]	; (8004c34 <HAL_RCC_ClockConfig+0x1f0>)
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	430a      	orrs	r2, r1
 8004a76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a78:	f7fe faca 	bl	8003010 <HAL_GetTick>
 8004a7c:	0003      	movs	r3, r0
 8004a7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a80:	e009      	b.n	8004a96 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a82:	f7fe fac5 	bl	8003010 <HAL_GetTick>
 8004a86:	0002      	movs	r2, r0
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	4a6a      	ldr	r2, [pc, #424]	; (8004c38 <HAL_RCC_ClockConfig+0x1f4>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e0ca      	b.n	8004c2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a96:	4b67      	ldr	r3, [pc, #412]	; (8004c34 <HAL_RCC_ClockConfig+0x1f0>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2207      	movs	r2, #7
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d1ee      	bne.n	8004a82 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	4013      	ands	r3, r2
 8004aac:	d015      	beq.n	8004ada <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2204      	movs	r2, #4
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	d006      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004ab8:	4b60      	ldr	r3, [pc, #384]	; (8004c3c <HAL_RCC_ClockConfig+0x1f8>)
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	4b5f      	ldr	r3, [pc, #380]	; (8004c3c <HAL_RCC_ClockConfig+0x1f8>)
 8004abe:	21e0      	movs	r1, #224	; 0xe0
 8004ac0:	01c9      	lsls	r1, r1, #7
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac6:	4b5d      	ldr	r3, [pc, #372]	; (8004c3c <HAL_RCC_ClockConfig+0x1f8>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	4a5d      	ldr	r2, [pc, #372]	; (8004c40 <HAL_RCC_ClockConfig+0x1fc>)
 8004acc:	4013      	ands	r3, r2
 8004ace:	0019      	movs	r1, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	4b59      	ldr	r3, [pc, #356]	; (8004c3c <HAL_RCC_ClockConfig+0x1f8>)
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	d057      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d107      	bne.n	8004afc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aec:	4b53      	ldr	r3, [pc, #332]	; (8004c3c <HAL_RCC_ClockConfig+0x1f8>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	2380      	movs	r3, #128	; 0x80
 8004af2:	029b      	lsls	r3, r3, #10
 8004af4:	4013      	ands	r3, r2
 8004af6:	d12b      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e097      	b.n	8004c2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d107      	bne.n	8004b14 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b04:	4b4d      	ldr	r3, [pc, #308]	; (8004c3c <HAL_RCC_ClockConfig+0x1f8>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	049b      	lsls	r3, r3, #18
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d11f      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e08b      	b.n	8004c2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d107      	bne.n	8004b2c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b1c:	4b47      	ldr	r3, [pc, #284]	; (8004c3c <HAL_RCC_ClockConfig+0x1f8>)
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	2380      	movs	r3, #128	; 0x80
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	4013      	ands	r3, r2
 8004b26:	d113      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e07f      	b.n	8004c2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	d106      	bne.n	8004b42 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b34:	4b41      	ldr	r3, [pc, #260]	; (8004c3c <HAL_RCC_ClockConfig+0x1f8>)
 8004b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b38:	2202      	movs	r2, #2
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d108      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e074      	b.n	8004c2c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b42:	4b3e      	ldr	r3, [pc, #248]	; (8004c3c <HAL_RCC_ClockConfig+0x1f8>)
 8004b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b46:	2202      	movs	r2, #2
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d101      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e06d      	b.n	8004c2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b50:	4b3a      	ldr	r3, [pc, #232]	; (8004c3c <HAL_RCC_ClockConfig+0x1f8>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	2207      	movs	r2, #7
 8004b56:	4393      	bics	r3, r2
 8004b58:	0019      	movs	r1, r3
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	4b37      	ldr	r3, [pc, #220]	; (8004c3c <HAL_RCC_ClockConfig+0x1f8>)
 8004b60:	430a      	orrs	r2, r1
 8004b62:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b64:	f7fe fa54 	bl	8003010 <HAL_GetTick>
 8004b68:	0003      	movs	r3, r0
 8004b6a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6c:	e009      	b.n	8004b82 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b6e:	f7fe fa4f 	bl	8003010 <HAL_GetTick>
 8004b72:	0002      	movs	r2, r0
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	4a2f      	ldr	r2, [pc, #188]	; (8004c38 <HAL_RCC_ClockConfig+0x1f4>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e054      	b.n	8004c2c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b82:	4b2e      	ldr	r3, [pc, #184]	; (8004c3c <HAL_RCC_ClockConfig+0x1f8>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2238      	movs	r2, #56	; 0x38
 8004b88:	401a      	ands	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d1ec      	bne.n	8004b6e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b94:	4b27      	ldr	r3, [pc, #156]	; (8004c34 <HAL_RCC_ClockConfig+0x1f0>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2207      	movs	r2, #7
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d21e      	bcs.n	8004be0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba2:	4b24      	ldr	r3, [pc, #144]	; (8004c34 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2207      	movs	r2, #7
 8004ba8:	4393      	bics	r3, r2
 8004baa:	0019      	movs	r1, r3
 8004bac:	4b21      	ldr	r3, [pc, #132]	; (8004c34 <HAL_RCC_ClockConfig+0x1f0>)
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004bb4:	f7fe fa2c 	bl	8003010 <HAL_GetTick>
 8004bb8:	0003      	movs	r3, r0
 8004bba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004bbc:	e009      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bbe:	f7fe fa27 	bl	8003010 <HAL_GetTick>
 8004bc2:	0002      	movs	r2, r0
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	4a1b      	ldr	r2, [pc, #108]	; (8004c38 <HAL_RCC_ClockConfig+0x1f4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e02c      	b.n	8004c2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004bd2:	4b18      	ldr	r3, [pc, #96]	; (8004c34 <HAL_RCC_ClockConfig+0x1f0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2207      	movs	r2, #7
 8004bd8:	4013      	ands	r3, r2
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d1ee      	bne.n	8004bbe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2204      	movs	r2, #4
 8004be6:	4013      	ands	r3, r2
 8004be8:	d009      	beq.n	8004bfe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004bea:	4b14      	ldr	r3, [pc, #80]	; (8004c3c <HAL_RCC_ClockConfig+0x1f8>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	4a15      	ldr	r2, [pc, #84]	; (8004c44 <HAL_RCC_ClockConfig+0x200>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	0019      	movs	r1, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	4b10      	ldr	r3, [pc, #64]	; (8004c3c <HAL_RCC_ClockConfig+0x1f8>)
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004bfe:	f000 f829 	bl	8004c54 <HAL_RCC_GetSysClockFreq>
 8004c02:	0001      	movs	r1, r0
 8004c04:	4b0d      	ldr	r3, [pc, #52]	; (8004c3c <HAL_RCC_ClockConfig+0x1f8>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	0a1b      	lsrs	r3, r3, #8
 8004c0a:	220f      	movs	r2, #15
 8004c0c:	401a      	ands	r2, r3
 8004c0e:	4b0e      	ldr	r3, [pc, #56]	; (8004c48 <HAL_RCC_ClockConfig+0x204>)
 8004c10:	0092      	lsls	r2, r2, #2
 8004c12:	58d3      	ldr	r3, [r2, r3]
 8004c14:	221f      	movs	r2, #31
 8004c16:	4013      	ands	r3, r2
 8004c18:	000a      	movs	r2, r1
 8004c1a:	40da      	lsrs	r2, r3
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <HAL_RCC_ClockConfig+0x208>)
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c20:	4b0b      	ldr	r3, [pc, #44]	; (8004c50 <HAL_RCC_ClockConfig+0x20c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	0018      	movs	r0, r3
 8004c26:	f7fe f997 	bl	8002f58 <HAL_InitTick>
 8004c2a:	0003      	movs	r3, r0
}
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	b004      	add	sp, #16
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40022000 	.word	0x40022000
 8004c38:	00001388 	.word	0x00001388
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	fffff0ff 	.word	0xfffff0ff
 8004c44:	ffff8fff 	.word	0xffff8fff
 8004c48:	08007abc 	.word	0x08007abc
 8004c4c:	20000014 	.word	0x20000014
 8004c50:	20000018 	.word	0x20000018

08004c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c5a:	4b3c      	ldr	r3, [pc, #240]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2238      	movs	r2, #56	; 0x38
 8004c60:	4013      	ands	r3, r2
 8004c62:	d10f      	bne.n	8004c84 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004c64:	4b39      	ldr	r3, [pc, #228]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	0adb      	lsrs	r3, r3, #11
 8004c6a:	2207      	movs	r2, #7
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	2201      	movs	r2, #1
 8004c70:	409a      	lsls	r2, r3
 8004c72:	0013      	movs	r3, r2
 8004c74:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004c76:	6839      	ldr	r1, [r7, #0]
 8004c78:	4835      	ldr	r0, [pc, #212]	; (8004d50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004c7a:	f7fb fa55 	bl	8000128 <__udivsi3>
 8004c7e:	0003      	movs	r3, r0
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	e05d      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c84:	4b31      	ldr	r3, [pc, #196]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	2238      	movs	r2, #56	; 0x38
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d102      	bne.n	8004c96 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c90:	4b30      	ldr	r3, [pc, #192]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x100>)
 8004c92:	613b      	str	r3, [r7, #16]
 8004c94:	e054      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c96:	4b2d      	ldr	r3, [pc, #180]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2238      	movs	r2, #56	; 0x38
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	2b10      	cmp	r3, #16
 8004ca0:	d138      	bne.n	8004d14 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004ca2:	4b2a      	ldr	r3, [pc, #168]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	2203      	movs	r2, #3
 8004ca8:	4013      	ands	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cac:	4b27      	ldr	r3, [pc, #156]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	091b      	lsrs	r3, r3, #4
 8004cb2:	2207      	movs	r2, #7
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d10d      	bne.n	8004cdc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cc0:	68b9      	ldr	r1, [r7, #8]
 8004cc2:	4824      	ldr	r0, [pc, #144]	; (8004d54 <HAL_RCC_GetSysClockFreq+0x100>)
 8004cc4:	f7fb fa30 	bl	8000128 <__udivsi3>
 8004cc8:	0003      	movs	r3, r0
 8004cca:	0019      	movs	r1, r3
 8004ccc:	4b1f      	ldr	r3, [pc, #124]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	0a1b      	lsrs	r3, r3, #8
 8004cd2:	227f      	movs	r2, #127	; 0x7f
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	434b      	muls	r3, r1
 8004cd8:	617b      	str	r3, [r7, #20]
        break;
 8004cda:	e00d      	b.n	8004cf8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	481c      	ldr	r0, [pc, #112]	; (8004d50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004ce0:	f7fb fa22 	bl	8000128 <__udivsi3>
 8004ce4:	0003      	movs	r3, r0
 8004ce6:	0019      	movs	r1, r3
 8004ce8:	4b18      	ldr	r3, [pc, #96]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	0a1b      	lsrs	r3, r3, #8
 8004cee:	227f      	movs	r2, #127	; 0x7f
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	434b      	muls	r3, r1
 8004cf4:	617b      	str	r3, [r7, #20]
        break;
 8004cf6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004cf8:	4b14      	ldr	r3, [pc, #80]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	0f5b      	lsrs	r3, r3, #29
 8004cfe:	2207      	movs	r2, #7
 8004d00:	4013      	ands	r3, r2
 8004d02:	3301      	adds	r3, #1
 8004d04:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	6978      	ldr	r0, [r7, #20]
 8004d0a:	f7fb fa0d 	bl	8000128 <__udivsi3>
 8004d0e:	0003      	movs	r3, r0
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	e015      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004d14:	4b0d      	ldr	r3, [pc, #52]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	2238      	movs	r2, #56	; 0x38
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d103      	bne.n	8004d28 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004d20:	2380      	movs	r3, #128	; 0x80
 8004d22:	021b      	lsls	r3, r3, #8
 8004d24:	613b      	str	r3, [r7, #16]
 8004d26:	e00b      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004d28:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2238      	movs	r2, #56	; 0x38
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2b18      	cmp	r3, #24
 8004d32:	d103      	bne.n	8004d3c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004d34:	23fa      	movs	r3, #250	; 0xfa
 8004d36:	01db      	lsls	r3, r3, #7
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	e001      	b.n	8004d40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004d40:	693b      	ldr	r3, [r7, #16]
}
 8004d42:	0018      	movs	r0, r3
 8004d44:	46bd      	mov	sp, r7
 8004d46:	b006      	add	sp, #24
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	46c0      	nop			; (mov r8, r8)
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	00f42400 	.word	0x00f42400
 8004d54:	007a1200 	.word	0x007a1200

08004d58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d5c:	4b02      	ldr	r3, [pc, #8]	; (8004d68 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
}
 8004d60:	0018      	movs	r0, r3
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	20000014 	.word	0x20000014

08004d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d6c:	b5b0      	push	{r4, r5, r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004d70:	f7ff fff2 	bl	8004d58 <HAL_RCC_GetHCLKFreq>
 8004d74:	0004      	movs	r4, r0
 8004d76:	f7ff faf9 	bl	800436c <LL_RCC_GetAPB1Prescaler>
 8004d7a:	0003      	movs	r3, r0
 8004d7c:	0b1a      	lsrs	r2, r3, #12
 8004d7e:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d80:	0092      	lsls	r2, r2, #2
 8004d82:	58d3      	ldr	r3, [r2, r3]
 8004d84:	221f      	movs	r2, #31
 8004d86:	4013      	ands	r3, r2
 8004d88:	40dc      	lsrs	r4, r3
 8004d8a:	0023      	movs	r3, r4
}
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bdb0      	pop	{r4, r5, r7, pc}
 8004d92:	46c0      	nop			; (mov r8, r8)
 8004d94:	08007afc 	.word	0x08007afc

08004d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004da0:	2313      	movs	r3, #19
 8004da2:	18fb      	adds	r3, r7, r3
 8004da4:	2200      	movs	r2, #0
 8004da6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004da8:	2312      	movs	r3, #18
 8004daa:	18fb      	adds	r3, r7, r3
 8004dac:	2200      	movs	r2, #0
 8004dae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	2380      	movs	r3, #128	; 0x80
 8004db6:	029b      	lsls	r3, r3, #10
 8004db8:	4013      	ands	r3, r2
 8004dba:	d100      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004dbc:	e0ad      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dbe:	2011      	movs	r0, #17
 8004dc0:	183b      	adds	r3, r7, r0
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dc6:	4b47      	ldr	r3, [pc, #284]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dca:	2380      	movs	r3, #128	; 0x80
 8004dcc:	055b      	lsls	r3, r3, #21
 8004dce:	4013      	ands	r3, r2
 8004dd0:	d110      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dd2:	4b44      	ldr	r3, [pc, #272]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004dd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dd6:	4b43      	ldr	r3, [pc, #268]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004dd8:	2180      	movs	r1, #128	; 0x80
 8004dda:	0549      	lsls	r1, r1, #21
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	63da      	str	r2, [r3, #60]	; 0x3c
 8004de0:	4b40      	ldr	r3, [pc, #256]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004de2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004de4:	2380      	movs	r3, #128	; 0x80
 8004de6:	055b      	lsls	r3, r3, #21
 8004de8:	4013      	ands	r3, r2
 8004dea:	60bb      	str	r3, [r7, #8]
 8004dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dee:	183b      	adds	r3, r7, r0
 8004df0:	2201      	movs	r2, #1
 8004df2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004df4:	4b3c      	ldr	r3, [pc, #240]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	4b3b      	ldr	r3, [pc, #236]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004dfa:	2180      	movs	r1, #128	; 0x80
 8004dfc:	0049      	lsls	r1, r1, #1
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e02:	f7fe f905 	bl	8003010 <HAL_GetTick>
 8004e06:	0003      	movs	r3, r0
 8004e08:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e0a:	e00b      	b.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e0c:	f7fe f900 	bl	8003010 <HAL_GetTick>
 8004e10:	0002      	movs	r2, r0
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d904      	bls.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004e1a:	2313      	movs	r3, #19
 8004e1c:	18fb      	adds	r3, r7, r3
 8004e1e:	2203      	movs	r2, #3
 8004e20:	701a      	strb	r2, [r3, #0]
        break;
 8004e22:	e005      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e24:	4b30      	ldr	r3, [pc, #192]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	2380      	movs	r3, #128	; 0x80
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	d0ed      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004e30:	2313      	movs	r3, #19
 8004e32:	18fb      	adds	r3, r7, r3
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d15e      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e3a:	4b2a      	ldr	r3, [pc, #168]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e3e:	23c0      	movs	r3, #192	; 0xc0
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4013      	ands	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d019      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d014      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e56:	4b23      	ldr	r3, [pc, #140]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e5a:	4a24      	ldr	r2, [pc, #144]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e60:	4b20      	ldr	r3, [pc, #128]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e64:	4b1f      	ldr	r3, [pc, #124]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e66:	2180      	movs	r1, #128	; 0x80
 8004e68:	0249      	lsls	r1, r1, #9
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e72:	4b1c      	ldr	r3, [pc, #112]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e74:	491e      	ldr	r1, [pc, #120]	; (8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8004e76:	400a      	ands	r2, r1
 8004e78:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e7a:	4b1a      	ldr	r3, [pc, #104]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	2201      	movs	r2, #1
 8004e84:	4013      	ands	r3, r2
 8004e86:	d016      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e88:	f7fe f8c2 	bl	8003010 <HAL_GetTick>
 8004e8c:	0003      	movs	r3, r0
 8004e8e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e90:	e00c      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e92:	f7fe f8bd 	bl	8003010 <HAL_GetTick>
 8004e96:	0002      	movs	r2, r0
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	4a15      	ldr	r2, [pc, #84]	; (8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d904      	bls.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004ea2:	2313      	movs	r3, #19
 8004ea4:	18fb      	adds	r3, r7, r3
 8004ea6:	2203      	movs	r2, #3
 8004ea8:	701a      	strb	r2, [r3, #0]
            break;
 8004eaa:	e004      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eac:	4b0d      	ldr	r3, [pc, #52]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	d0ed      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004eb6:	2313      	movs	r3, #19
 8004eb8:	18fb      	adds	r3, r7, r3
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10a      	bne.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ec0:	4b08      	ldr	r3, [pc, #32]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec4:	4a09      	ldr	r2, [pc, #36]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	0019      	movs	r1, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ece:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ed4:	e016      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ed6:	2312      	movs	r3, #18
 8004ed8:	18fb      	adds	r3, r7, r3
 8004eda:	2213      	movs	r2, #19
 8004edc:	18ba      	adds	r2, r7, r2
 8004ede:	7812      	ldrb	r2, [r2, #0]
 8004ee0:	701a      	strb	r2, [r3, #0]
 8004ee2:	e00f      	b.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	40007000 	.word	0x40007000
 8004eec:	fffffcff 	.word	0xfffffcff
 8004ef0:	fffeffff 	.word	0xfffeffff
 8004ef4:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef8:	2312      	movs	r3, #18
 8004efa:	18fb      	adds	r3, r7, r3
 8004efc:	2213      	movs	r2, #19
 8004efe:	18ba      	adds	r2, r7, r2
 8004f00:	7812      	ldrb	r2, [r2, #0]
 8004f02:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f04:	2311      	movs	r3, #17
 8004f06:	18fb      	adds	r3, r7, r3
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d105      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f0e:	4bb6      	ldr	r3, [pc, #728]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f12:	4bb5      	ldr	r3, [pc, #724]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f14:	49b5      	ldr	r1, [pc, #724]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8004f16:	400a      	ands	r2, r1
 8004f18:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	4013      	ands	r3, r2
 8004f22:	d009      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f24:	4bb0      	ldr	r3, [pc, #704]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f28:	2203      	movs	r2, #3
 8004f2a:	4393      	bics	r3, r2
 8004f2c:	0019      	movs	r1, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	4bad      	ldr	r3, [pc, #692]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f34:	430a      	orrs	r2, r1
 8004f36:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d009      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f42:	4ba9      	ldr	r3, [pc, #676]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f46:	220c      	movs	r2, #12
 8004f48:	4393      	bics	r3, r2
 8004f4a:	0019      	movs	r1, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	4ba5      	ldr	r3, [pc, #660]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f52:	430a      	orrs	r2, r1
 8004f54:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2204      	movs	r2, #4
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d009      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f60:	4ba1      	ldr	r3, [pc, #644]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f64:	2230      	movs	r2, #48	; 0x30
 8004f66:	4393      	bics	r3, r2
 8004f68:	0019      	movs	r1, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	4b9e      	ldr	r3, [pc, #632]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f70:	430a      	orrs	r2, r1
 8004f72:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2210      	movs	r2, #16
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d009      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f7e:	4b9a      	ldr	r3, [pc, #616]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f82:	4a9b      	ldr	r2, [pc, #620]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004f84:	4013      	ands	r3, r2
 8004f86:	0019      	movs	r1, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	691a      	ldr	r2, [r3, #16]
 8004f8c:	4b96      	ldr	r3, [pc, #600]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	2380      	movs	r3, #128	; 0x80
 8004f98:	015b      	lsls	r3, r3, #5
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d009      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8004f9e:	4b92      	ldr	r3, [pc, #584]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa2:	4a94      	ldr	r2, [pc, #592]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	0019      	movs	r1, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	695a      	ldr	r2, [r3, #20]
 8004fac:	4b8e      	ldr	r3, [pc, #568]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	2380      	movs	r3, #128	; 0x80
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4013      	ands	r3, r2
 8004fbc:	d009      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fbe:	4b8a      	ldr	r3, [pc, #552]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc2:	4a8d      	ldr	r2, [pc, #564]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	0019      	movs	r1, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fcc:	4b86      	ldr	r3, [pc, #536]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	2380      	movs	r3, #128	; 0x80
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d009      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004fde:	4b82      	ldr	r3, [pc, #520]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe2:	4a86      	ldr	r2, [pc, #536]	; (80051fc <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	0019      	movs	r1, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fec:	4b7e      	ldr	r3, [pc, #504]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	d009      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ffc:	4b7a      	ldr	r3, [pc, #488]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005000:	4a7f      	ldr	r2, [pc, #508]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005002:	4013      	ands	r3, r2
 8005004:	0019      	movs	r1, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	4b77      	ldr	r3, [pc, #476]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800500c:	430a      	orrs	r2, r1
 800500e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2240      	movs	r2, #64	; 0x40
 8005016:	4013      	ands	r3, r2
 8005018:	d009      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800501a:	4b73      	ldr	r3, [pc, #460]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800501c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800501e:	4a79      	ldr	r2, [pc, #484]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005020:	4013      	ands	r3, r2
 8005022:	0019      	movs	r1, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	4b6f      	ldr	r3, [pc, #444]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800502a:	430a      	orrs	r2, r1
 800502c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	2380      	movs	r3, #128	; 0x80
 8005034:	01db      	lsls	r3, r3, #7
 8005036:	4013      	ands	r3, r2
 8005038:	d015      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800503a:	4b6b      	ldr	r3, [pc, #428]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800503c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	0899      	lsrs	r1, r3, #2
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005046:	4b68      	ldr	r3, [pc, #416]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005048:	430a      	orrs	r2, r1
 800504a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005050:	2380      	movs	r3, #128	; 0x80
 8005052:	05db      	lsls	r3, r3, #23
 8005054:	429a      	cmp	r2, r3
 8005056:	d106      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005058:	4b63      	ldr	r3, [pc, #396]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	4b62      	ldr	r3, [pc, #392]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800505e:	2180      	movs	r1, #128	; 0x80
 8005060:	0249      	lsls	r1, r1, #9
 8005062:	430a      	orrs	r2, r1
 8005064:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	2380      	movs	r3, #128	; 0x80
 800506c:	031b      	lsls	r3, r3, #12
 800506e:	4013      	ands	r3, r2
 8005070:	d009      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005072:	4b5d      	ldr	r3, [pc, #372]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005076:	2240      	movs	r2, #64	; 0x40
 8005078:	4393      	bics	r3, r2
 800507a:	0019      	movs	r1, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005080:	4b59      	ldr	r3, [pc, #356]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005082:	430a      	orrs	r2, r1
 8005084:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	2380      	movs	r3, #128	; 0x80
 800508c:	039b      	lsls	r3, r3, #14
 800508e:	4013      	ands	r3, r2
 8005090:	d016      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005092:	4b55      	ldr	r3, [pc, #340]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005096:	4a5c      	ldr	r2, [pc, #368]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005098:	4013      	ands	r3, r2
 800509a:	0019      	movs	r1, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050a0:	4b51      	ldr	r3, [pc, #324]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050a2:	430a      	orrs	r2, r1
 80050a4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050aa:	2380      	movs	r3, #128	; 0x80
 80050ac:	03db      	lsls	r3, r3, #15
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d106      	bne.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80050b2:	4b4d      	ldr	r3, [pc, #308]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	4b4c      	ldr	r3, [pc, #304]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050b8:	2180      	movs	r1, #128	; 0x80
 80050ba:	0449      	lsls	r1, r1, #17
 80050bc:	430a      	orrs	r2, r1
 80050be:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	2380      	movs	r3, #128	; 0x80
 80050c6:	03db      	lsls	r3, r3, #15
 80050c8:	4013      	ands	r3, r2
 80050ca:	d016      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80050cc:	4b46      	ldr	r3, [pc, #280]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d0:	4a4e      	ldr	r2, [pc, #312]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80050d2:	4013      	ands	r3, r2
 80050d4:	0019      	movs	r1, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050da:	4b43      	ldr	r3, [pc, #268]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050dc:	430a      	orrs	r2, r1
 80050de:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050e4:	2380      	movs	r3, #128	; 0x80
 80050e6:	045b      	lsls	r3, r3, #17
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d106      	bne.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80050ec:	4b3e      	ldr	r3, [pc, #248]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	4b3d      	ldr	r3, [pc, #244]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80050f2:	2180      	movs	r1, #128	; 0x80
 80050f4:	0449      	lsls	r1, r1, #17
 80050f6:	430a      	orrs	r2, r1
 80050f8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	2380      	movs	r3, #128	; 0x80
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	4013      	ands	r3, r2
 8005104:	d014      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005106:	4b38      	ldr	r3, [pc, #224]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510a:	2203      	movs	r2, #3
 800510c:	4393      	bics	r3, r2
 800510e:	0019      	movs	r1, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a1a      	ldr	r2, [r3, #32]
 8005114:	4b34      	ldr	r3, [pc, #208]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005116:	430a      	orrs	r2, r1
 8005118:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d106      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005122:	4b31      	ldr	r3, [pc, #196]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	4b30      	ldr	r3, [pc, #192]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005128:	2180      	movs	r1, #128	; 0x80
 800512a:	0249      	lsls	r1, r1, #9
 800512c:	430a      	orrs	r2, r1
 800512e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	2380      	movs	r3, #128	; 0x80
 8005136:	019b      	lsls	r3, r3, #6
 8005138:	4013      	ands	r3, r2
 800513a:	d014      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800513c:	4b2a      	ldr	r3, [pc, #168]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800513e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005140:	220c      	movs	r2, #12
 8005142:	4393      	bics	r3, r2
 8005144:	0019      	movs	r1, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800514a:	4b27      	ldr	r3, [pc, #156]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800514c:	430a      	orrs	r2, r1
 800514e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	2b04      	cmp	r3, #4
 8005156:	d106      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005158:	4b23      	ldr	r3, [pc, #140]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	4b22      	ldr	r3, [pc, #136]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800515e:	2180      	movs	r1, #128	; 0x80
 8005160:	0249      	lsls	r1, r1, #9
 8005162:	430a      	orrs	r2, r1
 8005164:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	2380      	movs	r3, #128	; 0x80
 800516c:	045b      	lsls	r3, r3, #17
 800516e:	4013      	ands	r3, r2
 8005170:	d016      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005172:	4b1d      	ldr	r3, [pc, #116]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005176:	4a22      	ldr	r2, [pc, #136]	; (8005200 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005178:	4013      	ands	r3, r2
 800517a:	0019      	movs	r1, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005180:	4b19      	ldr	r3, [pc, #100]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005182:	430a      	orrs	r2, r1
 8005184:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800518a:	2380      	movs	r3, #128	; 0x80
 800518c:	019b      	lsls	r3, r3, #6
 800518e:	429a      	cmp	r2, r3
 8005190:	d106      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005192:	4b15      	ldr	r3, [pc, #84]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	4b14      	ldr	r3, [pc, #80]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005198:	2180      	movs	r1, #128	; 0x80
 800519a:	0449      	lsls	r1, r1, #17
 800519c:	430a      	orrs	r2, r1
 800519e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	2380      	movs	r3, #128	; 0x80
 80051a6:	049b      	lsls	r3, r3, #18
 80051a8:	4013      	ands	r3, r2
 80051aa:	d016      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051ac:	4b0e      	ldr	r3, [pc, #56]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b0:	4a10      	ldr	r2, [pc, #64]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	0019      	movs	r1, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051ba:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051bc:	430a      	orrs	r2, r1
 80051be:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051c4:	2380      	movs	r3, #128	; 0x80
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d106      	bne.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80051cc:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051ce:	68da      	ldr	r2, [r3, #12]
 80051d0:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80051d2:	2180      	movs	r1, #128	; 0x80
 80051d4:	0449      	lsls	r1, r1, #17
 80051d6:	430a      	orrs	r2, r1
 80051d8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80051da:	2312      	movs	r3, #18
 80051dc:	18fb      	adds	r3, r7, r3
 80051de:	781b      	ldrb	r3, [r3, #0]
}
 80051e0:	0018      	movs	r0, r3
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b006      	add	sp, #24
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40021000 	.word	0x40021000
 80051ec:	efffffff 	.word	0xefffffff
 80051f0:	fffff3ff 	.word	0xfffff3ff
 80051f4:	fffffcff 	.word	0xfffffcff
 80051f8:	fff3ffff 	.word	0xfff3ffff
 80051fc:	ffcfffff 	.word	0xffcfffff
 8005200:	ffffcfff 	.word	0xffffcfff
 8005204:	ffff3fff 	.word	0xffff3fff
 8005208:	ffbfffff 	.word	0xffbfffff
 800520c:	feffffff 	.word	0xfeffffff

08005210 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e0a8      	b.n	8005374 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	2382      	movs	r3, #130	; 0x82
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	429a      	cmp	r2, r3
 8005234:	d009      	beq.n	800524a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	61da      	str	r2, [r3, #28]
 800523c:	e005      	b.n	800524a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	225d      	movs	r2, #93	; 0x5d
 8005254:	5c9b      	ldrb	r3, [r3, r2]
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d107      	bne.n	800526c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	225c      	movs	r2, #92	; 0x5c
 8005260:	2100      	movs	r1, #0
 8005262:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	0018      	movs	r0, r3
 8005268:	f7fd fcfe 	bl	8002c68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	225d      	movs	r2, #93	; 0x5d
 8005270:	2102      	movs	r1, #2
 8005272:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2140      	movs	r1, #64	; 0x40
 8005280:	438a      	bics	r2, r1
 8005282:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	23e0      	movs	r3, #224	; 0xe0
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	429a      	cmp	r2, r3
 800528e:	d902      	bls.n	8005296 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005290:	2300      	movs	r3, #0
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	e002      	b.n	800529c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005296:	2380      	movs	r3, #128	; 0x80
 8005298:	015b      	lsls	r3, r3, #5
 800529a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	23f0      	movs	r3, #240	; 0xf0
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d008      	beq.n	80052ba <HAL_SPI_Init+0xaa>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	23e0      	movs	r3, #224	; 0xe0
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d002      	beq.n	80052ba <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	2382      	movs	r3, #130	; 0x82
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	401a      	ands	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6899      	ldr	r1, [r3, #8]
 80052c8:	2384      	movs	r3, #132	; 0x84
 80052ca:	021b      	lsls	r3, r3, #8
 80052cc:	400b      	ands	r3, r1
 80052ce:	431a      	orrs	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	2102      	movs	r1, #2
 80052d6:	400b      	ands	r3, r1
 80052d8:	431a      	orrs	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	2101      	movs	r1, #1
 80052e0:	400b      	ands	r3, r1
 80052e2:	431a      	orrs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6999      	ldr	r1, [r3, #24]
 80052e8:	2380      	movs	r3, #128	; 0x80
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	400b      	ands	r3, r1
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	2138      	movs	r1, #56	; 0x38
 80052f6:	400b      	ands	r3, r1
 80052f8:	431a      	orrs	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	2180      	movs	r1, #128	; 0x80
 8005300:	400b      	ands	r3, r1
 8005302:	431a      	orrs	r2, r3
 8005304:	0011      	movs	r1, r2
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800530a:	2380      	movs	r3, #128	; 0x80
 800530c:	019b      	lsls	r3, r3, #6
 800530e:	401a      	ands	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	0c1b      	lsrs	r3, r3, #16
 800531e:	2204      	movs	r2, #4
 8005320:	401a      	ands	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005326:	2110      	movs	r1, #16
 8005328:	400b      	ands	r3, r1
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005330:	2108      	movs	r1, #8
 8005332:	400b      	ands	r3, r1
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68d9      	ldr	r1, [r3, #12]
 800533a:	23f0      	movs	r3, #240	; 0xf0
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	400b      	ands	r3, r1
 8005340:	431a      	orrs	r2, r3
 8005342:	0011      	movs	r1, r2
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	2380      	movs	r3, #128	; 0x80
 8005348:	015b      	lsls	r3, r3, #5
 800534a:	401a      	ands	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	69da      	ldr	r2, [r3, #28]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4907      	ldr	r1, [pc, #28]	; (800537c <HAL_SPI_Init+0x16c>)
 8005360:	400a      	ands	r2, r1
 8005362:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	225d      	movs	r2, #93	; 0x5d
 800536e:	2101      	movs	r1, #1
 8005370:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	0018      	movs	r0, r3
 8005376:	46bd      	mov	sp, r7
 8005378:	b004      	add	sp, #16
 800537a:	bd80      	pop	{r7, pc}
 800537c:	fffff7ff 	.word	0xfffff7ff

08005380 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b088      	sub	sp, #32
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	603b      	str	r3, [r7, #0]
 800538c:	1dbb      	adds	r3, r7, #6
 800538e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005390:	231f      	movs	r3, #31
 8005392:	18fb      	adds	r3, r7, r3
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	225c      	movs	r2, #92	; 0x5c
 800539c:	5c9b      	ldrb	r3, [r3, r2]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d101      	bne.n	80053a6 <HAL_SPI_Transmit+0x26>
 80053a2:	2302      	movs	r3, #2
 80053a4:	e140      	b.n	8005628 <HAL_SPI_Transmit+0x2a8>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	225c      	movs	r2, #92	; 0x5c
 80053aa:	2101      	movs	r1, #1
 80053ac:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053ae:	f7fd fe2f 	bl	8003010 <HAL_GetTick>
 80053b2:	0003      	movs	r3, r0
 80053b4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80053b6:	2316      	movs	r3, #22
 80053b8:	18fb      	adds	r3, r7, r3
 80053ba:	1dba      	adds	r2, r7, #6
 80053bc:	8812      	ldrh	r2, [r2, #0]
 80053be:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	225d      	movs	r2, #93	; 0x5d
 80053c4:	5c9b      	ldrb	r3, [r3, r2]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d004      	beq.n	80053d6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80053cc:	231f      	movs	r3, #31
 80053ce:	18fb      	adds	r3, r7, r3
 80053d0:	2202      	movs	r2, #2
 80053d2:	701a      	strb	r2, [r3, #0]
    goto error;
 80053d4:	e11d      	b.n	8005612 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <HAL_SPI_Transmit+0x64>
 80053dc:	1dbb      	adds	r3, r7, #6
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d104      	bne.n	80053ee <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80053e4:	231f      	movs	r3, #31
 80053e6:	18fb      	adds	r3, r7, r3
 80053e8:	2201      	movs	r2, #1
 80053ea:	701a      	strb	r2, [r3, #0]
    goto error;
 80053ec:	e111      	b.n	8005612 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	225d      	movs	r2, #93	; 0x5d
 80053f2:	2103      	movs	r1, #3
 80053f4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	1dba      	adds	r2, r7, #6
 8005406:	8812      	ldrh	r2, [r2, #0]
 8005408:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	1dba      	adds	r2, r7, #6
 800540e:	8812      	ldrh	r2, [r2, #0]
 8005410:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2244      	movs	r2, #68	; 0x44
 800541c:	2100      	movs	r1, #0
 800541e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2246      	movs	r2, #70	; 0x46
 8005424:	2100      	movs	r1, #0
 8005426:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	2380      	movs	r3, #128	; 0x80
 800543a:	021b      	lsls	r3, r3, #8
 800543c:	429a      	cmp	r2, r3
 800543e:	d110      	bne.n	8005462 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2140      	movs	r1, #64	; 0x40
 800544c:	438a      	bics	r2, r1
 800544e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2180      	movs	r1, #128	; 0x80
 800545c:	01c9      	lsls	r1, r1, #7
 800545e:	430a      	orrs	r2, r1
 8005460:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2240      	movs	r2, #64	; 0x40
 800546a:	4013      	ands	r3, r2
 800546c:	2b40      	cmp	r3, #64	; 0x40
 800546e:	d007      	beq.n	8005480 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2140      	movs	r1, #64	; 0x40
 800547c:	430a      	orrs	r2, r1
 800547e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	23e0      	movs	r3, #224	; 0xe0
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	429a      	cmp	r2, r3
 800548a:	d94e      	bls.n	800552a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d004      	beq.n	800549e <HAL_SPI_Transmit+0x11e>
 8005494:	2316      	movs	r3, #22
 8005496:	18fb      	adds	r3, r7, r3
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d13f      	bne.n	800551e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	881a      	ldrh	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	1c9a      	adds	r2, r3, #2
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054c2:	e02c      	b.n	800551e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	2202      	movs	r2, #2
 80054cc:	4013      	ands	r3, r2
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d112      	bne.n	80054f8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d6:	881a      	ldrh	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e2:	1c9a      	adds	r2, r3, #2
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	3b01      	subs	r3, #1
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054f6:	e012      	b.n	800551e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054f8:	f7fd fd8a 	bl	8003010 <HAL_GetTick>
 80054fc:	0002      	movs	r2, r0
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	429a      	cmp	r2, r3
 8005506:	d802      	bhi.n	800550e <HAL_SPI_Transmit+0x18e>
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	3301      	adds	r3, #1
 800550c:	d102      	bne.n	8005514 <HAL_SPI_Transmit+0x194>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d104      	bne.n	800551e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005514:	231f      	movs	r3, #31
 8005516:	18fb      	adds	r3, r7, r3
 8005518:	2203      	movs	r2, #3
 800551a:	701a      	strb	r2, [r3, #0]
          goto error;
 800551c:	e079      	b.n	8005612 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1cd      	bne.n	80054c4 <HAL_SPI_Transmit+0x144>
 8005528:	e04f      	b.n	80055ca <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d004      	beq.n	800553c <HAL_SPI_Transmit+0x1bc>
 8005532:	2316      	movs	r3, #22
 8005534:	18fb      	adds	r3, r7, r3
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d141      	bne.n	80055c0 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	330c      	adds	r3, #12
 8005546:	7812      	ldrb	r2, [r2, #0]
 8005548:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005558:	b29b      	uxth	r3, r3
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005562:	e02d      	b.n	80055c0 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	2202      	movs	r2, #2
 800556c:	4013      	ands	r3, r2
 800556e:	2b02      	cmp	r3, #2
 8005570:	d113      	bne.n	800559a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	330c      	adds	r3, #12
 800557c:	7812      	ldrb	r2, [r2, #0]
 800557e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800558e:	b29b      	uxth	r3, r3
 8005590:	3b01      	subs	r3, #1
 8005592:	b29a      	uxth	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005598:	e012      	b.n	80055c0 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800559a:	f7fd fd39 	bl	8003010 <HAL_GetTick>
 800559e:	0002      	movs	r2, r0
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d802      	bhi.n	80055b0 <HAL_SPI_Transmit+0x230>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	3301      	adds	r3, #1
 80055ae:	d102      	bne.n	80055b6 <HAL_SPI_Transmit+0x236>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d104      	bne.n	80055c0 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80055b6:	231f      	movs	r3, #31
 80055b8:	18fb      	adds	r3, r7, r3
 80055ba:	2203      	movs	r2, #3
 80055bc:	701a      	strb	r2, [r3, #0]
          goto error;
 80055be:	e028      	b.n	8005612 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1cc      	bne.n	8005564 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	6839      	ldr	r1, [r7, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	0018      	movs	r0, r3
 80055d2:	f000 fcd9 	bl	8005f88 <SPI_EndRxTxTransaction>
 80055d6:	1e03      	subs	r3, r0, #0
 80055d8:	d002      	beq.n	80055e0 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2220      	movs	r2, #32
 80055de:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10a      	bne.n	80055fe <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055e8:	2300      	movs	r3, #0
 80055ea:	613b      	str	r3, [r7, #16]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	613b      	str	r3, [r7, #16]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	613b      	str	r3, [r7, #16]
 80055fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005602:	2b00      	cmp	r3, #0
 8005604:	d004      	beq.n	8005610 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8005606:	231f      	movs	r3, #31
 8005608:	18fb      	adds	r3, r7, r3
 800560a:	2201      	movs	r2, #1
 800560c:	701a      	strb	r2, [r3, #0]
 800560e:	e000      	b.n	8005612 <HAL_SPI_Transmit+0x292>
  }

error:
 8005610:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	225d      	movs	r2, #93	; 0x5d
 8005616:	2101      	movs	r1, #1
 8005618:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	225c      	movs	r2, #92	; 0x5c
 800561e:	2100      	movs	r1, #0
 8005620:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005622:	231f      	movs	r3, #31
 8005624:	18fb      	adds	r3, r7, r3
 8005626:	781b      	ldrb	r3, [r3, #0]
}
 8005628:	0018      	movs	r0, r3
 800562a:	46bd      	mov	sp, r7
 800562c:	b008      	add	sp, #32
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005630:	b590      	push	{r4, r7, lr}
 8005632:	b089      	sub	sp, #36	; 0x24
 8005634:	af02      	add	r7, sp, #8
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	603b      	str	r3, [r7, #0]
 800563c:	1dbb      	adds	r3, r7, #6
 800563e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005640:	2317      	movs	r3, #23
 8005642:	18fb      	adds	r3, r7, r3
 8005644:	2200      	movs	r2, #0
 8005646:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	2382      	movs	r3, #130	; 0x82
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	429a      	cmp	r2, r3
 8005652:	d113      	bne.n	800567c <HAL_SPI_Receive+0x4c>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10f      	bne.n	800567c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	225d      	movs	r2, #93	; 0x5d
 8005660:	2104      	movs	r1, #4
 8005662:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005664:	1dbb      	adds	r3, r7, #6
 8005666:	881c      	ldrh	r4, [r3, #0]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	68b9      	ldr	r1, [r7, #8]
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	0023      	movs	r3, r4
 8005674:	f000 f928 	bl	80058c8 <HAL_SPI_TransmitReceive>
 8005678:	0003      	movs	r3, r0
 800567a:	e11c      	b.n	80058b6 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	225c      	movs	r2, #92	; 0x5c
 8005680:	5c9b      	ldrb	r3, [r3, r2]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <HAL_SPI_Receive+0x5a>
 8005686:	2302      	movs	r3, #2
 8005688:	e115      	b.n	80058b6 <HAL_SPI_Receive+0x286>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	225c      	movs	r2, #92	; 0x5c
 800568e:	2101      	movs	r1, #1
 8005690:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005692:	f7fd fcbd 	bl	8003010 <HAL_GetTick>
 8005696:	0003      	movs	r3, r0
 8005698:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	225d      	movs	r2, #93	; 0x5d
 800569e:	5c9b      	ldrb	r3, [r3, r2]
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d004      	beq.n	80056b0 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80056a6:	2317      	movs	r3, #23
 80056a8:	18fb      	adds	r3, r7, r3
 80056aa:	2202      	movs	r2, #2
 80056ac:	701a      	strb	r2, [r3, #0]
    goto error;
 80056ae:	e0f7      	b.n	80058a0 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_SPI_Receive+0x8e>
 80056b6:	1dbb      	adds	r3, r7, #6
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d104      	bne.n	80056c8 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80056be:	2317      	movs	r3, #23
 80056c0:	18fb      	adds	r3, r7, r3
 80056c2:	2201      	movs	r2, #1
 80056c4:	701a      	strb	r2, [r3, #0]
    goto error;
 80056c6:	e0eb      	b.n	80058a0 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	225d      	movs	r2, #93	; 0x5d
 80056cc:	2104      	movs	r1, #4
 80056ce:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	1dba      	adds	r2, r7, #6
 80056e0:	2144      	movs	r1, #68	; 0x44
 80056e2:	8812      	ldrh	r2, [r2, #0]
 80056e4:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	1dba      	adds	r2, r7, #6
 80056ea:	2146      	movs	r1, #70	; 0x46
 80056ec:	8812      	ldrh	r2, [r2, #0]
 80056ee:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	23e0      	movs	r3, #224	; 0xe0
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	429a      	cmp	r2, r3
 8005718:	d908      	bls.n	800572c <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4966      	ldr	r1, [pc, #408]	; (80058c0 <HAL_SPI_Receive+0x290>)
 8005726:	400a      	ands	r2, r1
 8005728:	605a      	str	r2, [r3, #4]
 800572a:	e008      	b.n	800573e <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2180      	movs	r1, #128	; 0x80
 8005738:	0149      	lsls	r1, r1, #5
 800573a:	430a      	orrs	r2, r1
 800573c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	2380      	movs	r3, #128	; 0x80
 8005744:	021b      	lsls	r3, r3, #8
 8005746:	429a      	cmp	r2, r3
 8005748:	d10f      	bne.n	800576a <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2140      	movs	r1, #64	; 0x40
 8005756:	438a      	bics	r2, r1
 8005758:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4957      	ldr	r1, [pc, #348]	; (80058c4 <HAL_SPI_Receive+0x294>)
 8005766:	400a      	ands	r2, r1
 8005768:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2240      	movs	r2, #64	; 0x40
 8005772:	4013      	ands	r3, r2
 8005774:	2b40      	cmp	r3, #64	; 0x40
 8005776:	d007      	beq.n	8005788 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2140      	movs	r1, #64	; 0x40
 8005784:	430a      	orrs	r2, r1
 8005786:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	23e0      	movs	r3, #224	; 0xe0
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	429a      	cmp	r2, r3
 8005792:	d900      	bls.n	8005796 <HAL_SPI_Receive+0x166>
 8005794:	e069      	b.n	800586a <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005796:	e031      	b.n	80057fc <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	2201      	movs	r2, #1
 80057a0:	4013      	ands	r3, r2
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d117      	bne.n	80057d6 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	330c      	adds	r3, #12
 80057ac:	001a      	movs	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	7812      	ldrb	r2, [r2, #0]
 80057b4:	b2d2      	uxtb	r2, r2
 80057b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2246      	movs	r2, #70	; 0x46
 80057c6:	5a9b      	ldrh	r3, [r3, r2]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b299      	uxth	r1, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2246      	movs	r2, #70	; 0x46
 80057d2:	5299      	strh	r1, [r3, r2]
 80057d4:	e012      	b.n	80057fc <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057d6:	f7fd fc1b 	bl	8003010 <HAL_GetTick>
 80057da:	0002      	movs	r2, r0
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d802      	bhi.n	80057ec <HAL_SPI_Receive+0x1bc>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	3301      	adds	r3, #1
 80057ea:	d102      	bne.n	80057f2 <HAL_SPI_Receive+0x1c2>
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d104      	bne.n	80057fc <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80057f2:	2317      	movs	r3, #23
 80057f4:	18fb      	adds	r3, r7, r3
 80057f6:	2203      	movs	r2, #3
 80057f8:	701a      	strb	r2, [r3, #0]
          goto error;
 80057fa:	e051      	b.n	80058a0 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2246      	movs	r2, #70	; 0x46
 8005800:	5a9b      	ldrh	r3, [r3, r2]
 8005802:	b29b      	uxth	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1c7      	bne.n	8005798 <HAL_SPI_Receive+0x168>
 8005808:	e035      	b.n	8005876 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	2201      	movs	r2, #1
 8005812:	4013      	ands	r3, r2
 8005814:	2b01      	cmp	r3, #1
 8005816:	d115      	bne.n	8005844 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	b292      	uxth	r2, r2
 8005824:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	1c9a      	adds	r2, r3, #2
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2246      	movs	r2, #70	; 0x46
 8005834:	5a9b      	ldrh	r3, [r3, r2]
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	b299      	uxth	r1, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2246      	movs	r2, #70	; 0x46
 8005840:	5299      	strh	r1, [r3, r2]
 8005842:	e012      	b.n	800586a <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005844:	f7fd fbe4 	bl	8003010 <HAL_GetTick>
 8005848:	0002      	movs	r2, r0
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	429a      	cmp	r2, r3
 8005852:	d802      	bhi.n	800585a <HAL_SPI_Receive+0x22a>
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	3301      	adds	r3, #1
 8005858:	d102      	bne.n	8005860 <HAL_SPI_Receive+0x230>
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d104      	bne.n	800586a <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8005860:	2317      	movs	r3, #23
 8005862:	18fb      	adds	r3, r7, r3
 8005864:	2203      	movs	r2, #3
 8005866:	701a      	strb	r2, [r3, #0]
          goto error;
 8005868:	e01a      	b.n	80058a0 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2246      	movs	r2, #70	; 0x46
 800586e:	5a9b      	ldrh	r3, [r3, r2]
 8005870:	b29b      	uxth	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1c9      	bne.n	800580a <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	6839      	ldr	r1, [r7, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	0018      	movs	r0, r3
 800587e:	f000 fb25 	bl	8005ecc <SPI_EndRxTransaction>
 8005882:	1e03      	subs	r3, r0, #0
 8005884:	d002      	beq.n	800588c <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2220      	movs	r2, #32
 800588a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005890:	2b00      	cmp	r3, #0
 8005892:	d004      	beq.n	800589e <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8005894:	2317      	movs	r3, #23
 8005896:	18fb      	adds	r3, r7, r3
 8005898:	2201      	movs	r2, #1
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	e000      	b.n	80058a0 <HAL_SPI_Receive+0x270>
  }

error :
 800589e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	225d      	movs	r2, #93	; 0x5d
 80058a4:	2101      	movs	r1, #1
 80058a6:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	225c      	movs	r2, #92	; 0x5c
 80058ac:	2100      	movs	r1, #0
 80058ae:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80058b0:	2317      	movs	r3, #23
 80058b2:	18fb      	adds	r3, r7, r3
 80058b4:	781b      	ldrb	r3, [r3, #0]
}
 80058b6:	0018      	movs	r0, r3
 80058b8:	46bd      	mov	sp, r7
 80058ba:	b007      	add	sp, #28
 80058bc:	bd90      	pop	{r4, r7, pc}
 80058be:	46c0      	nop			; (mov r8, r8)
 80058c0:	ffffefff 	.word	0xffffefff
 80058c4:	ffffbfff 	.word	0xffffbfff

080058c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b08a      	sub	sp, #40	; 0x28
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
 80058d4:	001a      	movs	r2, r3
 80058d6:	1cbb      	adds	r3, r7, #2
 80058d8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80058da:	2301      	movs	r3, #1
 80058dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80058de:	2323      	movs	r3, #35	; 0x23
 80058e0:	18fb      	adds	r3, r7, r3
 80058e2:	2200      	movs	r2, #0
 80058e4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	225c      	movs	r2, #92	; 0x5c
 80058ea:	5c9b      	ldrb	r3, [r3, r2]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d101      	bne.n	80058f4 <HAL_SPI_TransmitReceive+0x2c>
 80058f0:	2302      	movs	r3, #2
 80058f2:	e1b5      	b.n	8005c60 <HAL_SPI_TransmitReceive+0x398>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	225c      	movs	r2, #92	; 0x5c
 80058f8:	2101      	movs	r1, #1
 80058fa:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058fc:	f7fd fb88 	bl	8003010 <HAL_GetTick>
 8005900:	0003      	movs	r3, r0
 8005902:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005904:	201b      	movs	r0, #27
 8005906:	183b      	adds	r3, r7, r0
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	215d      	movs	r1, #93	; 0x5d
 800590c:	5c52      	ldrb	r2, [r2, r1]
 800590e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005916:	2312      	movs	r3, #18
 8005918:	18fb      	adds	r3, r7, r3
 800591a:	1cba      	adds	r2, r7, #2
 800591c:	8812      	ldrh	r2, [r2, #0]
 800591e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005920:	183b      	adds	r3, r7, r0
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d011      	beq.n	800594c <HAL_SPI_TransmitReceive+0x84>
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	2382      	movs	r3, #130	; 0x82
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	429a      	cmp	r2, r3
 8005930:	d107      	bne.n	8005942 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d103      	bne.n	8005942 <HAL_SPI_TransmitReceive+0x7a>
 800593a:	183b      	adds	r3, r7, r0
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b04      	cmp	r3, #4
 8005940:	d004      	beq.n	800594c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005942:	2323      	movs	r3, #35	; 0x23
 8005944:	18fb      	adds	r3, r7, r3
 8005946:	2202      	movs	r2, #2
 8005948:	701a      	strb	r2, [r3, #0]
    goto error;
 800594a:	e17e      	b.n	8005c4a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d006      	beq.n	8005960 <HAL_SPI_TransmitReceive+0x98>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d003      	beq.n	8005960 <HAL_SPI_TransmitReceive+0x98>
 8005958:	1cbb      	adds	r3, r7, #2
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d104      	bne.n	800596a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005960:	2323      	movs	r3, #35	; 0x23
 8005962:	18fb      	adds	r3, r7, r3
 8005964:	2201      	movs	r2, #1
 8005966:	701a      	strb	r2, [r3, #0]
    goto error;
 8005968:	e16f      	b.n	8005c4a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	225d      	movs	r2, #93	; 0x5d
 800596e:	5c9b      	ldrb	r3, [r3, r2]
 8005970:	b2db      	uxtb	r3, r3
 8005972:	2b04      	cmp	r3, #4
 8005974:	d003      	beq.n	800597e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	225d      	movs	r2, #93	; 0x5d
 800597a:	2105      	movs	r1, #5
 800597c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	1cba      	adds	r2, r7, #2
 800598e:	2146      	movs	r1, #70	; 0x46
 8005990:	8812      	ldrh	r2, [r2, #0]
 8005992:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	1cba      	adds	r2, r7, #2
 8005998:	2144      	movs	r1, #68	; 0x44
 800599a:	8812      	ldrh	r2, [r2, #0]
 800599c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	1cba      	adds	r2, r7, #2
 80059a8:	8812      	ldrh	r2, [r2, #0]
 80059aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	1cba      	adds	r2, r7, #2
 80059b0:	8812      	ldrh	r2, [r2, #0]
 80059b2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	23e0      	movs	r3, #224	; 0xe0
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d908      	bls.n	80059de <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	49a4      	ldr	r1, [pc, #656]	; (8005c68 <HAL_SPI_TransmitReceive+0x3a0>)
 80059d8:	400a      	ands	r2, r1
 80059da:	605a      	str	r2, [r3, #4]
 80059dc:	e008      	b.n	80059f0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2180      	movs	r1, #128	; 0x80
 80059ea:	0149      	lsls	r1, r1, #5
 80059ec:	430a      	orrs	r2, r1
 80059ee:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2240      	movs	r2, #64	; 0x40
 80059f8:	4013      	ands	r3, r2
 80059fa:	2b40      	cmp	r3, #64	; 0x40
 80059fc:	d007      	beq.n	8005a0e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2140      	movs	r1, #64	; 0x40
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	68da      	ldr	r2, [r3, #12]
 8005a12:	23e0      	movs	r3, #224	; 0xe0
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d800      	bhi.n	8005a1c <HAL_SPI_TransmitReceive+0x154>
 8005a1a:	e07f      	b.n	8005b1c <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d005      	beq.n	8005a30 <HAL_SPI_TransmitReceive+0x168>
 8005a24:	2312      	movs	r3, #18
 8005a26:	18fb      	adds	r3, r7, r3
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d000      	beq.n	8005a30 <HAL_SPI_TransmitReceive+0x168>
 8005a2e:	e069      	b.n	8005b04 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	881a      	ldrh	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a40:	1c9a      	adds	r2, r3, #2
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a54:	e056      	b.n	8005b04 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	4013      	ands	r3, r2
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d11b      	bne.n	8005a9c <HAL_SPI_TransmitReceive+0x1d4>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d016      	beq.n	8005a9c <HAL_SPI_TransmitReceive+0x1d4>
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d113      	bne.n	8005a9c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	881a      	ldrh	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a84:	1c9a      	adds	r2, r3, #2
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	3b01      	subs	r3, #1
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d11c      	bne.n	8005ae4 <HAL_SPI_TransmitReceive+0x21c>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2246      	movs	r2, #70	; 0x46
 8005aae:	5a9b      	ldrh	r3, [r3, r2]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d016      	beq.n	8005ae4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac0:	b292      	uxth	r2, r2
 8005ac2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac8:	1c9a      	adds	r2, r3, #2
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2246      	movs	r2, #70	; 0x46
 8005ad2:	5a9b      	ldrh	r3, [r3, r2]
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	b299      	uxth	r1, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2246      	movs	r2, #70	; 0x46
 8005ade:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ae4:	f7fd fa94 	bl	8003010 <HAL_GetTick>
 8005ae8:	0002      	movs	r2, r0
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d807      	bhi.n	8005b04 <HAL_SPI_TransmitReceive+0x23c>
 8005af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af6:	3301      	adds	r3, #1
 8005af8:	d004      	beq.n	8005b04 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8005afa:	2323      	movs	r3, #35	; 0x23
 8005afc:	18fb      	adds	r3, r7, r3
 8005afe:	2203      	movs	r2, #3
 8005b00:	701a      	strb	r2, [r3, #0]
        goto error;
 8005b02:	e0a2      	b.n	8005c4a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1a3      	bne.n	8005a56 <HAL_SPI_TransmitReceive+0x18e>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2246      	movs	r2, #70	; 0x46
 8005b12:	5a9b      	ldrh	r3, [r3, r2]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d19d      	bne.n	8005a56 <HAL_SPI_TransmitReceive+0x18e>
 8005b1a:	e085      	b.n	8005c28 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d005      	beq.n	8005b30 <HAL_SPI_TransmitReceive+0x268>
 8005b24:	2312      	movs	r3, #18
 8005b26:	18fb      	adds	r3, r7, r3
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d000      	beq.n	8005b30 <HAL_SPI_TransmitReceive+0x268>
 8005b2e:	e070      	b.n	8005c12 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	330c      	adds	r3, #12
 8005b3a:	7812      	ldrb	r2, [r2, #0]
 8005b3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b56:	e05c      	b.n	8005c12 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	2202      	movs	r2, #2
 8005b60:	4013      	ands	r3, r2
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d11c      	bne.n	8005ba0 <HAL_SPI_TransmitReceive+0x2d8>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d017      	beq.n	8005ba0 <HAL_SPI_TransmitReceive+0x2d8>
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d114      	bne.n	8005ba0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	330c      	adds	r3, #12
 8005b80:	7812      	ldrb	r2, [r2, #0]
 8005b82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	4013      	ands	r3, r2
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d11e      	bne.n	8005bec <HAL_SPI_TransmitReceive+0x324>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2246      	movs	r2, #70	; 0x46
 8005bb2:	5a9b      	ldrh	r3, [r3, r2]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d018      	beq.n	8005bec <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	330c      	adds	r3, #12
 8005bc0:	001a      	movs	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc6:	7812      	ldrb	r2, [r2, #0]
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd0:	1c5a      	adds	r2, r3, #1
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2246      	movs	r2, #70	; 0x46
 8005bda:	5a9b      	ldrh	r3, [r3, r2]
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	3b01      	subs	r3, #1
 8005be0:	b299      	uxth	r1, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2246      	movs	r2, #70	; 0x46
 8005be6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005be8:	2301      	movs	r3, #1
 8005bea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005bec:	f7fd fa10 	bl	8003010 <HAL_GetTick>
 8005bf0:	0002      	movs	r2, r0
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d802      	bhi.n	8005c02 <HAL_SPI_TransmitReceive+0x33a>
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	3301      	adds	r3, #1
 8005c00:	d102      	bne.n	8005c08 <HAL_SPI_TransmitReceive+0x340>
 8005c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d104      	bne.n	8005c12 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8005c08:	2323      	movs	r3, #35	; 0x23
 8005c0a:	18fb      	adds	r3, r7, r3
 8005c0c:	2203      	movs	r2, #3
 8005c0e:	701a      	strb	r2, [r3, #0]
        goto error;
 8005c10:	e01b      	b.n	8005c4a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d19d      	bne.n	8005b58 <HAL_SPI_TransmitReceive+0x290>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2246      	movs	r2, #70	; 0x46
 8005c20:	5a9b      	ldrh	r3, [r3, r2]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d197      	bne.n	8005b58 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f000 f9aa 	bl	8005f88 <SPI_EndRxTxTransaction>
 8005c34:	1e03      	subs	r3, r0, #0
 8005c36:	d007      	beq.n	8005c48 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8005c38:	2323      	movs	r3, #35	; 0x23
 8005c3a:	18fb      	adds	r3, r7, r3
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2220      	movs	r2, #32
 8005c44:	661a      	str	r2, [r3, #96]	; 0x60
 8005c46:	e000      	b.n	8005c4a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8005c48:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	225d      	movs	r2, #93	; 0x5d
 8005c4e:	2101      	movs	r1, #1
 8005c50:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	225c      	movs	r2, #92	; 0x5c
 8005c56:	2100      	movs	r1, #0
 8005c58:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005c5a:	2323      	movs	r3, #35	; 0x23
 8005c5c:	18fb      	adds	r3, r7, r3
 8005c5e:	781b      	ldrb	r3, [r3, #0]
}
 8005c60:	0018      	movs	r0, r3
 8005c62:	46bd      	mov	sp, r7
 8005c64:	b00a      	add	sp, #40	; 0x28
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	ffffefff 	.word	0xffffefff

08005c6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	1dfb      	adds	r3, r7, #7
 8005c7a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c7c:	f7fd f9c8 	bl	8003010 <HAL_GetTick>
 8005c80:	0002      	movs	r2, r0
 8005c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c84:	1a9b      	subs	r3, r3, r2
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	18d3      	adds	r3, r2, r3
 8005c8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005c8c:	f7fd f9c0 	bl	8003010 <HAL_GetTick>
 8005c90:	0003      	movs	r3, r0
 8005c92:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c94:	4b3a      	ldr	r3, [pc, #232]	; (8005d80 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	015b      	lsls	r3, r3, #5
 8005c9a:	0d1b      	lsrs	r3, r3, #20
 8005c9c:	69fa      	ldr	r2, [r7, #28]
 8005c9e:	4353      	muls	r3, r2
 8005ca0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ca2:	e058      	b.n	8005d56 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	d055      	beq.n	8005d56 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005caa:	f7fd f9b1 	bl	8003010 <HAL_GetTick>
 8005cae:	0002      	movs	r2, r0
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d902      	bls.n	8005cc0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d142      	bne.n	8005d46 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	685a      	ldr	r2, [r3, #4]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	21e0      	movs	r1, #224	; 0xe0
 8005ccc:	438a      	bics	r2, r1
 8005cce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	2382      	movs	r3, #130	; 0x82
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d113      	bne.n	8005d04 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	2380      	movs	r3, #128	; 0x80
 8005ce2:	021b      	lsls	r3, r3, #8
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d005      	beq.n	8005cf4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	2380      	movs	r3, #128	; 0x80
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d107      	bne.n	8005d04 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2140      	movs	r1, #64	; 0x40
 8005d00:	438a      	bics	r2, r1
 8005d02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d08:	2380      	movs	r3, #128	; 0x80
 8005d0a:	019b      	lsls	r3, r3, #6
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d110      	bne.n	8005d32 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	491a      	ldr	r1, [pc, #104]	; (8005d84 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005d1c:	400a      	ands	r2, r1
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2180      	movs	r1, #128	; 0x80
 8005d2c:	0189      	lsls	r1, r1, #6
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	225d      	movs	r2, #93	; 0x5d
 8005d36:	2101      	movs	r1, #1
 8005d38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	225c      	movs	r2, #92	; 0x5c
 8005d3e:	2100      	movs	r1, #0
 8005d40:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e017      	b.n	8005d76 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	3b01      	subs	r3, #1
 8005d54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	68ba      	ldr	r2, [r7, #8]
 8005d5e:	4013      	ands	r3, r2
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	425a      	negs	r2, r3
 8005d66:	4153      	adcs	r3, r2
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	001a      	movs	r2, r3
 8005d6c:	1dfb      	adds	r3, r7, #7
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d197      	bne.n	8005ca4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	0018      	movs	r0, r3
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	b008      	add	sp, #32
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	46c0      	nop			; (mov r8, r8)
 8005d80:	20000014 	.word	0x20000014
 8005d84:	ffffdfff 	.word	0xffffdfff

08005d88 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08a      	sub	sp, #40	; 0x28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005d96:	2317      	movs	r3, #23
 8005d98:	18fb      	adds	r3, r7, r3
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005d9e:	f7fd f937 	bl	8003010 <HAL_GetTick>
 8005da2:	0002      	movs	r2, r0
 8005da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da6:	1a9b      	subs	r3, r3, r2
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	18d3      	adds	r3, r2, r3
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005dae:	f7fd f92f 	bl	8003010 <HAL_GetTick>
 8005db2:	0003      	movs	r3, r0
 8005db4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	330c      	adds	r3, #12
 8005dbc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005dbe:	4b41      	ldr	r3, [pc, #260]	; (8005ec4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	0013      	movs	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	189b      	adds	r3, r3, r2
 8005dc8:	00da      	lsls	r2, r3, #3
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	0d1b      	lsrs	r3, r3, #20
 8005dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd0:	4353      	muls	r3, r2
 8005dd2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005dd4:	e068      	b.n	8005ea8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005dd6:	68ba      	ldr	r2, [r7, #8]
 8005dd8:	23c0      	movs	r3, #192	; 0xc0
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d10a      	bne.n	8005df6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d107      	bne.n	8005df6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	2117      	movs	r1, #23
 8005dee:	187b      	adds	r3, r7, r1
 8005df0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005df2:	187b      	adds	r3, r7, r1
 8005df4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	d055      	beq.n	8005ea8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dfc:	f7fd f908 	bl	8003010 <HAL_GetTick>
 8005e00:	0002      	movs	r2, r0
 8005e02:	6a3b      	ldr	r3, [r7, #32]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d902      	bls.n	8005e12 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d142      	bne.n	8005e98 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	21e0      	movs	r1, #224	; 0xe0
 8005e1e:	438a      	bics	r2, r1
 8005e20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	2382      	movs	r3, #130	; 0x82
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d113      	bne.n	8005e56 <SPI_WaitFifoStateUntilTimeout+0xce>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	2380      	movs	r3, #128	; 0x80
 8005e34:	021b      	lsls	r3, r3, #8
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d005      	beq.n	8005e46 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	2380      	movs	r3, #128	; 0x80
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d107      	bne.n	8005e56 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2140      	movs	r1, #64	; 0x40
 8005e52:	438a      	bics	r2, r1
 8005e54:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e5a:	2380      	movs	r3, #128	; 0x80
 8005e5c:	019b      	lsls	r3, r3, #6
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d110      	bne.n	8005e84 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4916      	ldr	r1, [pc, #88]	; (8005ec8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005e6e:	400a      	ands	r2, r1
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2180      	movs	r1, #128	; 0x80
 8005e7e:	0189      	lsls	r1, r1, #6
 8005e80:	430a      	orrs	r2, r1
 8005e82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	225d      	movs	r2, #93	; 0x5d
 8005e88:	2101      	movs	r1, #1
 8005e8a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	225c      	movs	r2, #92	; 0x5c
 8005e90:	2100      	movs	r1, #0
 8005e92:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e010      	b.n	8005eba <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d18e      	bne.n	8005dd6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	0018      	movs	r0, r3
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	b00a      	add	sp, #40	; 0x28
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	46c0      	nop			; (mov r8, r8)
 8005ec4:	20000014 	.word	0x20000014
 8005ec8:	ffffdfff 	.word	0xffffdfff

08005ecc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af02      	add	r7, sp, #8
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	2382      	movs	r3, #130	; 0x82
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d113      	bne.n	8005f0c <SPI_EndRxTransaction+0x40>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	689a      	ldr	r2, [r3, #8]
 8005ee8:	2380      	movs	r3, #128	; 0x80
 8005eea:	021b      	lsls	r3, r3, #8
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d005      	beq.n	8005efc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	2380      	movs	r3, #128	; 0x80
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d107      	bne.n	8005f0c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2140      	movs	r1, #64	; 0x40
 8005f08:	438a      	bics	r2, r1
 8005f0a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	0013      	movs	r3, r2
 8005f16:	2200      	movs	r2, #0
 8005f18:	2180      	movs	r1, #128	; 0x80
 8005f1a:	f7ff fea7 	bl	8005c6c <SPI_WaitFlagStateUntilTimeout>
 8005f1e:	1e03      	subs	r3, r0, #0
 8005f20:	d007      	beq.n	8005f32 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f26:	2220      	movs	r2, #32
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e026      	b.n	8005f80 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	2382      	movs	r3, #130	; 0x82
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d11f      	bne.n	8005f7e <SPI_EndRxTransaction+0xb2>
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	689a      	ldr	r2, [r3, #8]
 8005f42:	2380      	movs	r3, #128	; 0x80
 8005f44:	021b      	lsls	r3, r3, #8
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d005      	beq.n	8005f56 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	2380      	movs	r3, #128	; 0x80
 8005f50:	00db      	lsls	r3, r3, #3
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d113      	bne.n	8005f7e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	23c0      	movs	r3, #192	; 0xc0
 8005f5a:	00d9      	lsls	r1, r3, #3
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	0013      	movs	r3, r2
 8005f64:	2200      	movs	r2, #0
 8005f66:	f7ff ff0f 	bl	8005d88 <SPI_WaitFifoStateUntilTimeout>
 8005f6a:	1e03      	subs	r3, r0, #0
 8005f6c:	d007      	beq.n	8005f7e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f72:	2220      	movs	r2, #32
 8005f74:	431a      	orrs	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e000      	b.n	8005f80 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	0018      	movs	r0, r3
 8005f82:	46bd      	mov	sp, r7
 8005f84:	b004      	add	sp, #16
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af02      	add	r7, sp, #8
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	23c0      	movs	r3, #192	; 0xc0
 8005f98:	0159      	lsls	r1, r3, #5
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	0013      	movs	r3, r2
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f7ff fef0 	bl	8005d88 <SPI_WaitFifoStateUntilTimeout>
 8005fa8:	1e03      	subs	r3, r0, #0
 8005faa:	d007      	beq.n	8005fbc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e027      	b.n	800600c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	0013      	movs	r3, r2
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	2180      	movs	r1, #128	; 0x80
 8005fca:	f7ff fe4f 	bl	8005c6c <SPI_WaitFlagStateUntilTimeout>
 8005fce:	1e03      	subs	r3, r0, #0
 8005fd0:	d007      	beq.n	8005fe2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	431a      	orrs	r2, r3
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e014      	b.n	800600c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	23c0      	movs	r3, #192	; 0xc0
 8005fe6:	00d9      	lsls	r1, r3, #3
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	0013      	movs	r3, r2
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f7ff fec9 	bl	8005d88 <SPI_WaitFifoStateUntilTimeout>
 8005ff6:	1e03      	subs	r3, r0, #0
 8005ff8:	d007      	beq.n	800600a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ffe:	2220      	movs	r2, #32
 8006000:	431a      	orrs	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e000      	b.n	800600c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	0018      	movs	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	b004      	add	sp, #16
 8006012:	bd80      	pop	{r7, pc}

08006014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e046      	b.n	80060b4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2288      	movs	r2, #136	; 0x88
 800602a:	589b      	ldr	r3, [r3, r2]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d107      	bne.n	8006040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2284      	movs	r2, #132	; 0x84
 8006034:	2100      	movs	r1, #0
 8006036:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	0018      	movs	r0, r3
 800603c:	f7fc fe5e 	bl	8002cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2288      	movs	r2, #136	; 0x88
 8006044:	2124      	movs	r1, #36	; 0x24
 8006046:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2101      	movs	r1, #1
 8006054:	438a      	bics	r2, r1
 8006056:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	0018      	movs	r0, r3
 800605c:	f000 f8cc 	bl	80061f8 <UART_SetConfig>
 8006060:	0003      	movs	r3, r0
 8006062:	2b01      	cmp	r3, #1
 8006064:	d101      	bne.n	800606a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e024      	b.n	80060b4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	0018      	movs	r0, r3
 8006076:	f000 fc15 	bl	80068a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	490d      	ldr	r1, [pc, #52]	; (80060bc <HAL_UART_Init+0xa8>)
 8006086:	400a      	ands	r2, r1
 8006088:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	212a      	movs	r1, #42	; 0x2a
 8006096:	438a      	bics	r2, r1
 8006098:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2101      	movs	r1, #1
 80060a6:	430a      	orrs	r2, r1
 80060a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	0018      	movs	r0, r3
 80060ae:	f000 fcad 	bl	8006a0c <UART_CheckIdleState>
 80060b2:	0003      	movs	r3, r0
}
 80060b4:	0018      	movs	r0, r3
 80060b6:	46bd      	mov	sp, r7
 80060b8:	b002      	add	sp, #8
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	ffffb7ff 	.word	0xffffb7ff

080060c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08a      	sub	sp, #40	; 0x28
 80060c4:	af02      	add	r7, sp, #8
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	603b      	str	r3, [r7, #0]
 80060cc:	1dbb      	adds	r3, r7, #6
 80060ce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2288      	movs	r2, #136	; 0x88
 80060d4:	589b      	ldr	r3, [r3, r2]
 80060d6:	2b20      	cmp	r3, #32
 80060d8:	d000      	beq.n	80060dc <HAL_UART_Transmit+0x1c>
 80060da:	e088      	b.n	80061ee <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_UART_Transmit+0x2a>
 80060e2:	1dbb      	adds	r3, r7, #6
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e080      	b.n	80061f0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689a      	ldr	r2, [r3, #8]
 80060f2:	2380      	movs	r3, #128	; 0x80
 80060f4:	015b      	lsls	r3, r3, #5
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d109      	bne.n	800610e <HAL_UART_Transmit+0x4e>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d105      	bne.n	800610e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2201      	movs	r2, #1
 8006106:	4013      	ands	r3, r2
 8006108:	d001      	beq.n	800610e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e070      	b.n	80061f0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2290      	movs	r2, #144	; 0x90
 8006112:	2100      	movs	r1, #0
 8006114:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2288      	movs	r2, #136	; 0x88
 800611a:	2121      	movs	r1, #33	; 0x21
 800611c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800611e:	f7fc ff77 	bl	8003010 <HAL_GetTick>
 8006122:	0003      	movs	r3, r0
 8006124:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	1dba      	adds	r2, r7, #6
 800612a:	2154      	movs	r1, #84	; 0x54
 800612c:	8812      	ldrh	r2, [r2, #0]
 800612e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	1dba      	adds	r2, r7, #6
 8006134:	2156      	movs	r1, #86	; 0x56
 8006136:	8812      	ldrh	r2, [r2, #0]
 8006138:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	2380      	movs	r3, #128	; 0x80
 8006140:	015b      	lsls	r3, r3, #5
 8006142:	429a      	cmp	r2, r3
 8006144:	d108      	bne.n	8006158 <HAL_UART_Transmit+0x98>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d104      	bne.n	8006158 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800614e:	2300      	movs	r3, #0
 8006150:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	61bb      	str	r3, [r7, #24]
 8006156:	e003      	b.n	8006160 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800615c:	2300      	movs	r3, #0
 800615e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006160:	e02c      	b.n	80061bc <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	68f8      	ldr	r0, [r7, #12]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	0013      	movs	r3, r2
 800616c:	2200      	movs	r2, #0
 800616e:	2180      	movs	r1, #128	; 0x80
 8006170:	f000 fc9a 	bl	8006aa8 <UART_WaitOnFlagUntilTimeout>
 8006174:	1e03      	subs	r3, r0, #0
 8006176:	d001      	beq.n	800617c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	e039      	b.n	80061f0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10b      	bne.n	800619a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	001a      	movs	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	05d2      	lsls	r2, r2, #23
 800618e:	0dd2      	lsrs	r2, r2, #23
 8006190:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	3302      	adds	r3, #2
 8006196:	61bb      	str	r3, [r7, #24]
 8006198:	e007      	b.n	80061aa <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	781a      	ldrb	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	3301      	adds	r3, #1
 80061a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2256      	movs	r2, #86	; 0x56
 80061ae:	5a9b      	ldrh	r3, [r3, r2]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b299      	uxth	r1, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2256      	movs	r2, #86	; 0x56
 80061ba:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2256      	movs	r2, #86	; 0x56
 80061c0:	5a9b      	ldrh	r3, [r3, r2]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1cc      	bne.n	8006162 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	0013      	movs	r3, r2
 80061d2:	2200      	movs	r2, #0
 80061d4:	2140      	movs	r1, #64	; 0x40
 80061d6:	f000 fc67 	bl	8006aa8 <UART_WaitOnFlagUntilTimeout>
 80061da:	1e03      	subs	r3, r0, #0
 80061dc:	d001      	beq.n	80061e2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e006      	b.n	80061f0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2288      	movs	r2, #136	; 0x88
 80061e6:	2120      	movs	r1, #32
 80061e8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	e000      	b.n	80061f0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80061ee:	2302      	movs	r3, #2
  }
}
 80061f0:	0018      	movs	r0, r3
 80061f2:	46bd      	mov	sp, r7
 80061f4:	b008      	add	sp, #32
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061f8:	b5b0      	push	{r4, r5, r7, lr}
 80061fa:	b090      	sub	sp, #64	; 0x40
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006200:	231a      	movs	r3, #26
 8006202:	2220      	movs	r2, #32
 8006204:	189b      	adds	r3, r3, r2
 8006206:	19db      	adds	r3, r3, r7
 8006208:	2200      	movs	r2, #0
 800620a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	431a      	orrs	r2, r3
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	431a      	orrs	r2, r3
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	69db      	ldr	r3, [r3, #28]
 8006220:	4313      	orrs	r3, r2
 8006222:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4ac1      	ldr	r2, [pc, #772]	; (8006530 <UART_SetConfig+0x338>)
 800622c:	4013      	ands	r3, r2
 800622e:	0019      	movs	r1, r3
 8006230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006236:	430b      	orrs	r3, r1
 8006238:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	4abc      	ldr	r2, [pc, #752]	; (8006534 <UART_SetConfig+0x33c>)
 8006242:	4013      	ands	r3, r2
 8006244:	0018      	movs	r0, r3
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	68d9      	ldr	r1, [r3, #12]
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	0003      	movs	r3, r0
 8006250:	430b      	orrs	r3, r1
 8006252:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800625a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4ab6      	ldr	r2, [pc, #728]	; (8006538 <UART_SetConfig+0x340>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d009      	beq.n	8006278 <UART_SetConfig+0x80>
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4ab4      	ldr	r2, [pc, #720]	; (800653c <UART_SetConfig+0x344>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d004      	beq.n	8006278 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006274:	4313      	orrs	r3, r2
 8006276:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	4ab0      	ldr	r2, [pc, #704]	; (8006540 <UART_SetConfig+0x348>)
 8006280:	4013      	ands	r3, r2
 8006282:	0019      	movs	r1, r3
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800628a:	430b      	orrs	r3, r1
 800628c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006294:	220f      	movs	r2, #15
 8006296:	4393      	bics	r3, r2
 8006298:	0018      	movs	r0, r3
 800629a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	0003      	movs	r3, r0
 80062a4:	430b      	orrs	r3, r1
 80062a6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4aa5      	ldr	r2, [pc, #660]	; (8006544 <UART_SetConfig+0x34c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d131      	bne.n	8006316 <UART_SetConfig+0x11e>
 80062b2:	4ba5      	ldr	r3, [pc, #660]	; (8006548 <UART_SetConfig+0x350>)
 80062b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b6:	2203      	movs	r2, #3
 80062b8:	4013      	ands	r3, r2
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d01d      	beq.n	80062fa <UART_SetConfig+0x102>
 80062be:	d823      	bhi.n	8006308 <UART_SetConfig+0x110>
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d00c      	beq.n	80062de <UART_SetConfig+0xe6>
 80062c4:	d820      	bhi.n	8006308 <UART_SetConfig+0x110>
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <UART_SetConfig+0xd8>
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d00e      	beq.n	80062ec <UART_SetConfig+0xf4>
 80062ce:	e01b      	b.n	8006308 <UART_SetConfig+0x110>
 80062d0:	231b      	movs	r3, #27
 80062d2:	2220      	movs	r2, #32
 80062d4:	189b      	adds	r3, r3, r2
 80062d6:	19db      	adds	r3, r3, r7
 80062d8:	2200      	movs	r2, #0
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	e154      	b.n	8006588 <UART_SetConfig+0x390>
 80062de:	231b      	movs	r3, #27
 80062e0:	2220      	movs	r2, #32
 80062e2:	189b      	adds	r3, r3, r2
 80062e4:	19db      	adds	r3, r3, r7
 80062e6:	2202      	movs	r2, #2
 80062e8:	701a      	strb	r2, [r3, #0]
 80062ea:	e14d      	b.n	8006588 <UART_SetConfig+0x390>
 80062ec:	231b      	movs	r3, #27
 80062ee:	2220      	movs	r2, #32
 80062f0:	189b      	adds	r3, r3, r2
 80062f2:	19db      	adds	r3, r3, r7
 80062f4:	2204      	movs	r2, #4
 80062f6:	701a      	strb	r2, [r3, #0]
 80062f8:	e146      	b.n	8006588 <UART_SetConfig+0x390>
 80062fa:	231b      	movs	r3, #27
 80062fc:	2220      	movs	r2, #32
 80062fe:	189b      	adds	r3, r3, r2
 8006300:	19db      	adds	r3, r3, r7
 8006302:	2208      	movs	r2, #8
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	e13f      	b.n	8006588 <UART_SetConfig+0x390>
 8006308:	231b      	movs	r3, #27
 800630a:	2220      	movs	r2, #32
 800630c:	189b      	adds	r3, r3, r2
 800630e:	19db      	adds	r3, r3, r7
 8006310:	2210      	movs	r2, #16
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	e138      	b.n	8006588 <UART_SetConfig+0x390>
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a8c      	ldr	r2, [pc, #560]	; (800654c <UART_SetConfig+0x354>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d131      	bne.n	8006384 <UART_SetConfig+0x18c>
 8006320:	4b89      	ldr	r3, [pc, #548]	; (8006548 <UART_SetConfig+0x350>)
 8006322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006324:	220c      	movs	r2, #12
 8006326:	4013      	ands	r3, r2
 8006328:	2b0c      	cmp	r3, #12
 800632a:	d01d      	beq.n	8006368 <UART_SetConfig+0x170>
 800632c:	d823      	bhi.n	8006376 <UART_SetConfig+0x17e>
 800632e:	2b08      	cmp	r3, #8
 8006330:	d00c      	beq.n	800634c <UART_SetConfig+0x154>
 8006332:	d820      	bhi.n	8006376 <UART_SetConfig+0x17e>
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <UART_SetConfig+0x146>
 8006338:	2b04      	cmp	r3, #4
 800633a:	d00e      	beq.n	800635a <UART_SetConfig+0x162>
 800633c:	e01b      	b.n	8006376 <UART_SetConfig+0x17e>
 800633e:	231b      	movs	r3, #27
 8006340:	2220      	movs	r2, #32
 8006342:	189b      	adds	r3, r3, r2
 8006344:	19db      	adds	r3, r3, r7
 8006346:	2200      	movs	r2, #0
 8006348:	701a      	strb	r2, [r3, #0]
 800634a:	e11d      	b.n	8006588 <UART_SetConfig+0x390>
 800634c:	231b      	movs	r3, #27
 800634e:	2220      	movs	r2, #32
 8006350:	189b      	adds	r3, r3, r2
 8006352:	19db      	adds	r3, r3, r7
 8006354:	2202      	movs	r2, #2
 8006356:	701a      	strb	r2, [r3, #0]
 8006358:	e116      	b.n	8006588 <UART_SetConfig+0x390>
 800635a:	231b      	movs	r3, #27
 800635c:	2220      	movs	r2, #32
 800635e:	189b      	adds	r3, r3, r2
 8006360:	19db      	adds	r3, r3, r7
 8006362:	2204      	movs	r2, #4
 8006364:	701a      	strb	r2, [r3, #0]
 8006366:	e10f      	b.n	8006588 <UART_SetConfig+0x390>
 8006368:	231b      	movs	r3, #27
 800636a:	2220      	movs	r2, #32
 800636c:	189b      	adds	r3, r3, r2
 800636e:	19db      	adds	r3, r3, r7
 8006370:	2208      	movs	r2, #8
 8006372:	701a      	strb	r2, [r3, #0]
 8006374:	e108      	b.n	8006588 <UART_SetConfig+0x390>
 8006376:	231b      	movs	r3, #27
 8006378:	2220      	movs	r2, #32
 800637a:	189b      	adds	r3, r3, r2
 800637c:	19db      	adds	r3, r3, r7
 800637e:	2210      	movs	r2, #16
 8006380:	701a      	strb	r2, [r3, #0]
 8006382:	e101      	b.n	8006588 <UART_SetConfig+0x390>
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a71      	ldr	r2, [pc, #452]	; (8006550 <UART_SetConfig+0x358>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d131      	bne.n	80063f2 <UART_SetConfig+0x1fa>
 800638e:	4b6e      	ldr	r3, [pc, #440]	; (8006548 <UART_SetConfig+0x350>)
 8006390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006392:	2230      	movs	r2, #48	; 0x30
 8006394:	4013      	ands	r3, r2
 8006396:	2b30      	cmp	r3, #48	; 0x30
 8006398:	d01d      	beq.n	80063d6 <UART_SetConfig+0x1de>
 800639a:	d823      	bhi.n	80063e4 <UART_SetConfig+0x1ec>
 800639c:	2b20      	cmp	r3, #32
 800639e:	d00c      	beq.n	80063ba <UART_SetConfig+0x1c2>
 80063a0:	d820      	bhi.n	80063e4 <UART_SetConfig+0x1ec>
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <UART_SetConfig+0x1b4>
 80063a6:	2b10      	cmp	r3, #16
 80063a8:	d00e      	beq.n	80063c8 <UART_SetConfig+0x1d0>
 80063aa:	e01b      	b.n	80063e4 <UART_SetConfig+0x1ec>
 80063ac:	231b      	movs	r3, #27
 80063ae:	2220      	movs	r2, #32
 80063b0:	189b      	adds	r3, r3, r2
 80063b2:	19db      	adds	r3, r3, r7
 80063b4:	2200      	movs	r2, #0
 80063b6:	701a      	strb	r2, [r3, #0]
 80063b8:	e0e6      	b.n	8006588 <UART_SetConfig+0x390>
 80063ba:	231b      	movs	r3, #27
 80063bc:	2220      	movs	r2, #32
 80063be:	189b      	adds	r3, r3, r2
 80063c0:	19db      	adds	r3, r3, r7
 80063c2:	2202      	movs	r2, #2
 80063c4:	701a      	strb	r2, [r3, #0]
 80063c6:	e0df      	b.n	8006588 <UART_SetConfig+0x390>
 80063c8:	231b      	movs	r3, #27
 80063ca:	2220      	movs	r2, #32
 80063cc:	189b      	adds	r3, r3, r2
 80063ce:	19db      	adds	r3, r3, r7
 80063d0:	2204      	movs	r2, #4
 80063d2:	701a      	strb	r2, [r3, #0]
 80063d4:	e0d8      	b.n	8006588 <UART_SetConfig+0x390>
 80063d6:	231b      	movs	r3, #27
 80063d8:	2220      	movs	r2, #32
 80063da:	189b      	adds	r3, r3, r2
 80063dc:	19db      	adds	r3, r3, r7
 80063de:	2208      	movs	r2, #8
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	e0d1      	b.n	8006588 <UART_SetConfig+0x390>
 80063e4:	231b      	movs	r3, #27
 80063e6:	2220      	movs	r2, #32
 80063e8:	189b      	adds	r3, r3, r2
 80063ea:	19db      	adds	r3, r3, r7
 80063ec:	2210      	movs	r2, #16
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	e0ca      	b.n	8006588 <UART_SetConfig+0x390>
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a57      	ldr	r2, [pc, #348]	; (8006554 <UART_SetConfig+0x35c>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d106      	bne.n	800640a <UART_SetConfig+0x212>
 80063fc:	231b      	movs	r3, #27
 80063fe:	2220      	movs	r2, #32
 8006400:	189b      	adds	r3, r3, r2
 8006402:	19db      	adds	r3, r3, r7
 8006404:	2200      	movs	r2, #0
 8006406:	701a      	strb	r2, [r3, #0]
 8006408:	e0be      	b.n	8006588 <UART_SetConfig+0x390>
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a52      	ldr	r2, [pc, #328]	; (8006558 <UART_SetConfig+0x360>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d106      	bne.n	8006422 <UART_SetConfig+0x22a>
 8006414:	231b      	movs	r3, #27
 8006416:	2220      	movs	r2, #32
 8006418:	189b      	adds	r3, r3, r2
 800641a:	19db      	adds	r3, r3, r7
 800641c:	2200      	movs	r2, #0
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	e0b2      	b.n	8006588 <UART_SetConfig+0x390>
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a4d      	ldr	r2, [pc, #308]	; (800655c <UART_SetConfig+0x364>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d106      	bne.n	800643a <UART_SetConfig+0x242>
 800642c:	231b      	movs	r3, #27
 800642e:	2220      	movs	r2, #32
 8006430:	189b      	adds	r3, r3, r2
 8006432:	19db      	adds	r3, r3, r7
 8006434:	2200      	movs	r2, #0
 8006436:	701a      	strb	r2, [r3, #0]
 8006438:	e0a6      	b.n	8006588 <UART_SetConfig+0x390>
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a3e      	ldr	r2, [pc, #248]	; (8006538 <UART_SetConfig+0x340>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d13e      	bne.n	80064c2 <UART_SetConfig+0x2ca>
 8006444:	4b40      	ldr	r3, [pc, #256]	; (8006548 <UART_SetConfig+0x350>)
 8006446:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006448:	23c0      	movs	r3, #192	; 0xc0
 800644a:	011b      	lsls	r3, r3, #4
 800644c:	4013      	ands	r3, r2
 800644e:	22c0      	movs	r2, #192	; 0xc0
 8006450:	0112      	lsls	r2, r2, #4
 8006452:	4293      	cmp	r3, r2
 8006454:	d027      	beq.n	80064a6 <UART_SetConfig+0x2ae>
 8006456:	22c0      	movs	r2, #192	; 0xc0
 8006458:	0112      	lsls	r2, r2, #4
 800645a:	4293      	cmp	r3, r2
 800645c:	d82a      	bhi.n	80064b4 <UART_SetConfig+0x2bc>
 800645e:	2280      	movs	r2, #128	; 0x80
 8006460:	0112      	lsls	r2, r2, #4
 8006462:	4293      	cmp	r3, r2
 8006464:	d011      	beq.n	800648a <UART_SetConfig+0x292>
 8006466:	2280      	movs	r2, #128	; 0x80
 8006468:	0112      	lsls	r2, r2, #4
 800646a:	4293      	cmp	r3, r2
 800646c:	d822      	bhi.n	80064b4 <UART_SetConfig+0x2bc>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d004      	beq.n	800647c <UART_SetConfig+0x284>
 8006472:	2280      	movs	r2, #128	; 0x80
 8006474:	00d2      	lsls	r2, r2, #3
 8006476:	4293      	cmp	r3, r2
 8006478:	d00e      	beq.n	8006498 <UART_SetConfig+0x2a0>
 800647a:	e01b      	b.n	80064b4 <UART_SetConfig+0x2bc>
 800647c:	231b      	movs	r3, #27
 800647e:	2220      	movs	r2, #32
 8006480:	189b      	adds	r3, r3, r2
 8006482:	19db      	adds	r3, r3, r7
 8006484:	2200      	movs	r2, #0
 8006486:	701a      	strb	r2, [r3, #0]
 8006488:	e07e      	b.n	8006588 <UART_SetConfig+0x390>
 800648a:	231b      	movs	r3, #27
 800648c:	2220      	movs	r2, #32
 800648e:	189b      	adds	r3, r3, r2
 8006490:	19db      	adds	r3, r3, r7
 8006492:	2202      	movs	r2, #2
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	e077      	b.n	8006588 <UART_SetConfig+0x390>
 8006498:	231b      	movs	r3, #27
 800649a:	2220      	movs	r2, #32
 800649c:	189b      	adds	r3, r3, r2
 800649e:	19db      	adds	r3, r3, r7
 80064a0:	2204      	movs	r2, #4
 80064a2:	701a      	strb	r2, [r3, #0]
 80064a4:	e070      	b.n	8006588 <UART_SetConfig+0x390>
 80064a6:	231b      	movs	r3, #27
 80064a8:	2220      	movs	r2, #32
 80064aa:	189b      	adds	r3, r3, r2
 80064ac:	19db      	adds	r3, r3, r7
 80064ae:	2208      	movs	r2, #8
 80064b0:	701a      	strb	r2, [r3, #0]
 80064b2:	e069      	b.n	8006588 <UART_SetConfig+0x390>
 80064b4:	231b      	movs	r3, #27
 80064b6:	2220      	movs	r2, #32
 80064b8:	189b      	adds	r3, r3, r2
 80064ba:	19db      	adds	r3, r3, r7
 80064bc:	2210      	movs	r2, #16
 80064be:	701a      	strb	r2, [r3, #0]
 80064c0:	e062      	b.n	8006588 <UART_SetConfig+0x390>
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1d      	ldr	r2, [pc, #116]	; (800653c <UART_SetConfig+0x344>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d157      	bne.n	800657c <UART_SetConfig+0x384>
 80064cc:	4b1e      	ldr	r3, [pc, #120]	; (8006548 <UART_SetConfig+0x350>)
 80064ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064d0:	23c0      	movs	r3, #192	; 0xc0
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4013      	ands	r3, r2
 80064d6:	22c0      	movs	r2, #192	; 0xc0
 80064d8:	0092      	lsls	r2, r2, #2
 80064da:	4293      	cmp	r3, r2
 80064dc:	d040      	beq.n	8006560 <UART_SetConfig+0x368>
 80064de:	22c0      	movs	r2, #192	; 0xc0
 80064e0:	0092      	lsls	r2, r2, #2
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d843      	bhi.n	800656e <UART_SetConfig+0x376>
 80064e6:	2280      	movs	r2, #128	; 0x80
 80064e8:	0092      	lsls	r2, r2, #2
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d011      	beq.n	8006512 <UART_SetConfig+0x31a>
 80064ee:	2280      	movs	r2, #128	; 0x80
 80064f0:	0092      	lsls	r2, r2, #2
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d83b      	bhi.n	800656e <UART_SetConfig+0x376>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d004      	beq.n	8006504 <UART_SetConfig+0x30c>
 80064fa:	2280      	movs	r2, #128	; 0x80
 80064fc:	0052      	lsls	r2, r2, #1
 80064fe:	4293      	cmp	r3, r2
 8006500:	d00e      	beq.n	8006520 <UART_SetConfig+0x328>
 8006502:	e034      	b.n	800656e <UART_SetConfig+0x376>
 8006504:	231b      	movs	r3, #27
 8006506:	2220      	movs	r2, #32
 8006508:	189b      	adds	r3, r3, r2
 800650a:	19db      	adds	r3, r3, r7
 800650c:	2200      	movs	r2, #0
 800650e:	701a      	strb	r2, [r3, #0]
 8006510:	e03a      	b.n	8006588 <UART_SetConfig+0x390>
 8006512:	231b      	movs	r3, #27
 8006514:	2220      	movs	r2, #32
 8006516:	189b      	adds	r3, r3, r2
 8006518:	19db      	adds	r3, r3, r7
 800651a:	2202      	movs	r2, #2
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	e033      	b.n	8006588 <UART_SetConfig+0x390>
 8006520:	231b      	movs	r3, #27
 8006522:	2220      	movs	r2, #32
 8006524:	189b      	adds	r3, r3, r2
 8006526:	19db      	adds	r3, r3, r7
 8006528:	2204      	movs	r2, #4
 800652a:	701a      	strb	r2, [r3, #0]
 800652c:	e02c      	b.n	8006588 <UART_SetConfig+0x390>
 800652e:	46c0      	nop			; (mov r8, r8)
 8006530:	cfff69f3 	.word	0xcfff69f3
 8006534:	ffffcfff 	.word	0xffffcfff
 8006538:	40008000 	.word	0x40008000
 800653c:	40008400 	.word	0x40008400
 8006540:	11fff4ff 	.word	0x11fff4ff
 8006544:	40013800 	.word	0x40013800
 8006548:	40021000 	.word	0x40021000
 800654c:	40004400 	.word	0x40004400
 8006550:	40004800 	.word	0x40004800
 8006554:	40004c00 	.word	0x40004c00
 8006558:	40005000 	.word	0x40005000
 800655c:	40013c00 	.word	0x40013c00
 8006560:	231b      	movs	r3, #27
 8006562:	2220      	movs	r2, #32
 8006564:	189b      	adds	r3, r3, r2
 8006566:	19db      	adds	r3, r3, r7
 8006568:	2208      	movs	r2, #8
 800656a:	701a      	strb	r2, [r3, #0]
 800656c:	e00c      	b.n	8006588 <UART_SetConfig+0x390>
 800656e:	231b      	movs	r3, #27
 8006570:	2220      	movs	r2, #32
 8006572:	189b      	adds	r3, r3, r2
 8006574:	19db      	adds	r3, r3, r7
 8006576:	2210      	movs	r2, #16
 8006578:	701a      	strb	r2, [r3, #0]
 800657a:	e005      	b.n	8006588 <UART_SetConfig+0x390>
 800657c:	231b      	movs	r3, #27
 800657e:	2220      	movs	r2, #32
 8006580:	189b      	adds	r3, r3, r2
 8006582:	19db      	adds	r3, r3, r7
 8006584:	2210      	movs	r2, #16
 8006586:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4ac1      	ldr	r2, [pc, #772]	; (8006894 <UART_SetConfig+0x69c>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d005      	beq.n	800659e <UART_SetConfig+0x3a6>
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4ac0      	ldr	r2, [pc, #768]	; (8006898 <UART_SetConfig+0x6a0>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d000      	beq.n	800659e <UART_SetConfig+0x3a6>
 800659c:	e093      	b.n	80066c6 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800659e:	231b      	movs	r3, #27
 80065a0:	2220      	movs	r2, #32
 80065a2:	189b      	adds	r3, r3, r2
 80065a4:	19db      	adds	r3, r3, r7
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	2b08      	cmp	r3, #8
 80065aa:	d015      	beq.n	80065d8 <UART_SetConfig+0x3e0>
 80065ac:	dc18      	bgt.n	80065e0 <UART_SetConfig+0x3e8>
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d00d      	beq.n	80065ce <UART_SetConfig+0x3d6>
 80065b2:	dc15      	bgt.n	80065e0 <UART_SetConfig+0x3e8>
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <UART_SetConfig+0x3c6>
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d005      	beq.n	80065c8 <UART_SetConfig+0x3d0>
 80065bc:	e010      	b.n	80065e0 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065be:	f7fe fbd5 	bl	8004d6c <HAL_RCC_GetPCLK1Freq>
 80065c2:	0003      	movs	r3, r0
 80065c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065c6:	e014      	b.n	80065f2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065c8:	4bb4      	ldr	r3, [pc, #720]	; (800689c <UART_SetConfig+0x6a4>)
 80065ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065cc:	e011      	b.n	80065f2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ce:	f7fe fb41 	bl	8004c54 <HAL_RCC_GetSysClockFreq>
 80065d2:	0003      	movs	r3, r0
 80065d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065d6:	e00c      	b.n	80065f2 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065d8:	2380      	movs	r3, #128	; 0x80
 80065da:	021b      	lsls	r3, r3, #8
 80065dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80065de:	e008      	b.n	80065f2 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 80065e0:	2300      	movs	r3, #0
 80065e2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80065e4:	231a      	movs	r3, #26
 80065e6:	2220      	movs	r2, #32
 80065e8:	189b      	adds	r3, r3, r2
 80065ea:	19db      	adds	r3, r3, r7
 80065ec:	2201      	movs	r2, #1
 80065ee:	701a      	strb	r2, [r3, #0]
        break;
 80065f0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d100      	bne.n	80065fa <UART_SetConfig+0x402>
 80065f8:	e135      	b.n	8006866 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065fe:	4ba8      	ldr	r3, [pc, #672]	; (80068a0 <UART_SetConfig+0x6a8>)
 8006600:	0052      	lsls	r2, r2, #1
 8006602:	5ad3      	ldrh	r3, [r2, r3]
 8006604:	0019      	movs	r1, r3
 8006606:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006608:	f7f9 fd8e 	bl	8000128 <__udivsi3>
 800660c:	0003      	movs	r3, r0
 800660e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	0013      	movs	r3, r2
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	189b      	adds	r3, r3, r2
 800661a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800661c:	429a      	cmp	r2, r3
 800661e:	d305      	bcc.n	800662c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006628:	429a      	cmp	r2, r3
 800662a:	d906      	bls.n	800663a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800662c:	231a      	movs	r3, #26
 800662e:	2220      	movs	r2, #32
 8006630:	189b      	adds	r3, r3, r2
 8006632:	19db      	adds	r3, r3, r7
 8006634:	2201      	movs	r2, #1
 8006636:	701a      	strb	r2, [r3, #0]
 8006638:	e044      	b.n	80066c4 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800663a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663c:	61bb      	str	r3, [r7, #24]
 800663e:	2300      	movs	r3, #0
 8006640:	61fb      	str	r3, [r7, #28]
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006646:	4b96      	ldr	r3, [pc, #600]	; (80068a0 <UART_SetConfig+0x6a8>)
 8006648:	0052      	lsls	r2, r2, #1
 800664a:	5ad3      	ldrh	r3, [r2, r3]
 800664c:	613b      	str	r3, [r7, #16]
 800664e:	2300      	movs	r3, #0
 8006650:	617b      	str	r3, [r7, #20]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	69b8      	ldr	r0, [r7, #24]
 8006658:	69f9      	ldr	r1, [r7, #28]
 800665a:	f7f9 fedb 	bl	8000414 <__aeabi_uldivmod>
 800665e:	0002      	movs	r2, r0
 8006660:	000b      	movs	r3, r1
 8006662:	0e11      	lsrs	r1, r2, #24
 8006664:	021d      	lsls	r5, r3, #8
 8006666:	430d      	orrs	r5, r1
 8006668:	0214      	lsls	r4, r2, #8
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	085b      	lsrs	r3, r3, #1
 8006670:	60bb      	str	r3, [r7, #8]
 8006672:	2300      	movs	r3, #0
 8006674:	60fb      	str	r3, [r7, #12]
 8006676:	68b8      	ldr	r0, [r7, #8]
 8006678:	68f9      	ldr	r1, [r7, #12]
 800667a:	1900      	adds	r0, r0, r4
 800667c:	4169      	adcs	r1, r5
 800667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	603b      	str	r3, [r7, #0]
 8006684:	2300      	movs	r3, #0
 8006686:	607b      	str	r3, [r7, #4]
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f7f9 fec2 	bl	8000414 <__aeabi_uldivmod>
 8006690:	0002      	movs	r2, r0
 8006692:	000b      	movs	r3, r1
 8006694:	0013      	movs	r3, r2
 8006696:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800669a:	23c0      	movs	r3, #192	; 0xc0
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	429a      	cmp	r2, r3
 80066a0:	d309      	bcc.n	80066b6 <UART_SetConfig+0x4be>
 80066a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066a4:	2380      	movs	r3, #128	; 0x80
 80066a6:	035b      	lsls	r3, r3, #13
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d204      	bcs.n	80066b6 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066b2:	60da      	str	r2, [r3, #12]
 80066b4:	e006      	b.n	80066c4 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 80066b6:	231a      	movs	r3, #26
 80066b8:	2220      	movs	r2, #32
 80066ba:	189b      	adds	r3, r3, r2
 80066bc:	19db      	adds	r3, r3, r7
 80066be:	2201      	movs	r2, #1
 80066c0:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 80066c2:	e0d0      	b.n	8006866 <UART_SetConfig+0x66e>
 80066c4:	e0cf      	b.n	8006866 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c8:	69da      	ldr	r2, [r3, #28]
 80066ca:	2380      	movs	r3, #128	; 0x80
 80066cc:	021b      	lsls	r3, r3, #8
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d000      	beq.n	80066d4 <UART_SetConfig+0x4dc>
 80066d2:	e070      	b.n	80067b6 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 80066d4:	231b      	movs	r3, #27
 80066d6:	2220      	movs	r2, #32
 80066d8:	189b      	adds	r3, r3, r2
 80066da:	19db      	adds	r3, r3, r7
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	2b08      	cmp	r3, #8
 80066e0:	d015      	beq.n	800670e <UART_SetConfig+0x516>
 80066e2:	dc18      	bgt.n	8006716 <UART_SetConfig+0x51e>
 80066e4:	2b04      	cmp	r3, #4
 80066e6:	d00d      	beq.n	8006704 <UART_SetConfig+0x50c>
 80066e8:	dc15      	bgt.n	8006716 <UART_SetConfig+0x51e>
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <UART_SetConfig+0x4fc>
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d005      	beq.n	80066fe <UART_SetConfig+0x506>
 80066f2:	e010      	b.n	8006716 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066f4:	f7fe fb3a 	bl	8004d6c <HAL_RCC_GetPCLK1Freq>
 80066f8:	0003      	movs	r3, r0
 80066fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066fc:	e014      	b.n	8006728 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066fe:	4b67      	ldr	r3, [pc, #412]	; (800689c <UART_SetConfig+0x6a4>)
 8006700:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006702:	e011      	b.n	8006728 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006704:	f7fe faa6 	bl	8004c54 <HAL_RCC_GetSysClockFreq>
 8006708:	0003      	movs	r3, r0
 800670a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800670c:	e00c      	b.n	8006728 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800670e:	2380      	movs	r3, #128	; 0x80
 8006710:	021b      	lsls	r3, r3, #8
 8006712:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006714:	e008      	b.n	8006728 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8006716:	2300      	movs	r3, #0
 8006718:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800671a:	231a      	movs	r3, #26
 800671c:	2220      	movs	r2, #32
 800671e:	189b      	adds	r3, r3, r2
 8006720:	19db      	adds	r3, r3, r7
 8006722:	2201      	movs	r2, #1
 8006724:	701a      	strb	r2, [r3, #0]
        break;
 8006726:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800672a:	2b00      	cmp	r3, #0
 800672c:	d100      	bne.n	8006730 <UART_SetConfig+0x538>
 800672e:	e09a      	b.n	8006866 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006734:	4b5a      	ldr	r3, [pc, #360]	; (80068a0 <UART_SetConfig+0x6a8>)
 8006736:	0052      	lsls	r2, r2, #1
 8006738:	5ad3      	ldrh	r3, [r2, r3]
 800673a:	0019      	movs	r1, r3
 800673c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800673e:	f7f9 fcf3 	bl	8000128 <__udivsi3>
 8006742:	0003      	movs	r3, r0
 8006744:	005a      	lsls	r2, r3, #1
 8006746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	085b      	lsrs	r3, r3, #1
 800674c:	18d2      	adds	r2, r2, r3
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	0019      	movs	r1, r3
 8006754:	0010      	movs	r0, r2
 8006756:	f7f9 fce7 	bl	8000128 <__udivsi3>
 800675a:	0003      	movs	r3, r0
 800675c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800675e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006760:	2b0f      	cmp	r3, #15
 8006762:	d921      	bls.n	80067a8 <UART_SetConfig+0x5b0>
 8006764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006766:	2380      	movs	r3, #128	; 0x80
 8006768:	025b      	lsls	r3, r3, #9
 800676a:	429a      	cmp	r2, r3
 800676c:	d21c      	bcs.n	80067a8 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	b29a      	uxth	r2, r3
 8006772:	200e      	movs	r0, #14
 8006774:	2420      	movs	r4, #32
 8006776:	1903      	adds	r3, r0, r4
 8006778:	19db      	adds	r3, r3, r7
 800677a:	210f      	movs	r1, #15
 800677c:	438a      	bics	r2, r1
 800677e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006782:	085b      	lsrs	r3, r3, #1
 8006784:	b29b      	uxth	r3, r3
 8006786:	2207      	movs	r2, #7
 8006788:	4013      	ands	r3, r2
 800678a:	b299      	uxth	r1, r3
 800678c:	1903      	adds	r3, r0, r4
 800678e:	19db      	adds	r3, r3, r7
 8006790:	1902      	adds	r2, r0, r4
 8006792:	19d2      	adds	r2, r2, r7
 8006794:	8812      	ldrh	r2, [r2, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800679a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	1902      	adds	r2, r0, r4
 80067a0:	19d2      	adds	r2, r2, r7
 80067a2:	8812      	ldrh	r2, [r2, #0]
 80067a4:	60da      	str	r2, [r3, #12]
 80067a6:	e05e      	b.n	8006866 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80067a8:	231a      	movs	r3, #26
 80067aa:	2220      	movs	r2, #32
 80067ac:	189b      	adds	r3, r3, r2
 80067ae:	19db      	adds	r3, r3, r7
 80067b0:	2201      	movs	r2, #1
 80067b2:	701a      	strb	r2, [r3, #0]
 80067b4:	e057      	b.n	8006866 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067b6:	231b      	movs	r3, #27
 80067b8:	2220      	movs	r2, #32
 80067ba:	189b      	adds	r3, r3, r2
 80067bc:	19db      	adds	r3, r3, r7
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	d015      	beq.n	80067f0 <UART_SetConfig+0x5f8>
 80067c4:	dc18      	bgt.n	80067f8 <UART_SetConfig+0x600>
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d00d      	beq.n	80067e6 <UART_SetConfig+0x5ee>
 80067ca:	dc15      	bgt.n	80067f8 <UART_SetConfig+0x600>
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <UART_SetConfig+0x5de>
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d005      	beq.n	80067e0 <UART_SetConfig+0x5e8>
 80067d4:	e010      	b.n	80067f8 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067d6:	f7fe fac9 	bl	8004d6c <HAL_RCC_GetPCLK1Freq>
 80067da:	0003      	movs	r3, r0
 80067dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067de:	e014      	b.n	800680a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067e0:	4b2e      	ldr	r3, [pc, #184]	; (800689c <UART_SetConfig+0x6a4>)
 80067e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067e4:	e011      	b.n	800680a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067e6:	f7fe fa35 	bl	8004c54 <HAL_RCC_GetSysClockFreq>
 80067ea:	0003      	movs	r3, r0
 80067ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067ee:	e00c      	b.n	800680a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067f0:	2380      	movs	r3, #128	; 0x80
 80067f2:	021b      	lsls	r3, r3, #8
 80067f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067f6:	e008      	b.n	800680a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80067fc:	231a      	movs	r3, #26
 80067fe:	2220      	movs	r2, #32
 8006800:	189b      	adds	r3, r3, r2
 8006802:	19db      	adds	r3, r3, r7
 8006804:	2201      	movs	r2, #1
 8006806:	701a      	strb	r2, [r3, #0]
        break;
 8006808:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800680a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680c:	2b00      	cmp	r3, #0
 800680e:	d02a      	beq.n	8006866 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006814:	4b22      	ldr	r3, [pc, #136]	; (80068a0 <UART_SetConfig+0x6a8>)
 8006816:	0052      	lsls	r2, r2, #1
 8006818:	5ad3      	ldrh	r3, [r2, r3]
 800681a:	0019      	movs	r1, r3
 800681c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800681e:	f7f9 fc83 	bl	8000128 <__udivsi3>
 8006822:	0003      	movs	r3, r0
 8006824:	001a      	movs	r2, r3
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	085b      	lsrs	r3, r3, #1
 800682c:	18d2      	adds	r2, r2, r3
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	0019      	movs	r1, r3
 8006834:	0010      	movs	r0, r2
 8006836:	f7f9 fc77 	bl	8000128 <__udivsi3>
 800683a:	0003      	movs	r3, r0
 800683c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	2b0f      	cmp	r3, #15
 8006842:	d90a      	bls.n	800685a <UART_SetConfig+0x662>
 8006844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006846:	2380      	movs	r3, #128	; 0x80
 8006848:	025b      	lsls	r3, r3, #9
 800684a:	429a      	cmp	r2, r3
 800684c:	d205      	bcs.n	800685a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006850:	b29a      	uxth	r2, r3
 8006852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	60da      	str	r2, [r3, #12]
 8006858:	e005      	b.n	8006866 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 800685a:	231a      	movs	r3, #26
 800685c:	2220      	movs	r2, #32
 800685e:	189b      	adds	r3, r3, r2
 8006860:	19db      	adds	r3, r3, r7
 8006862:	2201      	movs	r2, #1
 8006864:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	226a      	movs	r2, #106	; 0x6a
 800686a:	2101      	movs	r1, #1
 800686c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	2268      	movs	r2, #104	; 0x68
 8006872:	2101      	movs	r1, #1
 8006874:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	2200      	movs	r2, #0
 800687a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	2200      	movs	r2, #0
 8006880:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006882:	231a      	movs	r3, #26
 8006884:	2220      	movs	r2, #32
 8006886:	189b      	adds	r3, r3, r2
 8006888:	19db      	adds	r3, r3, r7
 800688a:	781b      	ldrb	r3, [r3, #0]
}
 800688c:	0018      	movs	r0, r3
 800688e:	46bd      	mov	sp, r7
 8006890:	b010      	add	sp, #64	; 0x40
 8006892:	bdb0      	pop	{r4, r5, r7, pc}
 8006894:	40008000 	.word	0x40008000
 8006898:	40008400 	.word	0x40008400
 800689c:	00f42400 	.word	0x00f42400
 80068a0:	08007b2c 	.word	0x08007b2c

080068a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b0:	2201      	movs	r2, #1
 80068b2:	4013      	ands	r3, r2
 80068b4:	d00b      	beq.n	80068ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	4a4a      	ldr	r2, [pc, #296]	; (80069e8 <UART_AdvFeatureConfig+0x144>)
 80068be:	4013      	ands	r3, r2
 80068c0:	0019      	movs	r1, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	430a      	orrs	r2, r1
 80068cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d2:	2202      	movs	r2, #2
 80068d4:	4013      	ands	r3, r2
 80068d6:	d00b      	beq.n	80068f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	4a43      	ldr	r2, [pc, #268]	; (80069ec <UART_AdvFeatureConfig+0x148>)
 80068e0:	4013      	ands	r3, r2
 80068e2:	0019      	movs	r1, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	430a      	orrs	r2, r1
 80068ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f4:	2204      	movs	r2, #4
 80068f6:	4013      	ands	r3, r2
 80068f8:	d00b      	beq.n	8006912 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	4a3b      	ldr	r2, [pc, #236]	; (80069f0 <UART_AdvFeatureConfig+0x14c>)
 8006902:	4013      	ands	r3, r2
 8006904:	0019      	movs	r1, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006916:	2208      	movs	r2, #8
 8006918:	4013      	ands	r3, r2
 800691a:	d00b      	beq.n	8006934 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	4a34      	ldr	r2, [pc, #208]	; (80069f4 <UART_AdvFeatureConfig+0x150>)
 8006924:	4013      	ands	r3, r2
 8006926:	0019      	movs	r1, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	430a      	orrs	r2, r1
 8006932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006938:	2210      	movs	r2, #16
 800693a:	4013      	ands	r3, r2
 800693c:	d00b      	beq.n	8006956 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	4a2c      	ldr	r2, [pc, #176]	; (80069f8 <UART_AdvFeatureConfig+0x154>)
 8006946:	4013      	ands	r3, r2
 8006948:	0019      	movs	r1, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695a:	2220      	movs	r2, #32
 800695c:	4013      	ands	r3, r2
 800695e:	d00b      	beq.n	8006978 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	4a25      	ldr	r2, [pc, #148]	; (80069fc <UART_AdvFeatureConfig+0x158>)
 8006968:	4013      	ands	r3, r2
 800696a:	0019      	movs	r1, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697c:	2240      	movs	r2, #64	; 0x40
 800697e:	4013      	ands	r3, r2
 8006980:	d01d      	beq.n	80069be <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	4a1d      	ldr	r2, [pc, #116]	; (8006a00 <UART_AdvFeatureConfig+0x15c>)
 800698a:	4013      	ands	r3, r2
 800698c:	0019      	movs	r1, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800699e:	2380      	movs	r3, #128	; 0x80
 80069a0:	035b      	lsls	r3, r3, #13
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d10b      	bne.n	80069be <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	4a15      	ldr	r2, [pc, #84]	; (8006a04 <UART_AdvFeatureConfig+0x160>)
 80069ae:	4013      	ands	r3, r2
 80069b0:	0019      	movs	r1, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c2:	2280      	movs	r2, #128	; 0x80
 80069c4:	4013      	ands	r3, r2
 80069c6:	d00b      	beq.n	80069e0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	4a0e      	ldr	r2, [pc, #56]	; (8006a08 <UART_AdvFeatureConfig+0x164>)
 80069d0:	4013      	ands	r3, r2
 80069d2:	0019      	movs	r1, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	430a      	orrs	r2, r1
 80069de:	605a      	str	r2, [r3, #4]
  }
}
 80069e0:	46c0      	nop			; (mov r8, r8)
 80069e2:	46bd      	mov	sp, r7
 80069e4:	b002      	add	sp, #8
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	fffdffff 	.word	0xfffdffff
 80069ec:	fffeffff 	.word	0xfffeffff
 80069f0:	fffbffff 	.word	0xfffbffff
 80069f4:	ffff7fff 	.word	0xffff7fff
 80069f8:	ffffefff 	.word	0xffffefff
 80069fc:	ffffdfff 	.word	0xffffdfff
 8006a00:	ffefffff 	.word	0xffefffff
 8006a04:	ff9fffff 	.word	0xff9fffff
 8006a08:	fff7ffff 	.word	0xfff7ffff

08006a0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af02      	add	r7, sp, #8
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2290      	movs	r2, #144	; 0x90
 8006a18:	2100      	movs	r1, #0
 8006a1a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a1c:	f7fc faf8 	bl	8003010 <HAL_GetTick>
 8006a20:	0003      	movs	r3, r0
 8006a22:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2208      	movs	r2, #8
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	2b08      	cmp	r3, #8
 8006a30:	d10c      	bne.n	8006a4c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2280      	movs	r2, #128	; 0x80
 8006a36:	0391      	lsls	r1, r2, #14
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	4a1a      	ldr	r2, [pc, #104]	; (8006aa4 <UART_CheckIdleState+0x98>)
 8006a3c:	9200      	str	r2, [sp, #0]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f000 f832 	bl	8006aa8 <UART_WaitOnFlagUntilTimeout>
 8006a44:	1e03      	subs	r3, r0, #0
 8006a46:	d001      	beq.n	8006a4c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e026      	b.n	8006a9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2204      	movs	r2, #4
 8006a54:	4013      	ands	r3, r2
 8006a56:	2b04      	cmp	r3, #4
 8006a58:	d10c      	bne.n	8006a74 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2280      	movs	r2, #128	; 0x80
 8006a5e:	03d1      	lsls	r1, r2, #15
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	4a10      	ldr	r2, [pc, #64]	; (8006aa4 <UART_CheckIdleState+0x98>)
 8006a64:	9200      	str	r2, [sp, #0]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f000 f81e 	bl	8006aa8 <UART_WaitOnFlagUntilTimeout>
 8006a6c:	1e03      	subs	r3, r0, #0
 8006a6e:	d001      	beq.n	8006a74 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e012      	b.n	8006a9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2288      	movs	r2, #136	; 0x88
 8006a78:	2120      	movs	r1, #32
 8006a7a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	228c      	movs	r2, #140	; 0x8c
 8006a80:	2120      	movs	r1, #32
 8006a82:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2284      	movs	r2, #132	; 0x84
 8006a94:	2100      	movs	r1, #0
 8006a96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	0018      	movs	r0, r3
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	b004      	add	sp, #16
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	46c0      	nop			; (mov r8, r8)
 8006aa4:	01ffffff 	.word	0x01ffffff

08006aa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b094      	sub	sp, #80	; 0x50
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	603b      	str	r3, [r7, #0]
 8006ab4:	1dfb      	adds	r3, r7, #7
 8006ab6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab8:	e0a7      	b.n	8006c0a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006aba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006abc:	3301      	adds	r3, #1
 8006abe:	d100      	bne.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006ac0:	e0a3      	b.n	8006c0a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ac2:	f7fc faa5 	bl	8003010 <HAL_GetTick>
 8006ac6:	0002      	movs	r2, r0
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d302      	bcc.n	8006ad8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ad2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d13f      	bne.n	8006b58 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8006adc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ae0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae8:	f383 8810 	msr	PRIMASK, r3
}
 8006aec:	46c0      	nop			; (mov r8, r8)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	494e      	ldr	r1, [pc, #312]	; (8006c34 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006afa:	400a      	ands	r2, r1
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b00:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	f383 8810 	msr	PRIMASK, r3
}
 8006b08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b0e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b12:	643b      	str	r3, [r7, #64]	; 0x40
 8006b14:	2301      	movs	r3, #1
 8006b16:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1a:	f383 8810 	msr	PRIMASK, r3
}
 8006b1e:	46c0      	nop			; (mov r8, r8)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2101      	movs	r1, #1
 8006b2c:	438a      	bics	r2, r1
 8006b2e:	609a      	str	r2, [r3, #8]
 8006b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b36:	f383 8810 	msr	PRIMASK, r3
}
 8006b3a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2288      	movs	r2, #136	; 0x88
 8006b40:	2120      	movs	r1, #32
 8006b42:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	228c      	movs	r2, #140	; 0x8c
 8006b48:	2120      	movs	r1, #32
 8006b4a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2284      	movs	r2, #132	; 0x84
 8006b50:	2100      	movs	r1, #0
 8006b52:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e069      	b.n	8006c2c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2204      	movs	r2, #4
 8006b60:	4013      	ands	r3, r2
 8006b62:	d052      	beq.n	8006c0a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	69da      	ldr	r2, [r3, #28]
 8006b6a:	2380      	movs	r3, #128	; 0x80
 8006b6c:	011b      	lsls	r3, r3, #4
 8006b6e:	401a      	ands	r2, r3
 8006b70:	2380      	movs	r3, #128	; 0x80
 8006b72:	011b      	lsls	r3, r3, #4
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d148      	bne.n	8006c0a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2280      	movs	r2, #128	; 0x80
 8006b7e:	0112      	lsls	r2, r2, #4
 8006b80:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b82:	f3ef 8310 	mrs	r3, PRIMASK
 8006b86:	613b      	str	r3, [r7, #16]
  return(result);
 8006b88:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f383 8810 	msr	PRIMASK, r3
}
 8006b96:	46c0      	nop			; (mov r8, r8)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4924      	ldr	r1, [pc, #144]	; (8006c34 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006ba4:	400a      	ands	r2, r1
 8006ba6:	601a      	str	r2, [r3, #0]
 8006ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006baa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	f383 8810 	msr	PRIMASK, r3
}
 8006bb2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8006bb8:	61fb      	str	r3, [r7, #28]
  return(result);
 8006bba:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	f383 8810 	msr	PRIMASK, r3
}
 8006bc8:	46c0      	nop			; (mov r8, r8)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	689a      	ldr	r2, [r3, #8]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	438a      	bics	r2, r1
 8006bd8:	609a      	str	r2, [r3, #8]
 8006bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bdc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	f383 8810 	msr	PRIMASK, r3
}
 8006be4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2288      	movs	r2, #136	; 0x88
 8006bea:	2120      	movs	r1, #32
 8006bec:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	228c      	movs	r2, #140	; 0x8c
 8006bf2:	2120      	movs	r1, #32
 8006bf4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2290      	movs	r2, #144	; 0x90
 8006bfa:	2120      	movs	r1, #32
 8006bfc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2284      	movs	r2, #132	; 0x84
 8006c02:	2100      	movs	r1, #0
 8006c04:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e010      	b.n	8006c2c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	4013      	ands	r3, r2
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	425a      	negs	r2, r3
 8006c1a:	4153      	adcs	r3, r2
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	001a      	movs	r2, r3
 8006c20:	1dfb      	adds	r3, r7, #7
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d100      	bne.n	8006c2a <UART_WaitOnFlagUntilTimeout+0x182>
 8006c28:	e747      	b.n	8006aba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	b014      	add	sp, #80	; 0x50
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	fffffe5f 	.word	0xfffffe5f

08006c38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2284      	movs	r2, #132	; 0x84
 8006c44:	5c9b      	ldrb	r3, [r3, r2]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d101      	bne.n	8006c4e <HAL_UARTEx_DisableFifoMode+0x16>
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	e027      	b.n	8006c9e <HAL_UARTEx_DisableFifoMode+0x66>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2284      	movs	r2, #132	; 0x84
 8006c52:	2101      	movs	r1, #1
 8006c54:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2288      	movs	r2, #136	; 0x88
 8006c5a:	2124      	movs	r1, #36	; 0x24
 8006c5c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2101      	movs	r1, #1
 8006c72:	438a      	bics	r2, r1
 8006c74:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4a0b      	ldr	r2, [pc, #44]	; (8006ca8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68fa      	ldr	r2, [r7, #12]
 8006c8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2288      	movs	r2, #136	; 0x88
 8006c90:	2120      	movs	r1, #32
 8006c92:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2284      	movs	r2, #132	; 0x84
 8006c98:	2100      	movs	r1, #0
 8006c9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	0018      	movs	r0, r3
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	b004      	add	sp, #16
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	46c0      	nop			; (mov r8, r8)
 8006ca8:	dfffffff 	.word	0xdfffffff

08006cac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2284      	movs	r2, #132	; 0x84
 8006cba:	5c9b      	ldrb	r3, [r3, r2]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d101      	bne.n	8006cc4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	e02e      	b.n	8006d22 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2284      	movs	r2, #132	; 0x84
 8006cc8:	2101      	movs	r1, #1
 8006cca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2288      	movs	r2, #136	; 0x88
 8006cd0:	2124      	movs	r1, #36	; 0x24
 8006cd2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	438a      	bics	r2, r1
 8006cea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	08d9      	lsrs	r1, r3, #3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	0018      	movs	r0, r3
 8006d04:	f000 f854 	bl	8006db0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2288      	movs	r2, #136	; 0x88
 8006d14:	2120      	movs	r1, #32
 8006d16:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2284      	movs	r2, #132	; 0x84
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	0018      	movs	r0, r3
 8006d24:	46bd      	mov	sp, r7
 8006d26:	b004      	add	sp, #16
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2284      	movs	r2, #132	; 0x84
 8006d3a:	5c9b      	ldrb	r3, [r3, r2]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d101      	bne.n	8006d44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d40:	2302      	movs	r3, #2
 8006d42:	e02f      	b.n	8006da4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2284      	movs	r2, #132	; 0x84
 8006d48:	2101      	movs	r1, #1
 8006d4a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2288      	movs	r2, #136	; 0x88
 8006d50:	2124      	movs	r1, #36	; 0x24
 8006d52:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2101      	movs	r1, #1
 8006d68:	438a      	bics	r2, r1
 8006d6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	4a0e      	ldr	r2, [pc, #56]	; (8006dac <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006d74:	4013      	ands	r3, r2
 8006d76:	0019      	movs	r1, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	0018      	movs	r0, r3
 8006d86:	f000 f813 	bl	8006db0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2288      	movs	r2, #136	; 0x88
 8006d96:	2120      	movs	r1, #32
 8006d98:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2284      	movs	r2, #132	; 0x84
 8006d9e:	2100      	movs	r1, #0
 8006da0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	0018      	movs	r0, r3
 8006da6:	46bd      	mov	sp, r7
 8006da8:	b004      	add	sp, #16
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	f1ffffff 	.word	0xf1ffffff

08006db0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d108      	bne.n	8006dd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	226a      	movs	r2, #106	; 0x6a
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2268      	movs	r2, #104	; 0x68
 8006dcc:	2101      	movs	r1, #1
 8006dce:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006dd0:	e043      	b.n	8006e5a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006dd2:	260f      	movs	r6, #15
 8006dd4:	19bb      	adds	r3, r7, r6
 8006dd6:	2208      	movs	r2, #8
 8006dd8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006dda:	200e      	movs	r0, #14
 8006ddc:	183b      	adds	r3, r7, r0
 8006dde:	2208      	movs	r2, #8
 8006de0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	0e5b      	lsrs	r3, r3, #25
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	240d      	movs	r4, #13
 8006dee:	193b      	adds	r3, r7, r4
 8006df0:	2107      	movs	r1, #7
 8006df2:	400a      	ands	r2, r1
 8006df4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	0f5b      	lsrs	r3, r3, #29
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	250c      	movs	r5, #12
 8006e02:	197b      	adds	r3, r7, r5
 8006e04:	2107      	movs	r1, #7
 8006e06:	400a      	ands	r2, r1
 8006e08:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e0a:	183b      	adds	r3, r7, r0
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	197a      	adds	r2, r7, r5
 8006e10:	7812      	ldrb	r2, [r2, #0]
 8006e12:	4914      	ldr	r1, [pc, #80]	; (8006e64 <UARTEx_SetNbDataToProcess+0xb4>)
 8006e14:	5c8a      	ldrb	r2, [r1, r2]
 8006e16:	435a      	muls	r2, r3
 8006e18:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e1a:	197b      	adds	r3, r7, r5
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	4a12      	ldr	r2, [pc, #72]	; (8006e68 <UARTEx_SetNbDataToProcess+0xb8>)
 8006e20:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e22:	0019      	movs	r1, r3
 8006e24:	f7f9 fa0a 	bl	800023c <__divsi3>
 8006e28:	0003      	movs	r3, r0
 8006e2a:	b299      	uxth	r1, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	226a      	movs	r2, #106	; 0x6a
 8006e30:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e32:	19bb      	adds	r3, r7, r6
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	193a      	adds	r2, r7, r4
 8006e38:	7812      	ldrb	r2, [r2, #0]
 8006e3a:	490a      	ldr	r1, [pc, #40]	; (8006e64 <UARTEx_SetNbDataToProcess+0xb4>)
 8006e3c:	5c8a      	ldrb	r2, [r1, r2]
 8006e3e:	435a      	muls	r2, r3
 8006e40:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e42:	193b      	adds	r3, r7, r4
 8006e44:	781b      	ldrb	r3, [r3, #0]
 8006e46:	4a08      	ldr	r2, [pc, #32]	; (8006e68 <UARTEx_SetNbDataToProcess+0xb8>)
 8006e48:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e4a:	0019      	movs	r1, r3
 8006e4c:	f7f9 f9f6 	bl	800023c <__divsi3>
 8006e50:	0003      	movs	r3, r0
 8006e52:	b299      	uxth	r1, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2268      	movs	r2, #104	; 0x68
 8006e58:	5299      	strh	r1, [r3, r2]
}
 8006e5a:	46c0      	nop			; (mov r8, r8)
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	b005      	add	sp, #20
 8006e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e62:	46c0      	nop			; (mov r8, r8)
 8006e64:	08007b44 	.word	0x08007b44
 8006e68:	08007b4c 	.word	0x08007b4c

08006e6c <__errno>:
 8006e6c:	4b01      	ldr	r3, [pc, #4]	; (8006e74 <__errno+0x8>)
 8006e6e:	6818      	ldr	r0, [r3, #0]
 8006e70:	4770      	bx	lr
 8006e72:	46c0      	nop			; (mov r8, r8)
 8006e74:	20000020 	.word	0x20000020

08006e78 <__libc_init_array>:
 8006e78:	b570      	push	{r4, r5, r6, lr}
 8006e7a:	2600      	movs	r6, #0
 8006e7c:	4d0c      	ldr	r5, [pc, #48]	; (8006eb0 <__libc_init_array+0x38>)
 8006e7e:	4c0d      	ldr	r4, [pc, #52]	; (8006eb4 <__libc_init_array+0x3c>)
 8006e80:	1b64      	subs	r4, r4, r5
 8006e82:	10a4      	asrs	r4, r4, #2
 8006e84:	42a6      	cmp	r6, r4
 8006e86:	d109      	bne.n	8006e9c <__libc_init_array+0x24>
 8006e88:	2600      	movs	r6, #0
 8006e8a:	f000 fca3 	bl	80077d4 <_init>
 8006e8e:	4d0a      	ldr	r5, [pc, #40]	; (8006eb8 <__libc_init_array+0x40>)
 8006e90:	4c0a      	ldr	r4, [pc, #40]	; (8006ebc <__libc_init_array+0x44>)
 8006e92:	1b64      	subs	r4, r4, r5
 8006e94:	10a4      	asrs	r4, r4, #2
 8006e96:	42a6      	cmp	r6, r4
 8006e98:	d105      	bne.n	8006ea6 <__libc_init_array+0x2e>
 8006e9a:	bd70      	pop	{r4, r5, r6, pc}
 8006e9c:	00b3      	lsls	r3, r6, #2
 8006e9e:	58eb      	ldr	r3, [r5, r3]
 8006ea0:	4798      	blx	r3
 8006ea2:	3601      	adds	r6, #1
 8006ea4:	e7ee      	b.n	8006e84 <__libc_init_array+0xc>
 8006ea6:	00b3      	lsls	r3, r6, #2
 8006ea8:	58eb      	ldr	r3, [r5, r3]
 8006eaa:	4798      	blx	r3
 8006eac:	3601      	adds	r6, #1
 8006eae:	e7f2      	b.n	8006e96 <__libc_init_array+0x1e>
 8006eb0:	08007b90 	.word	0x08007b90
 8006eb4:	08007b90 	.word	0x08007b90
 8006eb8:	08007b90 	.word	0x08007b90
 8006ebc:	08007b94 	.word	0x08007b94

08006ec0 <memset>:
 8006ec0:	0003      	movs	r3, r0
 8006ec2:	1882      	adds	r2, r0, r2
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d100      	bne.n	8006eca <memset+0xa>
 8006ec8:	4770      	bx	lr
 8006eca:	7019      	strb	r1, [r3, #0]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	e7f9      	b.n	8006ec4 <memset+0x4>

08006ed0 <_vsniprintf_r>:
 8006ed0:	b530      	push	{r4, r5, lr}
 8006ed2:	0014      	movs	r4, r2
 8006ed4:	0005      	movs	r5, r0
 8006ed6:	001a      	movs	r2, r3
 8006ed8:	b09b      	sub	sp, #108	; 0x6c
 8006eda:	2c00      	cmp	r4, #0
 8006edc:	da05      	bge.n	8006eea <_vsniprintf_r+0x1a>
 8006ede:	238b      	movs	r3, #139	; 0x8b
 8006ee0:	6003      	str	r3, [r0, #0]
 8006ee2:	2001      	movs	r0, #1
 8006ee4:	4240      	negs	r0, r0
 8006ee6:	b01b      	add	sp, #108	; 0x6c
 8006ee8:	bd30      	pop	{r4, r5, pc}
 8006eea:	2382      	movs	r3, #130	; 0x82
 8006eec:	4668      	mov	r0, sp
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	8183      	strh	r3, [r0, #12]
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	9100      	str	r1, [sp, #0]
 8006ef6:	9104      	str	r1, [sp, #16]
 8006ef8:	429c      	cmp	r4, r3
 8006efa:	d000      	beq.n	8006efe <_vsniprintf_r+0x2e>
 8006efc:	1e63      	subs	r3, r4, #1
 8006efe:	9302      	str	r3, [sp, #8]
 8006f00:	9305      	str	r3, [sp, #20]
 8006f02:	2301      	movs	r3, #1
 8006f04:	4669      	mov	r1, sp
 8006f06:	425b      	negs	r3, r3
 8006f08:	81cb      	strh	r3, [r1, #14]
 8006f0a:	0028      	movs	r0, r5
 8006f0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006f0e:	f000 f879 	bl	8007004 <_svfiprintf_r>
 8006f12:	1c43      	adds	r3, r0, #1
 8006f14:	da01      	bge.n	8006f1a <_vsniprintf_r+0x4a>
 8006f16:	238b      	movs	r3, #139	; 0x8b
 8006f18:	602b      	str	r3, [r5, #0]
 8006f1a:	2c00      	cmp	r4, #0
 8006f1c:	d0e3      	beq.n	8006ee6 <_vsniprintf_r+0x16>
 8006f1e:	2300      	movs	r3, #0
 8006f20:	9a00      	ldr	r2, [sp, #0]
 8006f22:	7013      	strb	r3, [r2, #0]
 8006f24:	e7df      	b.n	8006ee6 <_vsniprintf_r+0x16>
	...

08006f28 <vsniprintf>:
 8006f28:	b507      	push	{r0, r1, r2, lr}
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	0013      	movs	r3, r2
 8006f2e:	000a      	movs	r2, r1
 8006f30:	0001      	movs	r1, r0
 8006f32:	4802      	ldr	r0, [pc, #8]	; (8006f3c <vsniprintf+0x14>)
 8006f34:	6800      	ldr	r0, [r0, #0]
 8006f36:	f7ff ffcb 	bl	8006ed0 <_vsniprintf_r>
 8006f3a:	bd0e      	pop	{r1, r2, r3, pc}
 8006f3c:	20000020 	.word	0x20000020

08006f40 <__ssputs_r>:
 8006f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f42:	688e      	ldr	r6, [r1, #8]
 8006f44:	b085      	sub	sp, #20
 8006f46:	0007      	movs	r7, r0
 8006f48:	000c      	movs	r4, r1
 8006f4a:	9203      	str	r2, [sp, #12]
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	429e      	cmp	r6, r3
 8006f50:	d83c      	bhi.n	8006fcc <__ssputs_r+0x8c>
 8006f52:	2390      	movs	r3, #144	; 0x90
 8006f54:	898a      	ldrh	r2, [r1, #12]
 8006f56:	00db      	lsls	r3, r3, #3
 8006f58:	421a      	tst	r2, r3
 8006f5a:	d034      	beq.n	8006fc6 <__ssputs_r+0x86>
 8006f5c:	6909      	ldr	r1, [r1, #16]
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	6960      	ldr	r0, [r4, #20]
 8006f62:	1a5b      	subs	r3, r3, r1
 8006f64:	9302      	str	r3, [sp, #8]
 8006f66:	2303      	movs	r3, #3
 8006f68:	4343      	muls	r3, r0
 8006f6a:	0fdd      	lsrs	r5, r3, #31
 8006f6c:	18ed      	adds	r5, r5, r3
 8006f6e:	9b01      	ldr	r3, [sp, #4]
 8006f70:	9802      	ldr	r0, [sp, #8]
 8006f72:	3301      	adds	r3, #1
 8006f74:	181b      	adds	r3, r3, r0
 8006f76:	106d      	asrs	r5, r5, #1
 8006f78:	42ab      	cmp	r3, r5
 8006f7a:	d900      	bls.n	8006f7e <__ssputs_r+0x3e>
 8006f7c:	001d      	movs	r5, r3
 8006f7e:	0553      	lsls	r3, r2, #21
 8006f80:	d532      	bpl.n	8006fe8 <__ssputs_r+0xa8>
 8006f82:	0029      	movs	r1, r5
 8006f84:	0038      	movs	r0, r7
 8006f86:	f000 fb53 	bl	8007630 <_malloc_r>
 8006f8a:	1e06      	subs	r6, r0, #0
 8006f8c:	d109      	bne.n	8006fa2 <__ssputs_r+0x62>
 8006f8e:	230c      	movs	r3, #12
 8006f90:	603b      	str	r3, [r7, #0]
 8006f92:	2340      	movs	r3, #64	; 0x40
 8006f94:	2001      	movs	r0, #1
 8006f96:	89a2      	ldrh	r2, [r4, #12]
 8006f98:	4240      	negs	r0, r0
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	81a3      	strh	r3, [r4, #12]
 8006f9e:	b005      	add	sp, #20
 8006fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fa2:	9a02      	ldr	r2, [sp, #8]
 8006fa4:	6921      	ldr	r1, [r4, #16]
 8006fa6:	f000 faba 	bl	800751e <memcpy>
 8006faa:	89a3      	ldrh	r3, [r4, #12]
 8006fac:	4a14      	ldr	r2, [pc, #80]	; (8007000 <__ssputs_r+0xc0>)
 8006fae:	401a      	ands	r2, r3
 8006fb0:	2380      	movs	r3, #128	; 0x80
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	81a3      	strh	r3, [r4, #12]
 8006fb6:	9b02      	ldr	r3, [sp, #8]
 8006fb8:	6126      	str	r6, [r4, #16]
 8006fba:	18f6      	adds	r6, r6, r3
 8006fbc:	6026      	str	r6, [r4, #0]
 8006fbe:	6165      	str	r5, [r4, #20]
 8006fc0:	9e01      	ldr	r6, [sp, #4]
 8006fc2:	1aed      	subs	r5, r5, r3
 8006fc4:	60a5      	str	r5, [r4, #8]
 8006fc6:	9b01      	ldr	r3, [sp, #4]
 8006fc8:	429e      	cmp	r6, r3
 8006fca:	d900      	bls.n	8006fce <__ssputs_r+0x8e>
 8006fcc:	9e01      	ldr	r6, [sp, #4]
 8006fce:	0032      	movs	r2, r6
 8006fd0:	9903      	ldr	r1, [sp, #12]
 8006fd2:	6820      	ldr	r0, [r4, #0]
 8006fd4:	f000 faac 	bl	8007530 <memmove>
 8006fd8:	68a3      	ldr	r3, [r4, #8]
 8006fda:	2000      	movs	r0, #0
 8006fdc:	1b9b      	subs	r3, r3, r6
 8006fde:	60a3      	str	r3, [r4, #8]
 8006fe0:	6823      	ldr	r3, [r4, #0]
 8006fe2:	199e      	adds	r6, r3, r6
 8006fe4:	6026      	str	r6, [r4, #0]
 8006fe6:	e7da      	b.n	8006f9e <__ssputs_r+0x5e>
 8006fe8:	002a      	movs	r2, r5
 8006fea:	0038      	movs	r0, r7
 8006fec:	f000 fb96 	bl	800771c <_realloc_r>
 8006ff0:	1e06      	subs	r6, r0, #0
 8006ff2:	d1e0      	bne.n	8006fb6 <__ssputs_r+0x76>
 8006ff4:	0038      	movs	r0, r7
 8006ff6:	6921      	ldr	r1, [r4, #16]
 8006ff8:	f000 faae 	bl	8007558 <_free_r>
 8006ffc:	e7c7      	b.n	8006f8e <__ssputs_r+0x4e>
 8006ffe:	46c0      	nop			; (mov r8, r8)
 8007000:	fffffb7f 	.word	0xfffffb7f

08007004 <_svfiprintf_r>:
 8007004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007006:	b0a1      	sub	sp, #132	; 0x84
 8007008:	9003      	str	r0, [sp, #12]
 800700a:	001d      	movs	r5, r3
 800700c:	898b      	ldrh	r3, [r1, #12]
 800700e:	000f      	movs	r7, r1
 8007010:	0016      	movs	r6, r2
 8007012:	061b      	lsls	r3, r3, #24
 8007014:	d511      	bpl.n	800703a <_svfiprintf_r+0x36>
 8007016:	690b      	ldr	r3, [r1, #16]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10e      	bne.n	800703a <_svfiprintf_r+0x36>
 800701c:	2140      	movs	r1, #64	; 0x40
 800701e:	f000 fb07 	bl	8007630 <_malloc_r>
 8007022:	6038      	str	r0, [r7, #0]
 8007024:	6138      	str	r0, [r7, #16]
 8007026:	2800      	cmp	r0, #0
 8007028:	d105      	bne.n	8007036 <_svfiprintf_r+0x32>
 800702a:	230c      	movs	r3, #12
 800702c:	9a03      	ldr	r2, [sp, #12]
 800702e:	3801      	subs	r0, #1
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	b021      	add	sp, #132	; 0x84
 8007034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007036:	2340      	movs	r3, #64	; 0x40
 8007038:	617b      	str	r3, [r7, #20]
 800703a:	2300      	movs	r3, #0
 800703c:	ac08      	add	r4, sp, #32
 800703e:	6163      	str	r3, [r4, #20]
 8007040:	3320      	adds	r3, #32
 8007042:	7663      	strb	r3, [r4, #25]
 8007044:	3310      	adds	r3, #16
 8007046:	76a3      	strb	r3, [r4, #26]
 8007048:	9507      	str	r5, [sp, #28]
 800704a:	0035      	movs	r5, r6
 800704c:	782b      	ldrb	r3, [r5, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <_svfiprintf_r+0x52>
 8007052:	2b25      	cmp	r3, #37	; 0x25
 8007054:	d147      	bne.n	80070e6 <_svfiprintf_r+0xe2>
 8007056:	1bab      	subs	r3, r5, r6
 8007058:	9305      	str	r3, [sp, #20]
 800705a:	42b5      	cmp	r5, r6
 800705c:	d00c      	beq.n	8007078 <_svfiprintf_r+0x74>
 800705e:	0032      	movs	r2, r6
 8007060:	0039      	movs	r1, r7
 8007062:	9803      	ldr	r0, [sp, #12]
 8007064:	f7ff ff6c 	bl	8006f40 <__ssputs_r>
 8007068:	1c43      	adds	r3, r0, #1
 800706a:	d100      	bne.n	800706e <_svfiprintf_r+0x6a>
 800706c:	e0ae      	b.n	80071cc <_svfiprintf_r+0x1c8>
 800706e:	6962      	ldr	r2, [r4, #20]
 8007070:	9b05      	ldr	r3, [sp, #20]
 8007072:	4694      	mov	ip, r2
 8007074:	4463      	add	r3, ip
 8007076:	6163      	str	r3, [r4, #20]
 8007078:	782b      	ldrb	r3, [r5, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d100      	bne.n	8007080 <_svfiprintf_r+0x7c>
 800707e:	e0a5      	b.n	80071cc <_svfiprintf_r+0x1c8>
 8007080:	2201      	movs	r2, #1
 8007082:	2300      	movs	r3, #0
 8007084:	4252      	negs	r2, r2
 8007086:	6062      	str	r2, [r4, #4]
 8007088:	a904      	add	r1, sp, #16
 800708a:	3254      	adds	r2, #84	; 0x54
 800708c:	1852      	adds	r2, r2, r1
 800708e:	1c6e      	adds	r6, r5, #1
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	60e3      	str	r3, [r4, #12]
 8007094:	60a3      	str	r3, [r4, #8]
 8007096:	7013      	strb	r3, [r2, #0]
 8007098:	65a3      	str	r3, [r4, #88]	; 0x58
 800709a:	2205      	movs	r2, #5
 800709c:	7831      	ldrb	r1, [r6, #0]
 800709e:	4854      	ldr	r0, [pc, #336]	; (80071f0 <_svfiprintf_r+0x1ec>)
 80070a0:	f000 fa32 	bl	8007508 <memchr>
 80070a4:	1c75      	adds	r5, r6, #1
 80070a6:	2800      	cmp	r0, #0
 80070a8:	d11f      	bne.n	80070ea <_svfiprintf_r+0xe6>
 80070aa:	6822      	ldr	r2, [r4, #0]
 80070ac:	06d3      	lsls	r3, r2, #27
 80070ae:	d504      	bpl.n	80070ba <_svfiprintf_r+0xb6>
 80070b0:	2353      	movs	r3, #83	; 0x53
 80070b2:	a904      	add	r1, sp, #16
 80070b4:	185b      	adds	r3, r3, r1
 80070b6:	2120      	movs	r1, #32
 80070b8:	7019      	strb	r1, [r3, #0]
 80070ba:	0713      	lsls	r3, r2, #28
 80070bc:	d504      	bpl.n	80070c8 <_svfiprintf_r+0xc4>
 80070be:	2353      	movs	r3, #83	; 0x53
 80070c0:	a904      	add	r1, sp, #16
 80070c2:	185b      	adds	r3, r3, r1
 80070c4:	212b      	movs	r1, #43	; 0x2b
 80070c6:	7019      	strb	r1, [r3, #0]
 80070c8:	7833      	ldrb	r3, [r6, #0]
 80070ca:	2b2a      	cmp	r3, #42	; 0x2a
 80070cc:	d016      	beq.n	80070fc <_svfiprintf_r+0xf8>
 80070ce:	0035      	movs	r5, r6
 80070d0:	2100      	movs	r1, #0
 80070d2:	200a      	movs	r0, #10
 80070d4:	68e3      	ldr	r3, [r4, #12]
 80070d6:	782a      	ldrb	r2, [r5, #0]
 80070d8:	1c6e      	adds	r6, r5, #1
 80070da:	3a30      	subs	r2, #48	; 0x30
 80070dc:	2a09      	cmp	r2, #9
 80070de:	d94e      	bls.n	800717e <_svfiprintf_r+0x17a>
 80070e0:	2900      	cmp	r1, #0
 80070e2:	d111      	bne.n	8007108 <_svfiprintf_r+0x104>
 80070e4:	e017      	b.n	8007116 <_svfiprintf_r+0x112>
 80070e6:	3501      	adds	r5, #1
 80070e8:	e7b0      	b.n	800704c <_svfiprintf_r+0x48>
 80070ea:	4b41      	ldr	r3, [pc, #260]	; (80071f0 <_svfiprintf_r+0x1ec>)
 80070ec:	6822      	ldr	r2, [r4, #0]
 80070ee:	1ac0      	subs	r0, r0, r3
 80070f0:	2301      	movs	r3, #1
 80070f2:	4083      	lsls	r3, r0
 80070f4:	4313      	orrs	r3, r2
 80070f6:	002e      	movs	r6, r5
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	e7ce      	b.n	800709a <_svfiprintf_r+0x96>
 80070fc:	9b07      	ldr	r3, [sp, #28]
 80070fe:	1d19      	adds	r1, r3, #4
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	9107      	str	r1, [sp, #28]
 8007104:	2b00      	cmp	r3, #0
 8007106:	db01      	blt.n	800710c <_svfiprintf_r+0x108>
 8007108:	930b      	str	r3, [sp, #44]	; 0x2c
 800710a:	e004      	b.n	8007116 <_svfiprintf_r+0x112>
 800710c:	425b      	negs	r3, r3
 800710e:	60e3      	str	r3, [r4, #12]
 8007110:	2302      	movs	r3, #2
 8007112:	4313      	orrs	r3, r2
 8007114:	6023      	str	r3, [r4, #0]
 8007116:	782b      	ldrb	r3, [r5, #0]
 8007118:	2b2e      	cmp	r3, #46	; 0x2e
 800711a:	d10a      	bne.n	8007132 <_svfiprintf_r+0x12e>
 800711c:	786b      	ldrb	r3, [r5, #1]
 800711e:	2b2a      	cmp	r3, #42	; 0x2a
 8007120:	d135      	bne.n	800718e <_svfiprintf_r+0x18a>
 8007122:	9b07      	ldr	r3, [sp, #28]
 8007124:	3502      	adds	r5, #2
 8007126:	1d1a      	adds	r2, r3, #4
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	9207      	str	r2, [sp, #28]
 800712c:	2b00      	cmp	r3, #0
 800712e:	db2b      	blt.n	8007188 <_svfiprintf_r+0x184>
 8007130:	9309      	str	r3, [sp, #36]	; 0x24
 8007132:	4e30      	ldr	r6, [pc, #192]	; (80071f4 <_svfiprintf_r+0x1f0>)
 8007134:	2203      	movs	r2, #3
 8007136:	0030      	movs	r0, r6
 8007138:	7829      	ldrb	r1, [r5, #0]
 800713a:	f000 f9e5 	bl	8007508 <memchr>
 800713e:	2800      	cmp	r0, #0
 8007140:	d006      	beq.n	8007150 <_svfiprintf_r+0x14c>
 8007142:	2340      	movs	r3, #64	; 0x40
 8007144:	1b80      	subs	r0, r0, r6
 8007146:	4083      	lsls	r3, r0
 8007148:	6822      	ldr	r2, [r4, #0]
 800714a:	3501      	adds	r5, #1
 800714c:	4313      	orrs	r3, r2
 800714e:	6023      	str	r3, [r4, #0]
 8007150:	7829      	ldrb	r1, [r5, #0]
 8007152:	2206      	movs	r2, #6
 8007154:	4828      	ldr	r0, [pc, #160]	; (80071f8 <_svfiprintf_r+0x1f4>)
 8007156:	1c6e      	adds	r6, r5, #1
 8007158:	7621      	strb	r1, [r4, #24]
 800715a:	f000 f9d5 	bl	8007508 <memchr>
 800715e:	2800      	cmp	r0, #0
 8007160:	d03c      	beq.n	80071dc <_svfiprintf_r+0x1d8>
 8007162:	4b26      	ldr	r3, [pc, #152]	; (80071fc <_svfiprintf_r+0x1f8>)
 8007164:	2b00      	cmp	r3, #0
 8007166:	d125      	bne.n	80071b4 <_svfiprintf_r+0x1b0>
 8007168:	2207      	movs	r2, #7
 800716a:	9b07      	ldr	r3, [sp, #28]
 800716c:	3307      	adds	r3, #7
 800716e:	4393      	bics	r3, r2
 8007170:	3308      	adds	r3, #8
 8007172:	9307      	str	r3, [sp, #28]
 8007174:	6963      	ldr	r3, [r4, #20]
 8007176:	9a04      	ldr	r2, [sp, #16]
 8007178:	189b      	adds	r3, r3, r2
 800717a:	6163      	str	r3, [r4, #20]
 800717c:	e765      	b.n	800704a <_svfiprintf_r+0x46>
 800717e:	4343      	muls	r3, r0
 8007180:	0035      	movs	r5, r6
 8007182:	2101      	movs	r1, #1
 8007184:	189b      	adds	r3, r3, r2
 8007186:	e7a6      	b.n	80070d6 <_svfiprintf_r+0xd2>
 8007188:	2301      	movs	r3, #1
 800718a:	425b      	negs	r3, r3
 800718c:	e7d0      	b.n	8007130 <_svfiprintf_r+0x12c>
 800718e:	2300      	movs	r3, #0
 8007190:	200a      	movs	r0, #10
 8007192:	001a      	movs	r2, r3
 8007194:	3501      	adds	r5, #1
 8007196:	6063      	str	r3, [r4, #4]
 8007198:	7829      	ldrb	r1, [r5, #0]
 800719a:	1c6e      	adds	r6, r5, #1
 800719c:	3930      	subs	r1, #48	; 0x30
 800719e:	2909      	cmp	r1, #9
 80071a0:	d903      	bls.n	80071aa <_svfiprintf_r+0x1a6>
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d0c5      	beq.n	8007132 <_svfiprintf_r+0x12e>
 80071a6:	9209      	str	r2, [sp, #36]	; 0x24
 80071a8:	e7c3      	b.n	8007132 <_svfiprintf_r+0x12e>
 80071aa:	4342      	muls	r2, r0
 80071ac:	0035      	movs	r5, r6
 80071ae:	2301      	movs	r3, #1
 80071b0:	1852      	adds	r2, r2, r1
 80071b2:	e7f1      	b.n	8007198 <_svfiprintf_r+0x194>
 80071b4:	ab07      	add	r3, sp, #28
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	003a      	movs	r2, r7
 80071ba:	0021      	movs	r1, r4
 80071bc:	4b10      	ldr	r3, [pc, #64]	; (8007200 <_svfiprintf_r+0x1fc>)
 80071be:	9803      	ldr	r0, [sp, #12]
 80071c0:	e000      	b.n	80071c4 <_svfiprintf_r+0x1c0>
 80071c2:	bf00      	nop
 80071c4:	9004      	str	r0, [sp, #16]
 80071c6:	9b04      	ldr	r3, [sp, #16]
 80071c8:	3301      	adds	r3, #1
 80071ca:	d1d3      	bne.n	8007174 <_svfiprintf_r+0x170>
 80071cc:	89bb      	ldrh	r3, [r7, #12]
 80071ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 80071d0:	065b      	lsls	r3, r3, #25
 80071d2:	d400      	bmi.n	80071d6 <_svfiprintf_r+0x1d2>
 80071d4:	e72d      	b.n	8007032 <_svfiprintf_r+0x2e>
 80071d6:	2001      	movs	r0, #1
 80071d8:	4240      	negs	r0, r0
 80071da:	e72a      	b.n	8007032 <_svfiprintf_r+0x2e>
 80071dc:	ab07      	add	r3, sp, #28
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	003a      	movs	r2, r7
 80071e2:	0021      	movs	r1, r4
 80071e4:	4b06      	ldr	r3, [pc, #24]	; (8007200 <_svfiprintf_r+0x1fc>)
 80071e6:	9803      	ldr	r0, [sp, #12]
 80071e8:	f000 f87c 	bl	80072e4 <_printf_i>
 80071ec:	e7ea      	b.n	80071c4 <_svfiprintf_r+0x1c0>
 80071ee:	46c0      	nop			; (mov r8, r8)
 80071f0:	08007b54 	.word	0x08007b54
 80071f4:	08007b5a 	.word	0x08007b5a
 80071f8:	08007b5e 	.word	0x08007b5e
 80071fc:	00000000 	.word	0x00000000
 8007200:	08006f41 	.word	0x08006f41

08007204 <_printf_common>:
 8007204:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007206:	0015      	movs	r5, r2
 8007208:	9301      	str	r3, [sp, #4]
 800720a:	688a      	ldr	r2, [r1, #8]
 800720c:	690b      	ldr	r3, [r1, #16]
 800720e:	000c      	movs	r4, r1
 8007210:	9000      	str	r0, [sp, #0]
 8007212:	4293      	cmp	r3, r2
 8007214:	da00      	bge.n	8007218 <_printf_common+0x14>
 8007216:	0013      	movs	r3, r2
 8007218:	0022      	movs	r2, r4
 800721a:	602b      	str	r3, [r5, #0]
 800721c:	3243      	adds	r2, #67	; 0x43
 800721e:	7812      	ldrb	r2, [r2, #0]
 8007220:	2a00      	cmp	r2, #0
 8007222:	d001      	beq.n	8007228 <_printf_common+0x24>
 8007224:	3301      	adds	r3, #1
 8007226:	602b      	str	r3, [r5, #0]
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	069b      	lsls	r3, r3, #26
 800722c:	d502      	bpl.n	8007234 <_printf_common+0x30>
 800722e:	682b      	ldr	r3, [r5, #0]
 8007230:	3302      	adds	r3, #2
 8007232:	602b      	str	r3, [r5, #0]
 8007234:	6822      	ldr	r2, [r4, #0]
 8007236:	2306      	movs	r3, #6
 8007238:	0017      	movs	r7, r2
 800723a:	401f      	ands	r7, r3
 800723c:	421a      	tst	r2, r3
 800723e:	d027      	beq.n	8007290 <_printf_common+0x8c>
 8007240:	0023      	movs	r3, r4
 8007242:	3343      	adds	r3, #67	; 0x43
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	1e5a      	subs	r2, r3, #1
 8007248:	4193      	sbcs	r3, r2
 800724a:	6822      	ldr	r2, [r4, #0]
 800724c:	0692      	lsls	r2, r2, #26
 800724e:	d430      	bmi.n	80072b2 <_printf_common+0xae>
 8007250:	0022      	movs	r2, r4
 8007252:	9901      	ldr	r1, [sp, #4]
 8007254:	9800      	ldr	r0, [sp, #0]
 8007256:	9e08      	ldr	r6, [sp, #32]
 8007258:	3243      	adds	r2, #67	; 0x43
 800725a:	47b0      	blx	r6
 800725c:	1c43      	adds	r3, r0, #1
 800725e:	d025      	beq.n	80072ac <_printf_common+0xa8>
 8007260:	2306      	movs	r3, #6
 8007262:	6820      	ldr	r0, [r4, #0]
 8007264:	682a      	ldr	r2, [r5, #0]
 8007266:	68e1      	ldr	r1, [r4, #12]
 8007268:	2500      	movs	r5, #0
 800726a:	4003      	ands	r3, r0
 800726c:	2b04      	cmp	r3, #4
 800726e:	d103      	bne.n	8007278 <_printf_common+0x74>
 8007270:	1a8d      	subs	r5, r1, r2
 8007272:	43eb      	mvns	r3, r5
 8007274:	17db      	asrs	r3, r3, #31
 8007276:	401d      	ands	r5, r3
 8007278:	68a3      	ldr	r3, [r4, #8]
 800727a:	6922      	ldr	r2, [r4, #16]
 800727c:	4293      	cmp	r3, r2
 800727e:	dd01      	ble.n	8007284 <_printf_common+0x80>
 8007280:	1a9b      	subs	r3, r3, r2
 8007282:	18ed      	adds	r5, r5, r3
 8007284:	2700      	movs	r7, #0
 8007286:	42bd      	cmp	r5, r7
 8007288:	d120      	bne.n	80072cc <_printf_common+0xc8>
 800728a:	2000      	movs	r0, #0
 800728c:	e010      	b.n	80072b0 <_printf_common+0xac>
 800728e:	3701      	adds	r7, #1
 8007290:	68e3      	ldr	r3, [r4, #12]
 8007292:	682a      	ldr	r2, [r5, #0]
 8007294:	1a9b      	subs	r3, r3, r2
 8007296:	42bb      	cmp	r3, r7
 8007298:	ddd2      	ble.n	8007240 <_printf_common+0x3c>
 800729a:	0022      	movs	r2, r4
 800729c:	2301      	movs	r3, #1
 800729e:	9901      	ldr	r1, [sp, #4]
 80072a0:	9800      	ldr	r0, [sp, #0]
 80072a2:	9e08      	ldr	r6, [sp, #32]
 80072a4:	3219      	adds	r2, #25
 80072a6:	47b0      	blx	r6
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	d1f0      	bne.n	800728e <_printf_common+0x8a>
 80072ac:	2001      	movs	r0, #1
 80072ae:	4240      	negs	r0, r0
 80072b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80072b2:	2030      	movs	r0, #48	; 0x30
 80072b4:	18e1      	adds	r1, r4, r3
 80072b6:	3143      	adds	r1, #67	; 0x43
 80072b8:	7008      	strb	r0, [r1, #0]
 80072ba:	0021      	movs	r1, r4
 80072bc:	1c5a      	adds	r2, r3, #1
 80072be:	3145      	adds	r1, #69	; 0x45
 80072c0:	7809      	ldrb	r1, [r1, #0]
 80072c2:	18a2      	adds	r2, r4, r2
 80072c4:	3243      	adds	r2, #67	; 0x43
 80072c6:	3302      	adds	r3, #2
 80072c8:	7011      	strb	r1, [r2, #0]
 80072ca:	e7c1      	b.n	8007250 <_printf_common+0x4c>
 80072cc:	0022      	movs	r2, r4
 80072ce:	2301      	movs	r3, #1
 80072d0:	9901      	ldr	r1, [sp, #4]
 80072d2:	9800      	ldr	r0, [sp, #0]
 80072d4:	9e08      	ldr	r6, [sp, #32]
 80072d6:	321a      	adds	r2, #26
 80072d8:	47b0      	blx	r6
 80072da:	1c43      	adds	r3, r0, #1
 80072dc:	d0e6      	beq.n	80072ac <_printf_common+0xa8>
 80072de:	3701      	adds	r7, #1
 80072e0:	e7d1      	b.n	8007286 <_printf_common+0x82>
	...

080072e4 <_printf_i>:
 80072e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072e6:	b08b      	sub	sp, #44	; 0x2c
 80072e8:	9206      	str	r2, [sp, #24]
 80072ea:	000a      	movs	r2, r1
 80072ec:	3243      	adds	r2, #67	; 0x43
 80072ee:	9307      	str	r3, [sp, #28]
 80072f0:	9005      	str	r0, [sp, #20]
 80072f2:	9204      	str	r2, [sp, #16]
 80072f4:	7e0a      	ldrb	r2, [r1, #24]
 80072f6:	000c      	movs	r4, r1
 80072f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072fa:	2a78      	cmp	r2, #120	; 0x78
 80072fc:	d807      	bhi.n	800730e <_printf_i+0x2a>
 80072fe:	2a62      	cmp	r2, #98	; 0x62
 8007300:	d809      	bhi.n	8007316 <_printf_i+0x32>
 8007302:	2a00      	cmp	r2, #0
 8007304:	d100      	bne.n	8007308 <_printf_i+0x24>
 8007306:	e0c1      	b.n	800748c <_printf_i+0x1a8>
 8007308:	2a58      	cmp	r2, #88	; 0x58
 800730a:	d100      	bne.n	800730e <_printf_i+0x2a>
 800730c:	e08c      	b.n	8007428 <_printf_i+0x144>
 800730e:	0026      	movs	r6, r4
 8007310:	3642      	adds	r6, #66	; 0x42
 8007312:	7032      	strb	r2, [r6, #0]
 8007314:	e022      	b.n	800735c <_printf_i+0x78>
 8007316:	0010      	movs	r0, r2
 8007318:	3863      	subs	r0, #99	; 0x63
 800731a:	2815      	cmp	r0, #21
 800731c:	d8f7      	bhi.n	800730e <_printf_i+0x2a>
 800731e:	f7f8 fef9 	bl	8000114 <__gnu_thumb1_case_shi>
 8007322:	0016      	.short	0x0016
 8007324:	fff6001f 	.word	0xfff6001f
 8007328:	fff6fff6 	.word	0xfff6fff6
 800732c:	001ffff6 	.word	0x001ffff6
 8007330:	fff6fff6 	.word	0xfff6fff6
 8007334:	fff6fff6 	.word	0xfff6fff6
 8007338:	003600a8 	.word	0x003600a8
 800733c:	fff6009a 	.word	0xfff6009a
 8007340:	00b9fff6 	.word	0x00b9fff6
 8007344:	0036fff6 	.word	0x0036fff6
 8007348:	fff6fff6 	.word	0xfff6fff6
 800734c:	009e      	.short	0x009e
 800734e:	0026      	movs	r6, r4
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	3642      	adds	r6, #66	; 0x42
 8007354:	1d11      	adds	r1, r2, #4
 8007356:	6019      	str	r1, [r3, #0]
 8007358:	6813      	ldr	r3, [r2, #0]
 800735a:	7033      	strb	r3, [r6, #0]
 800735c:	2301      	movs	r3, #1
 800735e:	e0a7      	b.n	80074b0 <_printf_i+0x1cc>
 8007360:	6808      	ldr	r0, [r1, #0]
 8007362:	6819      	ldr	r1, [r3, #0]
 8007364:	1d0a      	adds	r2, r1, #4
 8007366:	0605      	lsls	r5, r0, #24
 8007368:	d50b      	bpl.n	8007382 <_printf_i+0x9e>
 800736a:	680d      	ldr	r5, [r1, #0]
 800736c:	601a      	str	r2, [r3, #0]
 800736e:	2d00      	cmp	r5, #0
 8007370:	da03      	bge.n	800737a <_printf_i+0x96>
 8007372:	232d      	movs	r3, #45	; 0x2d
 8007374:	9a04      	ldr	r2, [sp, #16]
 8007376:	426d      	negs	r5, r5
 8007378:	7013      	strb	r3, [r2, #0]
 800737a:	4b61      	ldr	r3, [pc, #388]	; (8007500 <_printf_i+0x21c>)
 800737c:	270a      	movs	r7, #10
 800737e:	9303      	str	r3, [sp, #12]
 8007380:	e01b      	b.n	80073ba <_printf_i+0xd6>
 8007382:	680d      	ldr	r5, [r1, #0]
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	0641      	lsls	r1, r0, #25
 8007388:	d5f1      	bpl.n	800736e <_printf_i+0x8a>
 800738a:	b22d      	sxth	r5, r5
 800738c:	e7ef      	b.n	800736e <_printf_i+0x8a>
 800738e:	680d      	ldr	r5, [r1, #0]
 8007390:	6819      	ldr	r1, [r3, #0]
 8007392:	1d08      	adds	r0, r1, #4
 8007394:	6018      	str	r0, [r3, #0]
 8007396:	062e      	lsls	r6, r5, #24
 8007398:	d501      	bpl.n	800739e <_printf_i+0xba>
 800739a:	680d      	ldr	r5, [r1, #0]
 800739c:	e003      	b.n	80073a6 <_printf_i+0xc2>
 800739e:	066d      	lsls	r5, r5, #25
 80073a0:	d5fb      	bpl.n	800739a <_printf_i+0xb6>
 80073a2:	680d      	ldr	r5, [r1, #0]
 80073a4:	b2ad      	uxth	r5, r5
 80073a6:	4b56      	ldr	r3, [pc, #344]	; (8007500 <_printf_i+0x21c>)
 80073a8:	2708      	movs	r7, #8
 80073aa:	9303      	str	r3, [sp, #12]
 80073ac:	2a6f      	cmp	r2, #111	; 0x6f
 80073ae:	d000      	beq.n	80073b2 <_printf_i+0xce>
 80073b0:	3702      	adds	r7, #2
 80073b2:	0023      	movs	r3, r4
 80073b4:	2200      	movs	r2, #0
 80073b6:	3343      	adds	r3, #67	; 0x43
 80073b8:	701a      	strb	r2, [r3, #0]
 80073ba:	6863      	ldr	r3, [r4, #4]
 80073bc:	60a3      	str	r3, [r4, #8]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	db03      	blt.n	80073ca <_printf_i+0xe6>
 80073c2:	2204      	movs	r2, #4
 80073c4:	6821      	ldr	r1, [r4, #0]
 80073c6:	4391      	bics	r1, r2
 80073c8:	6021      	str	r1, [r4, #0]
 80073ca:	2d00      	cmp	r5, #0
 80073cc:	d102      	bne.n	80073d4 <_printf_i+0xf0>
 80073ce:	9e04      	ldr	r6, [sp, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00c      	beq.n	80073ee <_printf_i+0x10a>
 80073d4:	9e04      	ldr	r6, [sp, #16]
 80073d6:	0028      	movs	r0, r5
 80073d8:	0039      	movs	r1, r7
 80073da:	f7f8 ff2b 	bl	8000234 <__aeabi_uidivmod>
 80073de:	9b03      	ldr	r3, [sp, #12]
 80073e0:	3e01      	subs	r6, #1
 80073e2:	5c5b      	ldrb	r3, [r3, r1]
 80073e4:	7033      	strb	r3, [r6, #0]
 80073e6:	002b      	movs	r3, r5
 80073e8:	0005      	movs	r5, r0
 80073ea:	429f      	cmp	r7, r3
 80073ec:	d9f3      	bls.n	80073d6 <_printf_i+0xf2>
 80073ee:	2f08      	cmp	r7, #8
 80073f0:	d109      	bne.n	8007406 <_printf_i+0x122>
 80073f2:	6823      	ldr	r3, [r4, #0]
 80073f4:	07db      	lsls	r3, r3, #31
 80073f6:	d506      	bpl.n	8007406 <_printf_i+0x122>
 80073f8:	6863      	ldr	r3, [r4, #4]
 80073fa:	6922      	ldr	r2, [r4, #16]
 80073fc:	4293      	cmp	r3, r2
 80073fe:	dc02      	bgt.n	8007406 <_printf_i+0x122>
 8007400:	2330      	movs	r3, #48	; 0x30
 8007402:	3e01      	subs	r6, #1
 8007404:	7033      	strb	r3, [r6, #0]
 8007406:	9b04      	ldr	r3, [sp, #16]
 8007408:	1b9b      	subs	r3, r3, r6
 800740a:	6123      	str	r3, [r4, #16]
 800740c:	9b07      	ldr	r3, [sp, #28]
 800740e:	0021      	movs	r1, r4
 8007410:	9300      	str	r3, [sp, #0]
 8007412:	9805      	ldr	r0, [sp, #20]
 8007414:	9b06      	ldr	r3, [sp, #24]
 8007416:	aa09      	add	r2, sp, #36	; 0x24
 8007418:	f7ff fef4 	bl	8007204 <_printf_common>
 800741c:	1c43      	adds	r3, r0, #1
 800741e:	d14c      	bne.n	80074ba <_printf_i+0x1d6>
 8007420:	2001      	movs	r0, #1
 8007422:	4240      	negs	r0, r0
 8007424:	b00b      	add	sp, #44	; 0x2c
 8007426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007428:	3145      	adds	r1, #69	; 0x45
 800742a:	700a      	strb	r2, [r1, #0]
 800742c:	4a34      	ldr	r2, [pc, #208]	; (8007500 <_printf_i+0x21c>)
 800742e:	9203      	str	r2, [sp, #12]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	6821      	ldr	r1, [r4, #0]
 8007434:	ca20      	ldmia	r2!, {r5}
 8007436:	601a      	str	r2, [r3, #0]
 8007438:	0608      	lsls	r0, r1, #24
 800743a:	d516      	bpl.n	800746a <_printf_i+0x186>
 800743c:	07cb      	lsls	r3, r1, #31
 800743e:	d502      	bpl.n	8007446 <_printf_i+0x162>
 8007440:	2320      	movs	r3, #32
 8007442:	4319      	orrs	r1, r3
 8007444:	6021      	str	r1, [r4, #0]
 8007446:	2710      	movs	r7, #16
 8007448:	2d00      	cmp	r5, #0
 800744a:	d1b2      	bne.n	80073b2 <_printf_i+0xce>
 800744c:	2320      	movs	r3, #32
 800744e:	6822      	ldr	r2, [r4, #0]
 8007450:	439a      	bics	r2, r3
 8007452:	6022      	str	r2, [r4, #0]
 8007454:	e7ad      	b.n	80073b2 <_printf_i+0xce>
 8007456:	2220      	movs	r2, #32
 8007458:	6809      	ldr	r1, [r1, #0]
 800745a:	430a      	orrs	r2, r1
 800745c:	6022      	str	r2, [r4, #0]
 800745e:	0022      	movs	r2, r4
 8007460:	2178      	movs	r1, #120	; 0x78
 8007462:	3245      	adds	r2, #69	; 0x45
 8007464:	7011      	strb	r1, [r2, #0]
 8007466:	4a27      	ldr	r2, [pc, #156]	; (8007504 <_printf_i+0x220>)
 8007468:	e7e1      	b.n	800742e <_printf_i+0x14a>
 800746a:	0648      	lsls	r0, r1, #25
 800746c:	d5e6      	bpl.n	800743c <_printf_i+0x158>
 800746e:	b2ad      	uxth	r5, r5
 8007470:	e7e4      	b.n	800743c <_printf_i+0x158>
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	680d      	ldr	r5, [r1, #0]
 8007476:	1d10      	adds	r0, r2, #4
 8007478:	6949      	ldr	r1, [r1, #20]
 800747a:	6018      	str	r0, [r3, #0]
 800747c:	6813      	ldr	r3, [r2, #0]
 800747e:	062e      	lsls	r6, r5, #24
 8007480:	d501      	bpl.n	8007486 <_printf_i+0x1a2>
 8007482:	6019      	str	r1, [r3, #0]
 8007484:	e002      	b.n	800748c <_printf_i+0x1a8>
 8007486:	066d      	lsls	r5, r5, #25
 8007488:	d5fb      	bpl.n	8007482 <_printf_i+0x19e>
 800748a:	8019      	strh	r1, [r3, #0]
 800748c:	2300      	movs	r3, #0
 800748e:	9e04      	ldr	r6, [sp, #16]
 8007490:	6123      	str	r3, [r4, #16]
 8007492:	e7bb      	b.n	800740c <_printf_i+0x128>
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	1d11      	adds	r1, r2, #4
 8007498:	6019      	str	r1, [r3, #0]
 800749a:	6816      	ldr	r6, [r2, #0]
 800749c:	2100      	movs	r1, #0
 800749e:	0030      	movs	r0, r6
 80074a0:	6862      	ldr	r2, [r4, #4]
 80074a2:	f000 f831 	bl	8007508 <memchr>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d001      	beq.n	80074ae <_printf_i+0x1ca>
 80074aa:	1b80      	subs	r0, r0, r6
 80074ac:	6060      	str	r0, [r4, #4]
 80074ae:	6863      	ldr	r3, [r4, #4]
 80074b0:	6123      	str	r3, [r4, #16]
 80074b2:	2300      	movs	r3, #0
 80074b4:	9a04      	ldr	r2, [sp, #16]
 80074b6:	7013      	strb	r3, [r2, #0]
 80074b8:	e7a8      	b.n	800740c <_printf_i+0x128>
 80074ba:	6923      	ldr	r3, [r4, #16]
 80074bc:	0032      	movs	r2, r6
 80074be:	9906      	ldr	r1, [sp, #24]
 80074c0:	9805      	ldr	r0, [sp, #20]
 80074c2:	9d07      	ldr	r5, [sp, #28]
 80074c4:	47a8      	blx	r5
 80074c6:	1c43      	adds	r3, r0, #1
 80074c8:	d0aa      	beq.n	8007420 <_printf_i+0x13c>
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	079b      	lsls	r3, r3, #30
 80074ce:	d415      	bmi.n	80074fc <_printf_i+0x218>
 80074d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074d2:	68e0      	ldr	r0, [r4, #12]
 80074d4:	4298      	cmp	r0, r3
 80074d6:	daa5      	bge.n	8007424 <_printf_i+0x140>
 80074d8:	0018      	movs	r0, r3
 80074da:	e7a3      	b.n	8007424 <_printf_i+0x140>
 80074dc:	0022      	movs	r2, r4
 80074de:	2301      	movs	r3, #1
 80074e0:	9906      	ldr	r1, [sp, #24]
 80074e2:	9805      	ldr	r0, [sp, #20]
 80074e4:	9e07      	ldr	r6, [sp, #28]
 80074e6:	3219      	adds	r2, #25
 80074e8:	47b0      	blx	r6
 80074ea:	1c43      	adds	r3, r0, #1
 80074ec:	d098      	beq.n	8007420 <_printf_i+0x13c>
 80074ee:	3501      	adds	r5, #1
 80074f0:	68e3      	ldr	r3, [r4, #12]
 80074f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074f4:	1a9b      	subs	r3, r3, r2
 80074f6:	42ab      	cmp	r3, r5
 80074f8:	dcf0      	bgt.n	80074dc <_printf_i+0x1f8>
 80074fa:	e7e9      	b.n	80074d0 <_printf_i+0x1ec>
 80074fc:	2500      	movs	r5, #0
 80074fe:	e7f7      	b.n	80074f0 <_printf_i+0x20c>
 8007500:	08007b65 	.word	0x08007b65
 8007504:	08007b76 	.word	0x08007b76

08007508 <memchr>:
 8007508:	b2c9      	uxtb	r1, r1
 800750a:	1882      	adds	r2, r0, r2
 800750c:	4290      	cmp	r0, r2
 800750e:	d101      	bne.n	8007514 <memchr+0xc>
 8007510:	2000      	movs	r0, #0
 8007512:	4770      	bx	lr
 8007514:	7803      	ldrb	r3, [r0, #0]
 8007516:	428b      	cmp	r3, r1
 8007518:	d0fb      	beq.n	8007512 <memchr+0xa>
 800751a:	3001      	adds	r0, #1
 800751c:	e7f6      	b.n	800750c <memchr+0x4>

0800751e <memcpy>:
 800751e:	2300      	movs	r3, #0
 8007520:	b510      	push	{r4, lr}
 8007522:	429a      	cmp	r2, r3
 8007524:	d100      	bne.n	8007528 <memcpy+0xa>
 8007526:	bd10      	pop	{r4, pc}
 8007528:	5ccc      	ldrb	r4, [r1, r3]
 800752a:	54c4      	strb	r4, [r0, r3]
 800752c:	3301      	adds	r3, #1
 800752e:	e7f8      	b.n	8007522 <memcpy+0x4>

08007530 <memmove>:
 8007530:	b510      	push	{r4, lr}
 8007532:	4288      	cmp	r0, r1
 8007534:	d902      	bls.n	800753c <memmove+0xc>
 8007536:	188b      	adds	r3, r1, r2
 8007538:	4298      	cmp	r0, r3
 800753a:	d303      	bcc.n	8007544 <memmove+0x14>
 800753c:	2300      	movs	r3, #0
 800753e:	e007      	b.n	8007550 <memmove+0x20>
 8007540:	5c8b      	ldrb	r3, [r1, r2]
 8007542:	5483      	strb	r3, [r0, r2]
 8007544:	3a01      	subs	r2, #1
 8007546:	d2fb      	bcs.n	8007540 <memmove+0x10>
 8007548:	bd10      	pop	{r4, pc}
 800754a:	5ccc      	ldrb	r4, [r1, r3]
 800754c:	54c4      	strb	r4, [r0, r3]
 800754e:	3301      	adds	r3, #1
 8007550:	429a      	cmp	r2, r3
 8007552:	d1fa      	bne.n	800754a <memmove+0x1a>
 8007554:	e7f8      	b.n	8007548 <memmove+0x18>
	...

08007558 <_free_r>:
 8007558:	b570      	push	{r4, r5, r6, lr}
 800755a:	0005      	movs	r5, r0
 800755c:	2900      	cmp	r1, #0
 800755e:	d010      	beq.n	8007582 <_free_r+0x2a>
 8007560:	1f0c      	subs	r4, r1, #4
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	da00      	bge.n	800756a <_free_r+0x12>
 8007568:	18e4      	adds	r4, r4, r3
 800756a:	0028      	movs	r0, r5
 800756c:	f000 f918 	bl	80077a0 <__malloc_lock>
 8007570:	4a1d      	ldr	r2, [pc, #116]	; (80075e8 <_free_r+0x90>)
 8007572:	6813      	ldr	r3, [r2, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d105      	bne.n	8007584 <_free_r+0x2c>
 8007578:	6063      	str	r3, [r4, #4]
 800757a:	6014      	str	r4, [r2, #0]
 800757c:	0028      	movs	r0, r5
 800757e:	f000 f917 	bl	80077b0 <__malloc_unlock>
 8007582:	bd70      	pop	{r4, r5, r6, pc}
 8007584:	42a3      	cmp	r3, r4
 8007586:	d908      	bls.n	800759a <_free_r+0x42>
 8007588:	6821      	ldr	r1, [r4, #0]
 800758a:	1860      	adds	r0, r4, r1
 800758c:	4283      	cmp	r3, r0
 800758e:	d1f3      	bne.n	8007578 <_free_r+0x20>
 8007590:	6818      	ldr	r0, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	1841      	adds	r1, r0, r1
 8007596:	6021      	str	r1, [r4, #0]
 8007598:	e7ee      	b.n	8007578 <_free_r+0x20>
 800759a:	001a      	movs	r2, r3
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <_free_r+0x4e>
 80075a2:	42a3      	cmp	r3, r4
 80075a4:	d9f9      	bls.n	800759a <_free_r+0x42>
 80075a6:	6811      	ldr	r1, [r2, #0]
 80075a8:	1850      	adds	r0, r2, r1
 80075aa:	42a0      	cmp	r0, r4
 80075ac:	d10b      	bne.n	80075c6 <_free_r+0x6e>
 80075ae:	6820      	ldr	r0, [r4, #0]
 80075b0:	1809      	adds	r1, r1, r0
 80075b2:	1850      	adds	r0, r2, r1
 80075b4:	6011      	str	r1, [r2, #0]
 80075b6:	4283      	cmp	r3, r0
 80075b8:	d1e0      	bne.n	800757c <_free_r+0x24>
 80075ba:	6818      	ldr	r0, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	1841      	adds	r1, r0, r1
 80075c0:	6011      	str	r1, [r2, #0]
 80075c2:	6053      	str	r3, [r2, #4]
 80075c4:	e7da      	b.n	800757c <_free_r+0x24>
 80075c6:	42a0      	cmp	r0, r4
 80075c8:	d902      	bls.n	80075d0 <_free_r+0x78>
 80075ca:	230c      	movs	r3, #12
 80075cc:	602b      	str	r3, [r5, #0]
 80075ce:	e7d5      	b.n	800757c <_free_r+0x24>
 80075d0:	6821      	ldr	r1, [r4, #0]
 80075d2:	1860      	adds	r0, r4, r1
 80075d4:	4283      	cmp	r3, r0
 80075d6:	d103      	bne.n	80075e0 <_free_r+0x88>
 80075d8:	6818      	ldr	r0, [r3, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	1841      	adds	r1, r0, r1
 80075de:	6021      	str	r1, [r4, #0]
 80075e0:	6063      	str	r3, [r4, #4]
 80075e2:	6054      	str	r4, [r2, #4]
 80075e4:	e7ca      	b.n	800757c <_free_r+0x24>
 80075e6:	46c0      	nop			; (mov r8, r8)
 80075e8:	200005f8 	.word	0x200005f8

080075ec <sbrk_aligned>:
 80075ec:	b570      	push	{r4, r5, r6, lr}
 80075ee:	4e0f      	ldr	r6, [pc, #60]	; (800762c <sbrk_aligned+0x40>)
 80075f0:	000d      	movs	r5, r1
 80075f2:	6831      	ldr	r1, [r6, #0]
 80075f4:	0004      	movs	r4, r0
 80075f6:	2900      	cmp	r1, #0
 80075f8:	d102      	bne.n	8007600 <sbrk_aligned+0x14>
 80075fa:	f000 f8bf 	bl	800777c <_sbrk_r>
 80075fe:	6030      	str	r0, [r6, #0]
 8007600:	0029      	movs	r1, r5
 8007602:	0020      	movs	r0, r4
 8007604:	f000 f8ba 	bl	800777c <_sbrk_r>
 8007608:	1c43      	adds	r3, r0, #1
 800760a:	d00a      	beq.n	8007622 <sbrk_aligned+0x36>
 800760c:	2303      	movs	r3, #3
 800760e:	1cc5      	adds	r5, r0, #3
 8007610:	439d      	bics	r5, r3
 8007612:	42a8      	cmp	r0, r5
 8007614:	d007      	beq.n	8007626 <sbrk_aligned+0x3a>
 8007616:	1a29      	subs	r1, r5, r0
 8007618:	0020      	movs	r0, r4
 800761a:	f000 f8af 	bl	800777c <_sbrk_r>
 800761e:	1c43      	adds	r3, r0, #1
 8007620:	d101      	bne.n	8007626 <sbrk_aligned+0x3a>
 8007622:	2501      	movs	r5, #1
 8007624:	426d      	negs	r5, r5
 8007626:	0028      	movs	r0, r5
 8007628:	bd70      	pop	{r4, r5, r6, pc}
 800762a:	46c0      	nop			; (mov r8, r8)
 800762c:	200005fc 	.word	0x200005fc

08007630 <_malloc_r>:
 8007630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007632:	2203      	movs	r2, #3
 8007634:	1ccb      	adds	r3, r1, #3
 8007636:	4393      	bics	r3, r2
 8007638:	3308      	adds	r3, #8
 800763a:	0006      	movs	r6, r0
 800763c:	001f      	movs	r7, r3
 800763e:	2b0c      	cmp	r3, #12
 8007640:	d232      	bcs.n	80076a8 <_malloc_r+0x78>
 8007642:	270c      	movs	r7, #12
 8007644:	42b9      	cmp	r1, r7
 8007646:	d831      	bhi.n	80076ac <_malloc_r+0x7c>
 8007648:	0030      	movs	r0, r6
 800764a:	f000 f8a9 	bl	80077a0 <__malloc_lock>
 800764e:	4d32      	ldr	r5, [pc, #200]	; (8007718 <_malloc_r+0xe8>)
 8007650:	682b      	ldr	r3, [r5, #0]
 8007652:	001c      	movs	r4, r3
 8007654:	2c00      	cmp	r4, #0
 8007656:	d12e      	bne.n	80076b6 <_malloc_r+0x86>
 8007658:	0039      	movs	r1, r7
 800765a:	0030      	movs	r0, r6
 800765c:	f7ff ffc6 	bl	80075ec <sbrk_aligned>
 8007660:	0004      	movs	r4, r0
 8007662:	1c43      	adds	r3, r0, #1
 8007664:	d11e      	bne.n	80076a4 <_malloc_r+0x74>
 8007666:	682c      	ldr	r4, [r5, #0]
 8007668:	0025      	movs	r5, r4
 800766a:	2d00      	cmp	r5, #0
 800766c:	d14a      	bne.n	8007704 <_malloc_r+0xd4>
 800766e:	6823      	ldr	r3, [r4, #0]
 8007670:	0029      	movs	r1, r5
 8007672:	18e3      	adds	r3, r4, r3
 8007674:	0030      	movs	r0, r6
 8007676:	9301      	str	r3, [sp, #4]
 8007678:	f000 f880 	bl	800777c <_sbrk_r>
 800767c:	9b01      	ldr	r3, [sp, #4]
 800767e:	4283      	cmp	r3, r0
 8007680:	d143      	bne.n	800770a <_malloc_r+0xda>
 8007682:	6823      	ldr	r3, [r4, #0]
 8007684:	3703      	adds	r7, #3
 8007686:	1aff      	subs	r7, r7, r3
 8007688:	2303      	movs	r3, #3
 800768a:	439f      	bics	r7, r3
 800768c:	3708      	adds	r7, #8
 800768e:	2f0c      	cmp	r7, #12
 8007690:	d200      	bcs.n	8007694 <_malloc_r+0x64>
 8007692:	270c      	movs	r7, #12
 8007694:	0039      	movs	r1, r7
 8007696:	0030      	movs	r0, r6
 8007698:	f7ff ffa8 	bl	80075ec <sbrk_aligned>
 800769c:	1c43      	adds	r3, r0, #1
 800769e:	d034      	beq.n	800770a <_malloc_r+0xda>
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	19df      	adds	r7, r3, r7
 80076a4:	6027      	str	r7, [r4, #0]
 80076a6:	e013      	b.n	80076d0 <_malloc_r+0xa0>
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	dacb      	bge.n	8007644 <_malloc_r+0x14>
 80076ac:	230c      	movs	r3, #12
 80076ae:	2500      	movs	r5, #0
 80076b0:	6033      	str	r3, [r6, #0]
 80076b2:	0028      	movs	r0, r5
 80076b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80076b6:	6822      	ldr	r2, [r4, #0]
 80076b8:	1bd1      	subs	r1, r2, r7
 80076ba:	d420      	bmi.n	80076fe <_malloc_r+0xce>
 80076bc:	290b      	cmp	r1, #11
 80076be:	d917      	bls.n	80076f0 <_malloc_r+0xc0>
 80076c0:	19e2      	adds	r2, r4, r7
 80076c2:	6027      	str	r7, [r4, #0]
 80076c4:	42a3      	cmp	r3, r4
 80076c6:	d111      	bne.n	80076ec <_malloc_r+0xbc>
 80076c8:	602a      	str	r2, [r5, #0]
 80076ca:	6863      	ldr	r3, [r4, #4]
 80076cc:	6011      	str	r1, [r2, #0]
 80076ce:	6053      	str	r3, [r2, #4]
 80076d0:	0030      	movs	r0, r6
 80076d2:	0025      	movs	r5, r4
 80076d4:	f000 f86c 	bl	80077b0 <__malloc_unlock>
 80076d8:	2207      	movs	r2, #7
 80076da:	350b      	adds	r5, #11
 80076dc:	1d23      	adds	r3, r4, #4
 80076de:	4395      	bics	r5, r2
 80076e0:	1aea      	subs	r2, r5, r3
 80076e2:	429d      	cmp	r5, r3
 80076e4:	d0e5      	beq.n	80076b2 <_malloc_r+0x82>
 80076e6:	1b5b      	subs	r3, r3, r5
 80076e8:	50a3      	str	r3, [r4, r2]
 80076ea:	e7e2      	b.n	80076b2 <_malloc_r+0x82>
 80076ec:	605a      	str	r2, [r3, #4]
 80076ee:	e7ec      	b.n	80076ca <_malloc_r+0x9a>
 80076f0:	6862      	ldr	r2, [r4, #4]
 80076f2:	42a3      	cmp	r3, r4
 80076f4:	d101      	bne.n	80076fa <_malloc_r+0xca>
 80076f6:	602a      	str	r2, [r5, #0]
 80076f8:	e7ea      	b.n	80076d0 <_malloc_r+0xa0>
 80076fa:	605a      	str	r2, [r3, #4]
 80076fc:	e7e8      	b.n	80076d0 <_malloc_r+0xa0>
 80076fe:	0023      	movs	r3, r4
 8007700:	6864      	ldr	r4, [r4, #4]
 8007702:	e7a7      	b.n	8007654 <_malloc_r+0x24>
 8007704:	002c      	movs	r4, r5
 8007706:	686d      	ldr	r5, [r5, #4]
 8007708:	e7af      	b.n	800766a <_malloc_r+0x3a>
 800770a:	230c      	movs	r3, #12
 800770c:	0030      	movs	r0, r6
 800770e:	6033      	str	r3, [r6, #0]
 8007710:	f000 f84e 	bl	80077b0 <__malloc_unlock>
 8007714:	e7cd      	b.n	80076b2 <_malloc_r+0x82>
 8007716:	46c0      	nop			; (mov r8, r8)
 8007718:	200005f8 	.word	0x200005f8

0800771c <_realloc_r>:
 800771c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800771e:	0007      	movs	r7, r0
 8007720:	000e      	movs	r6, r1
 8007722:	0014      	movs	r4, r2
 8007724:	2900      	cmp	r1, #0
 8007726:	d105      	bne.n	8007734 <_realloc_r+0x18>
 8007728:	0011      	movs	r1, r2
 800772a:	f7ff ff81 	bl	8007630 <_malloc_r>
 800772e:	0005      	movs	r5, r0
 8007730:	0028      	movs	r0, r5
 8007732:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007734:	2a00      	cmp	r2, #0
 8007736:	d103      	bne.n	8007740 <_realloc_r+0x24>
 8007738:	f7ff ff0e 	bl	8007558 <_free_r>
 800773c:	0025      	movs	r5, r4
 800773e:	e7f7      	b.n	8007730 <_realloc_r+0x14>
 8007740:	f000 f83e 	bl	80077c0 <_malloc_usable_size_r>
 8007744:	9001      	str	r0, [sp, #4]
 8007746:	4284      	cmp	r4, r0
 8007748:	d803      	bhi.n	8007752 <_realloc_r+0x36>
 800774a:	0035      	movs	r5, r6
 800774c:	0843      	lsrs	r3, r0, #1
 800774e:	42a3      	cmp	r3, r4
 8007750:	d3ee      	bcc.n	8007730 <_realloc_r+0x14>
 8007752:	0021      	movs	r1, r4
 8007754:	0038      	movs	r0, r7
 8007756:	f7ff ff6b 	bl	8007630 <_malloc_r>
 800775a:	1e05      	subs	r5, r0, #0
 800775c:	d0e8      	beq.n	8007730 <_realloc_r+0x14>
 800775e:	9b01      	ldr	r3, [sp, #4]
 8007760:	0022      	movs	r2, r4
 8007762:	429c      	cmp	r4, r3
 8007764:	d900      	bls.n	8007768 <_realloc_r+0x4c>
 8007766:	001a      	movs	r2, r3
 8007768:	0031      	movs	r1, r6
 800776a:	0028      	movs	r0, r5
 800776c:	f7ff fed7 	bl	800751e <memcpy>
 8007770:	0031      	movs	r1, r6
 8007772:	0038      	movs	r0, r7
 8007774:	f7ff fef0 	bl	8007558 <_free_r>
 8007778:	e7da      	b.n	8007730 <_realloc_r+0x14>
	...

0800777c <_sbrk_r>:
 800777c:	2300      	movs	r3, #0
 800777e:	b570      	push	{r4, r5, r6, lr}
 8007780:	4d06      	ldr	r5, [pc, #24]	; (800779c <_sbrk_r+0x20>)
 8007782:	0004      	movs	r4, r0
 8007784:	0008      	movs	r0, r1
 8007786:	602b      	str	r3, [r5, #0]
 8007788:	f7fb fb60 	bl	8002e4c <_sbrk>
 800778c:	1c43      	adds	r3, r0, #1
 800778e:	d103      	bne.n	8007798 <_sbrk_r+0x1c>
 8007790:	682b      	ldr	r3, [r5, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d000      	beq.n	8007798 <_sbrk_r+0x1c>
 8007796:	6023      	str	r3, [r4, #0]
 8007798:	bd70      	pop	{r4, r5, r6, pc}
 800779a:	46c0      	nop			; (mov r8, r8)
 800779c:	20000600 	.word	0x20000600

080077a0 <__malloc_lock>:
 80077a0:	b510      	push	{r4, lr}
 80077a2:	4802      	ldr	r0, [pc, #8]	; (80077ac <__malloc_lock+0xc>)
 80077a4:	f000 f814 	bl	80077d0 <__retarget_lock_acquire_recursive>
 80077a8:	bd10      	pop	{r4, pc}
 80077aa:	46c0      	nop			; (mov r8, r8)
 80077ac:	20000604 	.word	0x20000604

080077b0 <__malloc_unlock>:
 80077b0:	b510      	push	{r4, lr}
 80077b2:	4802      	ldr	r0, [pc, #8]	; (80077bc <__malloc_unlock+0xc>)
 80077b4:	f000 f80d 	bl	80077d2 <__retarget_lock_release_recursive>
 80077b8:	bd10      	pop	{r4, pc}
 80077ba:	46c0      	nop			; (mov r8, r8)
 80077bc:	20000604 	.word	0x20000604

080077c0 <_malloc_usable_size_r>:
 80077c0:	1f0b      	subs	r3, r1, #4
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	1f18      	subs	r0, r3, #4
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	da01      	bge.n	80077ce <_malloc_usable_size_r+0xe>
 80077ca:	580b      	ldr	r3, [r1, r0]
 80077cc:	18c0      	adds	r0, r0, r3
 80077ce:	4770      	bx	lr

080077d0 <__retarget_lock_acquire_recursive>:
 80077d0:	4770      	bx	lr

080077d2 <__retarget_lock_release_recursive>:
 80077d2:	4770      	bx	lr

080077d4 <_init>:
 80077d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d6:	46c0      	nop			; (mov r8, r8)
 80077d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077da:	bc08      	pop	{r3}
 80077dc:	469e      	mov	lr, r3
 80077de:	4770      	bx	lr

080077e0 <_fini>:
 80077e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e2:	46c0      	nop			; (mov r8, r8)
 80077e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077e6:	bc08      	pop	{r3}
 80077e8:	469e      	mov	lr, r3
 80077ea:	4770      	bx	lr
